#!/bin/bash
shopt -qs globstar # ** matches files and/only (as **/) subdirs recursively.

printUsage()
{
    cat <<HELPTEXT
List local branches and their first commit ordered by date of first commit, as
based on the best common ancestors of all branches  or the branch passed with
--base <branch>.
Pass -r to list remote-tracking branches.
Pass -a to list both.
The branches can be optionally filtered by <branch-glob>.
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-r|-a] [-b|--base <branch>] [<branch-glob>] [-?|-h|--help]'
}

locality='local'
base=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--all|-a)	shift; locality='all';;
	--remote|-r)	shift; locality='remote';;
	--base|-b)	shift; base="$1"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
branchGlob="${1//\*/**}"    # As we're doing file system lookup, a branch name glob needs to be converted into a directory hierarchy one in case the branch name contains slashes.
case $locality in
    local)  what="refs/heads/$branchGlob";;
    all)    what="refs/heads/$branchGlob refs/remotes/$branchGlob";;
    remote) what="refs/remotes/$branchGlob";;
esac

typeset -a branches=($(git for-each-ref --format='%(refname:short)' $what)) || exit $?
typeset -a firstCommits=()
for branch in "${branches[@]}"
do
    if [ "$base" ]; then
	mergeBase=$(git merge-base "$branch" "$base") || exit $?
    else
	mergeBase=$(git merge-base --octopus "$branch") || exit $?
    fi
    firstCommit=$(git log --pretty="tformat:%at %h (%aN, %ar)" "${mergeBase}..${branch}" | tail -n 1)
    if [ ! "$firstCommit" ]; then
	# There's no log output when the merge base is identical to the branch;
	# i.e. there's only one commit on the branch so far. Grab that commit
	# separately; this is easier than first checking with get show-ref
	# whether the hashes are identical.
	firstCommit=$(git log -1 --pretty="tformat:%at %h (%aN, %ar)" "${branch}")
    fi
    firstCommits+=("$firstCommit $branch")

done
IFS=$'\n' sortedFirstCommits=($(sort <<<"${firstCommits[*]}"))

# Print the sorted information without the leading Unix timestamp used as the
# sort key.
IFS=$'\n' printf '%s\n' "${sortedFirstCommits[*]#* }"
