#!/bin/bash
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Merge <branch> to the current branch, then delete it from the local repository
as well as a tracked remote (if it exists there).
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--ff|--ff-only|--no-ff|<merge-args> ...] -b|--branch <branch> [...] | [--] <branch> [...]'
}

typeset -a branches=()
typeset -a mergeArgs=()
typeset -a fastForwardArgs=()
typeset -a mergeArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--branch|-b)	shift; branches+=("$1"); shift;;
	--ff|--no-ff|--ff-only)	fastForwardArgs=("$1"); shift;;

	-[sXm])		mergeArgs+=("$1" "$2"); shift; shift;;
	--@(strategy|strategy-option|gpg-sign)=*)	mergeArgs+=("$1"); shift;;
	--@(strategy|strategy-option|gpg-sign))		mergeArgs+=("$1" "$2"); shift; shift;;

	--)		mergeArgs+=("$1"); shift; break;;
	--*)		mergeArgs+=("$1"); shift;;
	-*)		mergeArgs+=("$1"); shift;;
	*)		break;;
    esac
done
branches+=("$@")
if [ ${#branches[@]} -eq 0 ]; then
    echo >&2 'Need (at least one) <branch> to merge!'
    exit 2
fi


git merge "${fastForwardArgs[@]:---no-ff}" "${mergeArgs[@]}" "${branches[@]}" || exit $?

status=0
for branch in "${branches[@]}"
do
    tracks="$(git-tracks "$branch" 2>/dev/null)"
    trackedRemote="${tracks%%/*}"
    if [ "$trackedRemote" ]; then
	git-rldeletebr "$trackedRemote" "$branch" || status=$?
    else
	git deletebr "$branch" || status=$?
    fi
done
exit $status
