#!/bin/bash
###############################################################################
##
# FILE: 	git-writebackup-import
# PRODUCT:	tools
# AUTHOR: 	/^--
# DATE CREATED:	03-Feb-2012
#
###############################################################################
# CONTENTS: 
#   
# REMARKS: 
#   
# FILE_SCCS = "@(#)git-writebackup-import	001	(03-Feb-2012)	tools";
#
# REVISION	DATE		REMARKS 
#	001	03-Feb-2012	file creation
###############################################################################

[ ${BASH_VERSINFO[0]} -ge 4 ] || { echo >&2 "ERROR: This script requires Bash 4.0 or higher!"; exit 2; }

printShortUsage()
{
    cat <<SHORTHELPTEXT
Usage: git init && "$(basename "")" path/to/srcdir [-?|-h|--help]
SHORTHELPTEXT
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments. 
    # It is printed to stderr to avoid accidental processing. 
    printShortUsage "$1" >&2
    cat >&2 <<MOREHELP
Try "$(basename "$1")" --help for more information.
MOREHELP
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument. 
    # It is printed to stdout to allow paging with 'more'. 
    cat <<HELPDESCRIPTION
Import a directory hierarchy into Git, using existing backup files with a
current date file extension (format '.YYYYMMDD[a-z]', as written by the
writebackup family of tools) as history. 
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT

Example:
git init ~/src/gitproject && "$(basename "$1")" ~/src/myproject
HELPTEXT
}

declare -A datedOriginals=()
findOriginals()
{
    for filespec in $(find "$srcdir" -name '*.[12][0-9][0-9][0-9][0-9][0-9][0-9][0-9][a-z]' -prune -o -type f -print)
    do
	modDate=$(date -d "$(stat -c %y "$filespec")" +%Y%m%d)
	local tmp=${datedOriginals["$modDate"]}
	datedOriginals["$modDate"]="${tmp}${tmp:+$'\n'}${filespec}"
    done
}
findBackupDates()
{
    find "$srcdir" -name '*.[12][0-9][0-9][0-9][0-9][0-9][0-9][0-9][a-z]' | sed -e 's/^.*\.\([12][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\)[a-z]$/\1/'
}
findOriginalsDates()
{
    echo "${!datedOriginals[@]}" | tr ' ' '
'
}
findCommitDates()
{
    (findBackupDates; findOriginalsDates) | sort -u
}

findDatedBackups()
{
    find "$srcdir" -name "*.${1}[a-z]" -type f -print
}
findDatedOriginals()
{
    echo "${datedOriginals["$1"]}"
}
findDatedFiles()
{
    findDatedBackups "$1"
    findDatedOriginals "$1"
}

declare -A lastBackups=()
findLastBackup()
{
    local -r file=$1
    shift

    # Use cache to avoid doing the same costly search repeatedly for each
    # committed backup version. 
    lastBackup=${lastBackups["$file"]}
    if [ ! "$lastBackup" ]; then
	lastBackup=$(cd "$srcdir" && ls -1 "$file".[12][0-9][0-9][0-9][0-9][0-9][0-9][0-9][a-z] | tail -n 1)
	lastBackups["$file"]=$lastBackup
    fi

    echo "$lastBackup"
}

importFile()
{
    local -r commitDate=$1
    shift
    local -r importFile=$1
    shift
    local -r destFile=${importFile%.[12][0-9][0-9][0-9][0-9][0-9][0-9][0-9][a-z]}
    local -r destDir=$(dirname -- "$importFile")

    [ -d "$destDir" ] || mkdir -p "$destDir" || exit $? 
    cp "${srcdir}${importFile}" "$destFile"
    git add "$destFile" || return $?
    git commit --allow-empty-message --message= --date="$(date -d "$commitDate")" || return $?

    local -r importOriginal="${srcdir}${destFile}"
    if [ "$destFile" != "$importFile" -a ! -e "$importOriginal" ]; then
	# This is a backup file where no original exists any more, so the file
	# should be removed from source control after the last backup file has
	# been committed. 
	if [ "$importFile" = "$(findLastBackup "$destFile")" ]; then
	    git rm --quiet "$destFile" || return $?
	    git commit --allow-empty-message --message= --date="$(date -d "$commitDate")" || return $?
	fi
    fi
}



while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"\"!"; echo; printShortUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
[ $# -ne 1 ] && { printUsage "$0"; exit 2; }
readonly srcdir="${1%/}/"

git status >/dev/null || exit $?
branch=$(git symbolic-ref HEAD)
branch=${branch##refs/heads/} 

findOriginals
echo "Importing files${branch:+ into }${branch}..."
for commitDate in $(findCommitDates)
do
    formattedCommitDate="${commitDate:0:4}-${commitDate:4:2}-${commitDate:6:2}"
    echo "${formattedCommitDate}:"

    for filespec in $(findDatedFiles "$commitDate")
    do
	importFile=${filespec#${srcdir}}
	importFile "$formattedCommitDate" "$importFile" | sed -e '
/^\[.*\] *$/{
    s#\['"${branch//#/\\#}"' #[#
    s/(root-commit) //
    s/[][]//g
    h
}
/1 files changed/{
    s/^ *1 files changed, *//
    s/\([0-9]\+\) insertions(+)/+\1/
    s/\([0-9]\+\) deletions(-)/-\1/
    s/+0, //
    s/, -0//
    s/.*/(&)/
    H
}
$!d
${
    g
    s#$#\t'"${importFile//#/\\#}"'#
    s/^/    /
    s/\n//
}
'
    done
done
