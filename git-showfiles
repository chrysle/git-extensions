#!/bin/bash

# Sources:
#   http://stackoverflow.com/questions/1552340/git-show-all-changed-files-between-two-commits
#   http://stackoverflow.com/questions/3144647/git-show-all-files-changed-between-two-commits

printUsage()
{
    cat <<HELPTEXT
Show the files modified in passed commit or commit range.
With --intermediate, files that are again the same, but were changed and then
changed back, are included, too.
With -s|--status, includes the status (added, modified, etc.), as a first column.
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--intermediate] [-s|--status] [<since>..<until>] [[--] <path>...] [-?|-h|--help]'
}

haveRange=
isIncludeIntermediate=
sorter='cut -f 2- | sort --unique'
typeset -a allargs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--intermediate)	shift; isIncludeIntermediate=t;;
	--status|-s)	shift; sorter='sort --key 2 --unique';;
	*..*)		haveRange=t; allargs+=("$1"); shift;;
	--)		allargs+=("$1"); shift; break;;
	*)		allargs+=("$1"); shift;;
    esac
done

if [ "$isIncludeIntermediate" -a ! "$haveRange" ]; then
    echo >&2 "ERROR: Need a <since>..<until> range to show intermediate changes!"
    exit 2
fi

if [ "$haveRange" ]; then
    if [ "$isIncludeIntermediate" ]; then
	git log --pretty='format:' --name-status "${allargs[@]}" "$@"
    else
	# Source: http://stackoverflow.com/a/1552353/813602
	git diff --name-status "${allargs[@]}" "$@"
    fi
else
    git show --pretty='format:' --name-status "${allargs[@]}" "$@"
fi | eval "$sorter" | sed -e '/^$/d' | "${PAGER:-less}" --RAW-CONTROL-CHARS
