#!/bin/bash
set -o pipefail

# Sources:
#   http://stackoverflow.com/questions/1552340/git-show-all-changed-files-between-two-commits
#   http://stackoverflow.com/questions/3144647/git-show-all-files-changed-between-two-commits

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--intermediate] [-s|--status] [<since>..<until>] [[--] <path>...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 'Try %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Show the files modified in passed commit or commit range.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --intermediate  files that are again the same, but were changed and then
		    changed back, are included, too
    -s|--status	    includes the status (added, modified, etc.), as a first
		    column
HELPTEXT
}

typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()
haveRange=
isIncludeIntermediate=
gitNameArg='--name-only'
sorter='sort -u'
typeset -a allargs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--intermediate)	shift; isIncludeIntermediate=t;;
	--status|-s)	shift; gitNameArg='--name-status'; sorter='sort -k 2 -u';;
	*..*)		haveRange=t; allargs+=("$1"); shift;;
	--)		allargs+=("$1"); shift; break;;
	*)		allargs+=("$1"); shift;;
    esac
done

if [ "$isIncludeIntermediate" ]; then
    git log --pretty='format:' "$gitNameArg" "${allargs[@]}" "$@"
elif [ "$haveRange" ]; then
    # Source: http://stackoverflow.com/a/1552353/813602
    git diff "$gitNameArg" "${allargs[@]}" "$@"
else
    git show --pretty='format:' "$gitNameArg" "${allargs[@]}" "$@"
fi | eval "$sorter | sed -e '/^\$/d'" "${pager:+|}" '"${pager[@]}"'
