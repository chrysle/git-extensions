#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Print / execute GIT-COMMAND with a revision range starting from the passed
REVISION; possibly including one previous commit, ending at HEAD or the passed
END-REVISION.
The revision range (with --no-range, only the starting revision will be used) is
appended at the end of GIT-COMMAND ...; with --keep-last, it is put between the
next-to-last and last arguments.
A different GIT-COMMAND2 can be used for the --one-more revision; with ^[1|2],
the modifier instead is appended to the revision, and there's only one
invocation of GIT-COMMAND.
HELPTEXT
printf 'Usage: %q %s\n' "$(basename "$1")" '-r|--revision REVISION [-e|--end-revision END-REVISION|--no-range] [--keep-last] [+1|--one-more|--one-more-command GIT-COMMAND2|^[1|2]] [GIT-COMMAND ...] [-?|-h|--help]'
}

isKeepLastArgument=
isShowOneMore=
showOneMoreCommand=
revision=
revisionModifier=
endRevision=
range=..
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--revision|-r)	shift; revision="$1"; shift;;
	--end-revision|-e)	shift; endRevision="$1"; shift;;
	--keep-last)	shift; isKeepLastArgument=t;;
	--one-more|+1)	shift; isShowOneMore=t;;
	--one-more-command)
			shift
			if [ "${1:0:1}" = '^' ]; then
			    revisionModifier=$1
			else
			    isShowOneMore=t; showOneMoreCommand=$1
			fi
			shift
			;;
	--no-range)	shift; range=;;
	*)		break;;
    esac
done
if [ ! "$revision" ]; then
    echo >&2 "ERROR: Missing REVISION!"
    exit 2
elif [ ! "$range" ] && [ "$endRevision" ]; then
    echo >&2 "ERROR: --end-revision cannot be combined with --no-range!"
    exit 2
fi

contains()
{
    needle=$1
    shift
    for elem
    do
	[ "$needle" = "$elem" ] && return 0
    done
    return 1
}


if [ $# -eq 0 ]; then
    printf '%s%s%s\n' "$revision" "${revisionModifier}${isShowOneMore:+^}" "${range}${endRevision}"
    exit 0
fi

endOfArgsIndex=$#
beforeEndOfArgsIndex=$((endOfArgsIndex-1))
afterEndOfArgsIndex=$((endOfArgsIndex+1))

typeset -a preRangeFirstArg=("${showOneMoreCommand:-$1}")
if [ $# -gt 0 -a "$isKeepLastArgument" ]; then
    typeset -a preRangeRemainingArgs=("${@:2:$beforeEndOfArgsIndex}")
    typeset -a preRangeArgs=("${@:1:$beforeEndOfArgsIndex}")
    typeset -a postRangeArgs=("${@:$endOfArgsIndex}")
else
    typeset -a preRangeRemainingArgs=("${@:2:$endOfArgsIndex}")
    typeset -a preRangeArgs=("${@:1:$endOfArgsIndex}")
    typeset -a postRangeArgs=("${@:$afterEndOfArgsIndex}")
fi

if [ "$isShowOneMore" ]; then
    # Because of the piping into the pager, we need to explicitly enable color.
    # Don't do this if the user explicitly turned it off, though.
    typeset -a colorArg=(--color=always)
    if [ ! -t 1 ] || contains '--no-color' "${preRangeArgs[@]}" || contains '--color=never' "${preRangeArgs[@]}"; then
	colorArg=()
    fi

    git-wrapper "${preRangeArgs[@]}" "${colorArg[@]}" "${revision}${range}${endRevision}" "${postRangeArgs[@]}" && \
	git-wrapper "${preRangeFirstArg[@]}" "${preRangeRemainingArgs[@]}" --max-count 1 "${colorArg[@]}" "${revision}" | \
	"${PAGER:-less}" --RAW-CONTROL-CHARS
else
    exec git-wrapper "${preRangeArgs[@]}" "${revision}${revisionModifier}${range}${endRevision}" "${postRangeArgs[@]}"
fi
