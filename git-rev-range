#!/bin/bash
set -o pipefail

printUsage()
{
    cat <<HELPTEXT
Print / execute GIT-COMMAND with a revision range starting from the passed
REVISION; possibly including one previous commit, ending at HEAD or the passed
END-REVISION.
The revision range (with --no-range, only the starting revision will be used) is
appended at the end of GIT-COMMAND ...; with --keep-last, it is put between the
next-to-last and last arguments. Unparsed arguments starting from -- are ignored
for this, and always put last.
A different GIT-COMMAND2 can be used for the --one-more revision via
--one-more-command. The --keep-last does not apply to GIT-COMMAND2; the revision
always comes last there. With a ^, ^1, ^2 argument to --one-more-command, the
modifier instead is appended to the revision, and there's only one invocation of
GIT-COMMAND, unlike with --one-more, where there are two. Some clients (like
rbi) really need a single previous revision. On the other hand, --one-more just
shows a single additional command, whereas --one-more-command ^ may include a
whole set of merge commits.
HELPTEXT
printf 'Usage: %q %s\n' "$(basename "$1")" '-r|--revision REVISION [-e|--end-revision END-REVISION|--no-range] [--keep-last] [+1|--one-more|--one-more-command GIT-COMMAND2|^[1|2]] [GIT-COMMAND ...] [-?|-h|--help]'
}

isKeepLastArgument=
isShowOneMore=
showOneMoreCommand=
revision=
revisionModifier=
endRevision=
range=..
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--revision|-r)	shift; revision="$1"; shift;;
	--end-revision|-e)	shift; endRevision="$1"; shift;;
	--keep-last)	shift; isKeepLastArgument=t;;
	--one-more|+1)	shift; isShowOneMore=t;;
	--one-more-command)
			shift
			if [ "${1:0:1}" = '^' ]; then
			    revisionModifier=$1
			else
			    isShowOneMore=t; showOneMoreCommand=$1
			fi
			shift
			;;
	--no-range)	shift; range=;;
	--with-range)	shift; range="$1"; shift;;
	*)		break;;
    esac
done
if [ ! "$revision" ]; then
    echo >&2 "ERROR: Missing REVISION!"
    exit 2
elif [ ! "$range" ] && [ "$endRevision" ]; then
    echo >&2 "ERROR: --end-revision cannot be combined with --no-range!"
    exit 2
fi

contains()
{
    needle=$1
    shift
    for elem
    do
	[ "$needle" = "$elem" ] && return 0
    done
    return 1
}
getIndex()
{
    local i=1 elem needle=$1; shift
    for elem
    do
	if [ "$needle" = "$elem" ]; then
	    echo "$i"
	    return 0
	fi
	let i+=1
    done
    return 1
}

if [ ! "$(git rev-list "${revision}..${endRevision}")" ] && [ "$range" ]; then
    # Resulting range is empty (but we want a range); abort. Especially with
    # --one-more, we otherwise would use a single commit, and that could be
    # really confusing.
    exit 1
fi

if [ $# -eq 0 ]; then
    printf '%s%s%s\n' "$revision" "${revisionModifier}${isShowOneMore:+^}" "${range}${endRevision}"
    exit 0
fi


afterEndOfArgsIndex=$(getIndex '--' "$@") || afterEndOfArgsIndex=$(($#+1))
endOfArgsIndex=$((afterEndOfArgsIndex-1))
beforeEndOfArgsIndex=$((endOfArgsIndex-1))

typeset -a preRangeFirstArg=("${showOneMoreCommand:-$1}")
if [ $# -gt 0 -a "$isKeepLastArgument" ]; then
    typeset -a preRangeRemainingWithLastArgs=("${@:2:$beforeEndOfArgsIndex}")
    typeset -a preRangeArgs=("${@:1:$beforeEndOfArgsIndex}")
    typeset -a postRangeArgs=("${@:$endOfArgsIndex}")
    typeset -a postRangeWithLastArgs=("${@:$afterEndOfArgsIndex}")
else
    typeset -a preRangeRemainingWithLastArgs=("${@:2:$beforeEndOfArgsIndex}")
    typeset -a preRangeArgs=("${@:1:$endOfArgsIndex}")
    typeset -a postRangeArgs=("${@:$afterEndOfArgsIndex}")
    typeset -a postRangeWithLastArgs=("${@:$afterEndOfArgsIndex}")
fi

revRangeWithOneMore()
{
    if contains '--reverse' "${preRangeArgs[@]}"; then
	# The (log) output is in reverse order, so the "one more" also needs to
	# come first instead of last.
	git-wrapper "${preRangeFirstArg[@]}" "${preRangeRemainingWithLastArgs[@]}" --max-count 1 "${colorArg[@]}" "${revision}" "${postRangeWithLastArgs[@]}" && \
	    git-wrapper "${preRangeArgs[@]}" "${colorArg[@]}" "${revision}${range}${endRevision}" "${postRangeArgs[@]}"
    else
	git-wrapper "${preRangeArgs[@]}" "${colorArg[@]}" "${revision}${range}${endRevision}" "${postRangeArgs[@]}" && \
	    git-wrapper "${preRangeFirstArg[@]}" "${preRangeRemainingWithLastArgs[@]}" --max-count 1 "${colorArg[@]}" "${revision}" "${postRangeWithLastArgs[@]}"
    fi
}
if [ "$isShowOneMore" ]; then
    # Because of the piping into the pager, we need to explicitly enable color.
    # Don't do this if the user explicitly turned it off, though.
    typeset -a colorArg=(); isNeedColorArgumentWhenPiping "${preRangeArgs[@]}" && colorArg=(--color=always) || colorArg=()

    typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()
    eval 'revRangeWithOneMore "$@"' "${pager:+|}" '"${pager[@]}"'
else
    exec git-wrapper "${preRangeArgs[@]}" "${revision}${revisionModifier}${range}${endRevision}" "${postRangeArgs[@]}"
fi
