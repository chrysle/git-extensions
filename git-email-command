#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" 'GIT-COMMAND [-n|--dry-run] [--authors|--committers] [<log-options>] [<revision range>] [<path>...] [-- EMAIL-OPTIONS ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 'Try %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute GIT-COMMAND (log or a variant) and start composing an email with that
output to the originators of the covered commits.
    --dry-run|-n    Don't launch the email program, just print the command-line
		    that would do it.
    --authors	    Only send to authors.
    --committers    Only send to committers.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT

HELPTEXT
}

case "$1" in
    --help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
esac
gitLogCommand="$1"; shift
if [ -z "$gitLogCommand" ]; then
    echo >&2 'ERROR: No GIT-COMMAND passed.'
    echo >&2
    printShortUsage "$0" >&2
    exit 2
fi

isDryRun=
emailFormats='%aE%n%cE'
typeset -a gitLogArgs=()
typeset -a emailArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--dry-run|-n)	shift; isDryRun=t;;
	--authors)	shift; emailFormats='%aE';;
	--committers)	shift; emailFormats='%cE';;
	--)		shift; emailArgs=("$@"); break;;
	*)		gitLogArgs+=("$1"); shift;;
    esac
done

IFS=$'\n'
typeset -a recipients=($(git log "--pretty=tformat:$emailFormats" "${gitLogArgs[@]}" | sort -u | grep -v '^noreply@'))
if [ ${#recipients[@]} -eq 0 ]; then
    echo >&2 "No recipients found."
    exit 1
fi

printf -v quotedGitArgs '%q ' "${gitLogArgs[@]}"
printf -v quotedEmailArgs '%q ' "${emailArgs[@]}" "$(joinBy , "${recipients[@]}")"
emailCommandLine="git $gitLogCommand ${quotedGitArgs}| emailpipe $quotedEmailArgs"
if [ "$isDryRun" ]; then
    printf '%s\n' "$emailCommandLine"
else
    eval "$emailCommandLine"
fi
