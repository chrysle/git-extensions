#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Execute GIT-COMMAND (log or a variant) and start composing an email with that
output to the originators (or limited to --authors|--committers) of the covered
commits.
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" 'GIT-COMMAND [-n|--dry-run] [--authors|--committers] [<log-options>] [<revision range>] [<path>...] [-- EMAIL-OPTIONS ...] [-?|-h|--help]'
}

gitLogCommand="$1"; shift
isDryRun=
emailFormats='%aE%n%cE'
typeset -a gitLogArgs=()
typeset -a emailArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--dry-run|-n)	shift; isDryRun=t;;
	--authors)	shift; emailFormats='%aE';;
	--committers)	shift; emailFormats='%cE';;
	--)		shift; emailArgs=("$@"); break;;
	*)		gitLogArgs+=("$1"); shift;;
    esac
done

IFS=$'\n'
typeset -a recipients=($(git log "--pretty=tformat:$emailFormats" "${gitLogArgs[@]}" | sort -u | grep -v '^noreply@'))
if [ ${#recipients[@]} -eq 0 ]; then
    echo >&2 "No recipients found."
    exit 1
fi

printf -v quotedGitArgs '%q ' "${gitLogArgs[@]}"
printf -v quotedEmailArgs '%q ' "${emailArgs[@]}" "$(joinBy , "${recipients[@]}")"
emailCommandLine="git $gitLogCommand ${quotedGitArgs}| emailpipe $quotedEmailArgs"
if [ "$isDryRun" ]; then
    printf '%s\n' "$emailCommandLine"
else
    eval "$emailCommandLine"
fi
