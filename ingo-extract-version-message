#!/usr/bin/perl
###############################################################################
##
# FILE:		ingo-extract-version-message
# PRODUCT:	tools
# AUTHOR:	Ingo Karkat <ingo@karkat.de>
# DATE CREATED:	12-Mar-2013
#
###############################################################################
# CONTENTS:
#   Extract the revision message from ingo's custom changelog file header by
#   looking at the differences between the current and previous version.
#
# REMARKS:
#
# @(#)ingo-extract-version-message	001	(12-Mar-2013)	tools
#
# REVISION	DATE		REMARKS
#	001	12-Mar-2013	file creation
###############################################################################

our $confidentPattern = qr/^(\S{1,3})\s+([0-9.]+)\s+(\d{2}-[[:alpha:]]{3}-\d{4})\s+(\S.*?)\s*\r?\n?$/;

sub formatMessage()
{
    my $message = shift;
    $message =~ s/^(\w+: |\S+\(\):)*+[^\n]+?(?<!\.)(?<!e\.g|f\.e|i\.e)\K[.:] (?=\S)/\n/;  # End summary at first punctuation (after prefixed keywords).
    $message =~ s/^[^\n]+\K[.:]\s*(\n|$)/\n/;  # Remove punctuation at the end of summary line.
    $message =~ s/^([^\n]+\n)([^\n])/\1\n\2/;	# Add blank line after summary line.
    return $message;

}

sub investigate()
{
    my $isConfident, $commentPrefix, $revision, $message;
    if (@_[0] =~ $confidentPattern) {
	$isConfident = 1;
	($isConfident, $commentPrefix, $revision, $message) = (1, $1, $2, $4);
    } elsif (@_[0] =~ /^(\S{1,3})\s+(Copyright: \(C\) \d+.*)\s*\r?\n?$/) {
	return (0, '');
    } elsif (@_[0] =~ /^(\S{1,3})\s+([[:upper:]][[:alpha:]].*?)\s*\r?\n?$/) {
	($isConfident, $commentPrefix, $revision, $message) = (0, $1, '', $2);
    } else {
	return (0, '');
    }

    shift @_;
    foreach (@_) {
	last unless (substr($_, 0, length($commentPrefix)) eq $commentPrefix);
	s/^\S{1,3}\s+([0-9.]+\s+\d{2}-[[:alpha:]]{3}-\d{4}\s+)?(\S.*?)\s*\r?\n?$/$2/;
	if ($message =~ /[.!?]\)?$/ and $_ =~ /[[:upper:]][[:alpha:]]/) {
	    # When the previous message text ends with a full sentence and the
	    # additional line starts with an uppercase word, put it on a new
	    # line.
	    $message .= "\n" . $_;
	} else {
	    $message .= ' ' . $_;
	}
    }

    return ($isConfident, &formatMessage($message));
}

sub investigateChangelog()
{
    shift @_ if (@_[0] =~ /^\d+\.\d+\s+\S+\r?$/);

    if (scalar @_ == 0) {
	return (0, "");
    } elsif (scalar @_ == 1) {
	my $message = @_[0];
	$message =~ s/^- //;
	return (1, "Documentation: " . &formatMessage($message));
    } else {
	return (1, "Documentation: Update changelog\n\n" . join("", @_));
    }
}

sub getMessage()
{
    my ($isConfident, $message) = &$investigateRef(@_);
    if ($message ne '') {
	if ($isConfident) {
	    print $message;
	    exit 0;
	} elsif ($firstMessage eq '') {
	    $firstMessage = $message;
	}
    }
}

if ($#ARGV < 1) {
    use File::Basename;
    my $scriptName = basename($0);
    print <<EOF;
Usage: $scriptName <filespec> <previous-filespec>

Extract the revision message from ingo's custom changelog file header by looking
at the differences between the current and previous version.

Returns:
    0 if a message has been extracted (and printed to stdout)
    1 if no message could be extracted
    2 if invoked with wrong or missing command-line arguments
    3 if no previous filespec exists (and prints a generic "file creation"
      message to stdout)

Use with git-writebackup-import --commit-message-plugin=$0
EOF
    exit 2;
}

my ($filespec, $previousFilespec) = @ARGV;

if (! -e $previousFilespec) {
    print "file creation\n";
    exit 3;
}

my @hunk = ();
our $investigateRef = \&investigate;
our $firstMessage = '';
my $diffCommand = "diff '$previousFilespec' '$filespec'";
if ($filespec =~ /\.txt(\.[0-9]{8}[a-z])?$/) {
    $diffCommand = "bash -c \"diff <(sed 1,/^HISTORY/d '$previousFilespec') <(sed 1,/^HISTORY/d '$filespec')\"";
    $investigateRef = \&investigateChangelog;
}
open(DIFF, $diffCommand . " |") or die "Can't diff: $!";
while (<DIFF>) {
    if (/^(---|< )/) {
	next;
    } elsif (/^> /) {
	s/^> //;
	if (@hunk && $_ =~ $confidentPattern) {
	    &getMessage(@hunk);
	    @hunk = ();
	}
	push(@hunk, $_);
    } elsif (@hunk) {
	&getMessage(@hunk);
	@hunk = ();
    }
}

if (@hunk) {
    &getMessage(@hunk);
}
if ($firstMessage ne '') {
    print $firstMessage;
    exit 0;
}

exit 1;
