#!/bin/bash
set -o noglob

printUsage()
{
    cat <<HELPTEXT
Test whether the working copy has either:
- dirty:    uncommitted changes
- private:  unversioned files (that are not ignored)
- noremote: no remotes have been defined yet; the repository only exists locally
- outgoing: where not all commits (on the current branch) have already been
	    pushed to origin (or origin doesn't even exist yet)
- wipcommit:where the last commit had "WIP:" in the message summary
- nonmaster:a branch different from the master branch (or the base branch if
	    defined) is checked out
- downstreambranches:
	    a branch that only exists in origin, but not upstream; may represent
	    concurrent work or a pull request
Individual checks can be selected / deselected via +name / -name.
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-q|--quiet] (+|-)(dirty|private|noremote|outgoing|wipcommit|nonmaster|downstreambranches) [-?|-h|--help]'
}
typeset -a colorArg=()
typeset -a gitColorConfigArg=()
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=*)
			colorArg=("$1"); shift;;
    --color)		colorArg=("$1" "$2"); shift; shift;;
    --quiet|-q)		shift; exec 1>/dev/null;;
esac
if isNeedColorArgumentWhenPiping "${colorArg[@]}"; then
    colorArg=(--color=always)
else
    colorArg=(--color=never)
    gitColorConfigArg=(-c color.status=false)
fi

isFirst=t
declare -A checks=([dirty]=t [private]=t [noremote]=t [outgoing]=t [wipcommit]=t [nonmaster]=t [downstreambranches]=t)
while [ $# -gt 0 ]
do
    case "$1" in
	+*) [ "$isFirst" ] && checks=()
	    checks["${1:1}"]=t
	    shift
	    ;;
	-*) unset checks["${1:1}"]
	    shift
	    ;;
    esac
    isFirst=
done

[ "${checks[dirty]}" ] && \
    if git dirty; then git "${gitColorConfigArg[@]}" st; exit 0; fi

findPrivateFiles()
{
    local IFS=$'\n'
    typeset -a privateFiles; privateFiles=($(git-lsprivate)) || return $?
    case ${#privateFiles[@]} in
	0)  return 1;;
	1)  printf 'Unversioned file: %s\n' "${privateFiles[0]}";;
	*)  printf 'Unversioned files:\n'
	    printf '%s\n' "${privateFiles[@]}"
	    ;;
    esac
}
[ "${checks[private]}" ] && \
    if findPrivateFiles; then exit 0; fi

[ "${checks[noremote]}" ] && \
    if ! git existsremote; then echo "Local-only repository; no remotes defined yet."; exit 0; fi

[ "${checks[outgoing]}" ] && \
    if git existsremote origin && git remotebr origin >/dev/null 2>&1 && git ooutlgn "${colorArg[@]}"; then exit 0; fi

[ "${checks[wipcommit]}" ] && \
    if git l --max-count=1 "${colorArg[@]}" | grep '\(^\| \)WIP: '; then exit 0; fi

[ "${checks[nonmaster]}" ] && \
    if branchName="$(git-brname --real-branch-only 2>/dev/null)"; [ -n "$branchName" -a "$branchName" != 'master' -a "$branchName" != "$(git-nbr 2>/dev/null)" ]; then printf 'On branch %s\n' "$branchName"; exit 0; fi

findDownstreamBranches()
{
    local originBranch
    local IFS=$'\n'
    local status=1
    for originBranch in $(git obr | sed -e 's/^ \+//')
    do
	if ! git existsbr "${originBranch/#origin/upstream}"; then
	    printf 'origin-only: %s\n' "${originBranch/#origin\//}"
	    status=0
	fi
    done
    return $status
}
[ "${checks[downstreambranches]}" ] && \
    if git existsremote origin && git existsremote upstream && findDownstreamBranches; then exit 0; fi

exit 1
