#!/bin/bash

typeset -a gitArgs=()
typeset -a paths=()
while [ $# -ne 0 ]
do
    case "$1" in
	--)		gitArgs+=("$1"); shift; paths=("$@"); break;;
	*)		gitArgs+=("$1"); shift;;
    esac
done
if [ ${#paths[@]} -eq 0 ]; then
    # No files after -- captured yet; need to investigate parsed and
    # remaining args from behind for files.
    gitArgs+=("$@")
    while [ ${#gitArgs[@]} -ne 0 ]
    do
	lastArg="${gitArgs[-1]}"
	[ -e "$lastArg" ] || break

	paths=("$lastArg" "${paths[@]}")
	gitArgs=("${gitArgs[@]:0:${#gitArgs[@]}-1}")
    done
fi

if [ ${#paths[@]} -eq 0 ]; then
    exec git-log --name-status "${gitArgs[@]}"
else
    # Pass all arguments to the initial log (assuming there's no --pretty
    # argument in it) for the limiting (--max-count) and filtering (--author,
    # --grep). The second show command doesn't need these (filtering would be
    # superfluous there), as all the visualization is hard-coded.
    git log --topo-order --pretty=tformat:%H "${gitArgs[@]}" "${paths[@]}" | xargs --delimiter '\n' git show --decorate --name-status
fi
