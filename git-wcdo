#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Execute "git COMMAND" on each passed WORKING-COPY.
Puts a header line (unless --no-header) that contains the WORKING-COPY name
(with --branch-name: also the current Git branch) before COMMAND's output.
Note: For paging and headers, this command has to control Git's color output.
Pass --no-git-color if "git COMMAND" does not support the --color=... arguments.
You can still pass --color=always if you pipe this command's output yet still
want coloring of headers.
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--no-pager] [--no-header|--branch-name] [--no-git-color] WORKING-COPY [...] -- [COMMAND ...] [-?|-h|--help]'
}

typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()
isHeader=t
isBranchName=
emptyHeaderFilterCommand=filterEmptyHeaders
isGitColor=t
typeset -a wcs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-pager)	shift; pager=();;
	--no-header)	shift; isHeader=; emptyHeaderFilterCommand=;;
	--branch-name)	shift; isBranchName=t;;
	--no-git-color)	shift; isGitColor=;;
	--)		shift; break;;
	*)		wcs+=("$1")
			shift
			;;
    esac
done
[ ${#wcs[@]} -eq 0 ] && { printUsage "$0" >&2; exit 2; }
[ $# -eq 0 ] && set -- noop

# With piping into withHeader / pager, we need to explicitly enable color,
# unless this command's output itself is redirected. Also don't do this if the
# user explicitly turned off color.
typeset -a colorArg=(--color=always)
if [ ! -t 1 ] && ! contains '--color=always' "$@" || [ ! "$pager" -a ! "$isHeader" ] || contains '--no-color' "$@" || contains '--color=never' "$@"; then
    colorArg=()
fi
if [ ! "$isGitColor" ]; then
    gitColorArg=()

    typeset -a argsWithoutColor=()
    for arg
    do
	case "$arg" in
	    --color=*|--no-color)   ;;
	    *)			    argsWithoutColor+=("$arg");;
	esac
    done
    set -- "${argsWithoutColor[@]}"
fi

set -o pipefail
wcdo()
{
    headerId="wcdo-$$"
    exitStatus=0
    for dir in "${wcs[@]}"
    do
	cd "$dir" || { exitStatus=$?; continue; }

	if [ "$isHeader" ]; then
	    header="${dir##*/}"
	    [ "$isBranchName" ] && header="${header%.*} on $(git-brname || echo 'unknown branch')"
	fi

	eval 'git "$@" "${gitColorArg[@]}"' "${isHeader:+2>&1 | withHeader "${colorArg[@]}" --id "$headerId" -- "$header"}" || exitStatus=$?
    done
    return $exitStatus
}

eval 'wcdo "$@" 2>&1' "${pager:+|}" '"${pager[@]}"'
