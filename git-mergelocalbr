#!/bin/bash

shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Merge all / the last committed N local branches (except for the current
branch and master (and base branch if defined)).
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--branches "<branch1> ..."] [N] [--no-commit] [--squash] [-s <strategy> | -s single | -s1 ] [-m <msg>]'
}

branchNum=9999
inputBranches=
printf -v originalArgs '%q ' "${@//
/ }"
if [ "$1" = '--branches' ]; then
    # Internal hook to pass in the branches.
    shift
    inputBranches=$1
    shift
fi
isOneByOneMerge=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	+([0-9]))	branchNum=$1; shift;;
	-s1)		shift; isOneByOneMerge=t;;
	-s)		if [ "$2" = 'single' ]; then shift; shift; isOneByOneMerge=t; else break; fi;;
	--)		shift; break;;
	*)		break;;
    esac
done

getOneByOneMergeCommand()
{
    local gitArgs=$1; shift
    local commandSeparator=
    local branch
    for branch
    do
	printf '%sgit merge%s%s %s' "$commandSeparator" "${gitArgs:+ }" "$gitArgs" "$branch"
	commandSeparator=' && '
    done
}

branches=$(git-localbr $inputBranches | tail -n "$branchNum") || exit $?
if [ ! "$branches" ]; then
    echo >&2 "No local branches found!"
    exit 1
fi
echo "Merging:
${branches// /
}
"

if [ "$isOneByOneMerge" ]; then
    typeset -a mergeCommand=($(getOneByOneMergeCommand "$*" $branches))
else
    typeset -a mergeCommand=(git merge "$@" $branches)
fi

printf '%s\n%s' "${mergeCommand[*]}" "Really merge these branches? (y/n) "
read answer
[ "$answer" = "y" ] || exit 1

eval "${mergeCommand[@]}"
if [ $? -eq 2 -a ! "$isOneByOneMerge" ]; then
    echo '
Hint: When the merge with strategy octopus fails, try merging sequentially:'
    printf 'git mergelocalbr %s-s1\n    or\n%s\n' "$originalArgs" "$(getOneByOneMergeCommand "$*" $branches)"

    exit 2
fi
