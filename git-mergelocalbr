#!/bin/bash

shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
    Merge all / the last committed N local branches (except for the current
    branch and master).
Usage: "$(basename "$1")" [--branches "<branch1> ..."] [N] [--no-commit] [--squash] [-s <strategy>] [-m <msg>]
HELPTEXT
}
getBranches()
{
    if [ "$inputBranches" ]; then
	printf '%s\n' "$inputBranches"
    else
	git for-each-ref --sort=committerdate --format='%(refname:short)' refs/heads/
    fi
}

branchNum=9999
inputBranches=
if [ "$1" = '--branches' ]; then
    # Internal hook to pass in the branches.
    shift
    inputBranches=$1
    shift
fi
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    +([0-9]))		branchNum=$1; shift;;
esac

currentBranch=$(git symbolic-ref HEAD) || exit $?
currentBranch=${currentBranch##refs/heads/}
branches=$(getBranches | grep -v -e 'master' -e "$currentBranch" | tail -n "$branchNum") || exit $?
if [ ! "$branches" ]; then
    echo >&2 "No local branches found!"
    exit 1
fi
echo "Merging:
${branches// /
}"
echo '
git merge' $* $branches

printf %s "Really merge these branches? (y/n) "
read answer
[ "$answer" = "y" ] || exit 1

git merge "$@" $branches
if [ $? -eq 2 ]; then
    echo '
Hint: When the merge with strategy octopus fails, try merging sequentially:'
    commandSeparator=
    for branch in $branches
    do
	printf '%sgit merge%s%s %s' "$commandSeparator" "${*+ }" "$*" "$branch"
	commandSeparator=' && '
    done
    printf '\n'

    exit 2
fi
