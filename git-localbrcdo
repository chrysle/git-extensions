#!/bin/bash

shopt -qs extglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-y|--yes] [--continue|--abort] [--include-current] [--include-master] [--include-base] [--include-all] [--branches "<branch1> ..."] [N] [-c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...]] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 'Try %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Check out all / the last N local branches (except for the current branch and
master (and base branch if defined)) ordered by date of first commit, one by one
and execute COMMAND on each branch.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT

If no COMMAND is given, just performs the checkout and returns to the shell; the
next iteration is then triggered by re-executing with --continue, which can also
be used to continue with COMMAND execution in case an unclean exit or a
left-behind dirty working copy made the command to fall out of the iteration.
    --command|-c CMD	The command line to be executed. When this is a simple
			command, it can also be passed as such. If omitted, will
			just return to the shell for each branch.
HELPTEXT
}
case "$1" in
    --help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
esac

branches=$(git-brc | awk '{ print $NF }') || exit $?
exec git-localbrdo --branches "$branches" "$@"
