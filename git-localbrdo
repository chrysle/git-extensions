#!/bin/bash

shopt -qs extglob

readonly scriptFilespec="${BASH_SOURCE[0]}"

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-y|--yes] [--continue|--abort|--stashed] [--branches "<branch1> ..."] [N] [-c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...]] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 'Try %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Check out all / the last committed N local branches (except for the current
branch and master (and base branch if defined)) one by one and execute COMMAND
on each branch.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT

If no COMMAND is given, just performs the checkout and returns to the shell; the
next iteration is then triggered by re-executing with --continue, which can also
be used to continue with COMMAND execution in case an unclean exit or a
left-behind dirty working copy made the command to fall out of the iteration.
    --command|-c CMD	The command line to be executed. When this is a simple
			command, it can also be passed as such. If omitted, will
			just return to the shell for each branch.
    --stashed		Don't create a temporary stash in case the working copy
			is dirty (as an optimization in case you know you're clean.)
HELPTEXT
}

typeset -a args=("$@")
isNeedEval=
typeset -a commands=()
isStashed=
isYes=
branchNum=9999
inputBranches=
iterationAction=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	    shift; printLongUsage "$0"; exit 0;;
	--stashed)	    shift; isStashed=t;;
	--yes|-y)	    shift; isYes=t;;
	--branches)	    shift; inputBranches=$1; shift;;	# Internal hook to pass in the branches.
	--continue|--abort) iterationAction=${1#--}; shift;;
	+([0-9]))	    branchNum=$1; shift;;
	--command|-c)	    shift; commands+=(${commands:+;} "$1"); isNeedEval=t; shift;;
	--)		    shift; break;;
	-*)		    { echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		    break;;
    esac
done
if [ ! "$isStashed" -a ! "$iterationAction" ]; then
    exec git-autostash "$scriptFilespec" --stashed "${args[@]}"
fi
if [ $# -ne 0 ]; then
    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	commands+=(${commands:+;} $(printf '%q ' "$@"))
    else
	commands=("$@")
    fi
fi
[ ${#commands[@]} -eq 0 ] && isYes=t	# No need to confirm when no command-line is passed; user can abort via --abort interactively.

gitDir=$(git rev-parse --git-dir 2>/dev/null) || exit $?
origBranchStore="${gitDir}/localbrOrig"
branchStore="${gitDir}/localbr" || exit $?
commandLineStore="${gitDir}/localbrCommandLine"

if [ ${#commands[@]} -gt 0 ]; then
    storeQuoting=%q; [ "$isNeedEval" ] && storeQuoting=%s   # Already quoted for eval, but a SIMPLECOMMAND needs quoting because after recalling it from $commandLineStore, it's in one single argument and needs eval() to execute.
    printf "$storeQuoting " "${commands[@]}" > "$commandLineStore" || exit $?
fi

getNextBranch()
{
    [ -f "$branchStore" ] || return
    head -n 1 "$branchStore"
    sed -i '1d' "$branchStore"
    [ -s "$branchStore" ] || rm "$branchStore"
}

dirtyCheck()
{
    if git-dirty; then
	echo >&2 "ERROR: working copy is still dirty; please clean up and then retry with --continue."
	git status
	exit 1
    fi
}

interrupt()
{
    local status=${1:?}
    printf >&2 'Note: Interrupting iteration because the command failed (with exit status %d). Please check and then continue with --continue.\n' "$status"
    echo >&2 'You can suppress checking of exit status by appending "|| :" to the COMMANDLINE.'
    exit $status
}

restoreOriginalBranch()
{
    if [ -f "$origBranchStore" ]; then
	git checkout "$(<"$origBranchStore")"
	rm -- "$origBranchStore"
    fi

    [ -e "$commandLineStore" ] && rm -- "$commandLineStore"
    return 0
}

case "$iterationAction" in
    abort)	restoreOriginalBranch; exit 0;;
    continue)
	dirtyCheck

	if [ ${#commands[@]} -eq 0 -a -e "$commandLineStore" ]; then
	    # Recall command-line from original / previous call, unless it is
	    # overridden by updated arguments provided to this invocation.
	    commands=$(<"$commandLineStore")
	    # The command-line is read as one (escaped) argument, and therefore
	    # needs eval to execute.
	    isNeedEval=t
	fi
	;;
    '')
	IFS=$'\n'
	typeset -a localBranches=($(git-localbr $inputBranches | tail -n "$branchNum")) || exit $?
	if [ ${#localBranches[@]} -eq 0 ]; then
	    echo >&2 "No local branches found!"
	    exit 1
	fi

	echo "Iterating over these branch(es):
${localBranches[*]}"
	if [ ! "$isYes" ]; then
	    printf %s "Really iterate over these branches? (y/n) "
	    read answer
	    [ "$answer" = "y" ] || exit 1
	fi

	printf '%s\n' "${localBranches[*]}" > "$branchStore" || exit $?
	git-orig-ref > "$origBranchStore"
	if [ ${#commands[@]} -eq 0 -a -e "$commandLineStore" ]; then
	    rm -- "$commandLineStore" || exit $?
	fi
	;;
    *)	printf >&2 'Assert: Unhandled iterationAction %q\n' "$iterationAction"
	exit 3
	;;
esac

while true
do
    branch=$(getNextBranch)
    if [ ! "$branch" ]; then
	echo >&2 "All local branches have been iterated over."

	restoreOriginalBranch
	exit 0
    fi

    git checkout --quiet "${branch}" || exit $?	# Suppress Git's checkout information with --quiet. We're probably not interested in stuff like "Your branch is up-to-date with ...", and we emulate the switch message itself:
    printf "\\nSwitched to branch '%s'\\n" "$branch"
    if [ ${#commands[@]} -eq 0 ]; then
	exit 0
    else
	if (
	    if [ "$isNeedEval" ]; then
		eval "${commands[@]}"
	    else
		"${commands[@]}"
	    fi); then
	    dirtyCheck
	else
	    interrupt "$?"
	fi
    fi
done
