#!/bin/bash

wrapper="${1:?}"; shift
what="${1:?}"; shift
typeset -a wcs=()
while [ $# -ne 0 ]
do
    if [ "$1" == '--' ]; then
	shift
	break
    fi
    wcs+=("$1"); shift
done
[ ${#wcs[@]} -eq 0 ] && exit 3


printUsage()
{
    cat <<HELPTEXT
Execute "git SIMPLECOMMAND" and/or COMMANDLINE inside $what
that are under Git source control. Considers a ${wrapper}-SIMPLECOMMAND wrapper.
Lists all filespecs if no command(s) are passed.
Supports the following special commands:
repo-missing	Show those $what that are not yet under Git source
		control.
HELPTEXT
    printf 'Usage: %q %s\n' "$wrapper" '-c|--command "COMMANDLINE" [-c ...] | [[--] SIMPLECOMMAND [...]] [-?|-h|--help]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac

typeset -a wcdoArgs=()
if [ $# -eq 0 ]; then
    set -- --no-header --command 'echo $ROOT'
elif [ "${1:0:1}" != '-' ]; then
    commandAlias="${wrapper}-$1"
    if type -t "$commandAlias" >/dev/null; then
	eval $commandAlias '"$@"'
	exit $?
    fi

    case "$1" in
	repo-missing)
	    # Synthesized new command.
	    shift
	    wcdoArgs+=(--no-header --skip-files --foreign-command 'pwd' --command :)
	    ;;
	wips)
	    # Succeed if a single working copy has WIP.
	    wcdoArgs+=(--single-success)
	    ;;
	pull-request|fork|browse|compare|release|ci-status)
	    # The hub commands don't understand --color yet.
	    wcdoArgs+=(--single-success --no-git-color)
	    # These hub commands need a remote.
	    wcdoArgs+=(--predicate-command git-existsremote)
	    ;;
	issue)
	    # The hub commands don't understand --color yet.
	    wcdoArgs+=(--single-success --no-git-color)
	    # This hub command needs a remote. I only care about my own
	    # projects, not my forks of other projects.
	    wcdoArgs+=(--predicate-command 'git-existsremote origin && ! git-existsremote upstream')
	    ;;
	create)
	    # The hub commands don't understand --color yet.
	    wcdoArgs+=(--single-success --no-git-color)
	    # This hub command (mostly) only applies to repos without a remote.
	    wcdoArgs+=(--predicate-command '! git-existsremote')
	    ;;
    esac

    set -- -- "$@"
fi

exec ${GIT_WCDO_COMMAND:-git-wcs-in-dir-do} "${wcdoArgs[@]}" "${wcs[@]}" "$@"
