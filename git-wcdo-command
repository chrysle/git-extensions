#!/bin/bash
shopt -qs extglob

if [ -z "$GIT_WCDO_COMMAND" -o "${GIT_WCDO_COMMAND%%* }" = 'git-wcs-in-dir-do' ]; then
    # Add additional arguments of the default git-wcs-in-dir-do.
    : ${GIT_WCDO_COMMAND_LONG_OPTIONS=worktrees|skip-symlinks}
fi

wrapper="${1:?}"; shift
what="${1:?}"; shift
typeset -a wcs=()
while [ $# -ne 0 ]
do
    if [ "$1" == '--' ]; then
	shift
	break
    fi
    wcs+=("$1"); shift
done
[ ${#wcs[@]} -eq 0 ] && exit 3


printUsage()
{
    cat <<HELPTEXT
Execute "git SIMPLECOMMAND" and/or COMMANDLINE inside $what
that are under Git source control. Considers a ${wrapper}-SIMPLECOMMAND wrapper.
Lists all filespecs if no command(s) are passed.
Supports the following special commands:
repo-missing	Show those $what that are not yet under Git source
		control.
HELPTEXT
    [ "$GIT_WCDO_COMMAND_ADDITIONAL_HELP" ] && printf '%s\n' "$GIT_WCDO_COMMAND_ADDITIONAL_HELP"
    printf 'Usage: %q %s\n' "$wrapper" '-c|--command "COMMANDLINE" [-c ...] | [[--] SIMPLECOMMAND [...]] [-?|-h|--help]'
}
typeset -a wcdoArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	-+([s${GIT_WCDO_COMMAND_SHORT_OPTIONS}]))	wcdoArgs+=("$1"); shift;;
	--@(no-pager|no-header|branch-name|separate-errors|no-git-color|single-success|skip-files|skip-foreign${GIT_WCDO_COMMAND_LONG_OPTIONS:+|}${GIT_WCDO_COMMAND_LONG_OPTIONS}))	wcdoArgs+=("$1"); shift;;
	-[${GIT_WCDO_COMMAND_SHORT_PARAMS}])	wcdoArgs+=("$1" "$2"); shift; shift;;
	--@(foreign-command|predicate-command${GIT_WCDO_COMMAND_LONG_PARAMS:+|}${GIT_WCDO_COMMAND_LONG_PARAMS}))	wcdoArgs+=("$1" "$2"); shift; shift;;
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--)		wcdoArgs+=("$1"); shift; break;;
	*)		break;;
    esac
done

if [ $# -eq 0 ]; then
    set -- --no-header --command 'echo $ROOT'
elif [ "${1:0:1}" != '-' ]; then
    commandAlias="${wrapper}-$1"
    if type -t "$commandAlias" >/dev/null; then
	shift	# The first argument is part of the alias.
	eval $commandAlias '"$@"'
	exit $?
    fi

    case "$1" in
	repo-missing)
	    # Synthesized new command.
	    shift
	    wcdoArgs+=(--no-header --skip-files --foreign-command 'pwd' --command :)
	    ;;
	wips)
	    # Succeed if a single working copy has WIP.
	    wcdoArgs+=(--single-success)
	    ;;
	browse|ci-status|compare|delete|pull-request|fork|release|sync)
	    wcdoArgs+=(--single-success)
	    # These hub commands need a remote.
	    wcdoArgs+=(--predicate-command git-existsremote)
	    ;;
	cr|crrecent|crstats|issue|pr)
	    wcdoArgs+=(--single-success)
	    # These hub commands need a remote.
	    if [ "$GIT_WCDO_COMMAND_EXCLUDE_FORKS" ]; then
		# This setting indicates that I only care about my own projects,
		# not my forks of other projects.
		wcdoArgs+=(--predicate-command 'git-existsremote origin && ! git-existsremote upstream')
	    else
		wcdoArgs+=(--predicate-command git-existsremote)
	    fi
	    ;;
	create)
	    wcdoArgs+=(--single-success)
	    # This hub command (mostly) only applies to repos without a remote.
	    wcdoArgs+=(--predicate-command '! git-existsremote')
	    ;;
    esac

    set -- -- "$@"
fi

exec ${GIT_WCDO_COMMAND:-git-wcs-in-dir-do} "${wcdoArgs[@]}" "${wcs[@]}" "$@"
