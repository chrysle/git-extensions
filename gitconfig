[alias]
	; Alternative: Do this programmatically:
	; 	git config --global alias.foo 'commit -m "foobar"'

	; Note: You cannot override a built-in Git command via an alias. Cp.
	; http://stackoverflow.com/questions/3538774/is-it-possible-to-override-git-command-by-git-alias
	;
	;alias = config --global --get-regexp 'alias\\..*' ; List all defined aliases.
	; Note: If you name the shell command "git-aliasname", there's no need
	; to define an alias here; Git will automatically pick it up. The
	; downside is that you cannot pass alias arguments to it here:
	; "!git-aliasname arg1" will NOT pass arg1 to the script!
	; (But "git aliasname arg1" on the command-line will work.)
	;alias = !git-alias
	; Note: You also cannot use a shell command "git-builtin" to override
	; the "git builtin" command! To achieve that, you need a custom "git"
	; shell function that intercepts the git call.
	; To do something with individual arguments, use something like this:
	;x = "!sh -c 'echo args: \"$@\"' -"
	; But I prefer defining an external git-subcommand for this.

	;; confighelp: Browse this .gitconfig.
	configlist = config --local --list
	configedit = config --local --edit

	me = config --get user.name
	me-in-github = config --get github.user

	; Stop recording the executable file mode.
	; This can be necessary when using both MSysGit and Cygwin's Git, and
	; "git diff" shows this output for every file:
	;   old mode 100755
	;   new mode 100644
	; Best set this locally only via
	;   git config core.filemode false
	;filemode = false
	config-no-filemode = config core.filemode false

	;; is-controlled: Test whether the current directory / passed DIRSPEC is inside a Git working copy / the passed FILESPEC is tracked by Git (i.e. not unversioned).

	;; init: Create an empty Git repository and automatically chdir into it.
	;; clone: Clone a repository into a new directory and automatically chdir into it.
	;; uclone: Clone a repository and name the remote repository "upstream" (commonly used for repos you don't own yourself) instead of the default "origin".

	;; system-setup: Setup system-specific git configuration for a system.
	;; isworktree: Test whether the current working copy is a secondary worktree.
	;; isdetached: Test whether the current working copy directly refers to a particular commit as opposed to a named branch.

	;; cat: Retrieve the contents of <path> as it exists in revision <ref>.
	;; cp: Retrieve the contents of <path> as it exists in revision <ref> and save it as <path>.<ref> (or <target> if given).

	chp = cherry-pick --no-commit	; Apply the changes introduced by some existing commits (cummulatively) to the index and working copy.
	cherrypick = cherry-pick --no-commit	; Apply the changes introduced by some existing commits (cummulatively) to the index and working copy.
	chpc = cherry-pick --continue	; Commit (after adding resolved conflicts) and continue with any subsequent commits to be cherry-picked.
	chps = cherry-pick --quit	; Forget about the current (conflicted) operation in progress.
	chpq = cherry-pick --abort	; Cancel the operation and return to the pre-sequence state.
	cherrycommit = cherry-pick ; Apply and immediately commit each change (individually) introduced by some existing commit(s).
	;; cherrymerge: Apply and immediately commit each change (individually), recording the existing commit id(s) in the commit message, like the merge tracking in Subversion.

	;; unapply-index: Revert the changes in the index to the working copy.
	;; checkout-head: Revert changes [for FILE(s)] in the working copy to the latest commit, but keep any changes in the index. These can be put back into the working copy via checkout.
	coh = checkout-head
	;; checkoutprevious: Revert changes [for FILE(s)] in the working copy to the commit prior to passed <commit> / HEAD. Like "git checkout <commit>^ [-- FILE ...]" but doesn't write to the index / cause the "detached HEAD" status when no FILEs are passed. This is meant to be for temporary investigation or verifying a test failure without the committed fix, so no dirty working copy is allowed.
	cop = checkoutprevious
	;; checkoutpreviousselected: Interactively select (from files touched in <commit> / HEAD) files (or directly pass N, M, ... selections) to be reverted to what the content *before* <commit> was.
	cops = checkoutpreviousselected

	;;revert: Apply the reverted changes only to the index and working copy; the index does not have to match the HEAD commit, so you can revert multiple commits in a row.
	revertcommit = revert	; Apply the reverted changes and commit.
	;; add: Add and show status; --all/-A stages all, . stages new and modified, without deleted, -u stages modified and deleted, without new.
	;; addn: Add all modified and deleted files except those matching FILE(s) or the escaped GLOB(s). Like addu, but with inverted meaning of the file arguments.
	;; addu: Stage modified and deleted, without new files, and show status.
	addhunk = add --patch	; Interactively cherry-pick and add individual hunks changed in the working copy to the index.
	addh = addhunk
	addedit = add --edit	; Interactively choose lines to stage by directly editing the diff.
	;; adddeleted: Add manually deleted (or moved) files to the index.
	;; addi: Add unstaged changes from already staged files; update stage.
	;; addr: Add from root (i.e. all in working copy, not just everything inside CWD); defaults to modified and deleted, without new.
	;; adduntracked: Add only new files, respecting the ignore patterns.
	addun = adduntracked
	;; adduu: Stage modified and deleted, and add new files, respecting the ignore patterns. Combination of git addu && git adduntracked.
	;; addselected: Interactively select (from modified files or passed list of files) files (or directly pass N, M, ... selections) to stage by number.
	adds = addselected
	addselectedhunk = addselected --patch
	addsh = addselectedhunk
	addselectededit = addselected --edit
	addse = addselectededit
	;; addselecteduntracked: Interactively select (from new files, respecting the ignore patterns, or passed list of files) files (or directly pass N, M, ... selections) to stage by number.
	addsu = addselecteduntracked
	;; commituntracked: Commit only new files, respecting the ignore patterns.
	cun = commituntracked
	commitselected = selected-command commit	; Interactively select (from modified files or passed list of files) files (or directly pass N, M, ... selections) to commit by number.
	cs = commitselected

	c = wrapper commit
	ca = commita
	;; commita: Commit all new files.
	cu = wrapper commit --all	; Commit all modified and deleted files, without new.
	commitu = wrapper commit --all	; Commit all modified and deleted files, without new.
	;; cuu: Commit modified and deleted, and add new files, respecting the ignore patterns. Combination of git adduu && git commit.
	;; fixup: Commit with the intent of squashing this with the passed <commit> (id or :/<pattern>) via interactive rebase later.
	;; fixupselected: Commit with the intent of squashing this with the commit interactively chosen from the commits in the passed <range> via interactive rebase later.
	;; rbfixup: Commit and squash with the passed <commit> (id or :/<pattern>) via interactive rebase.
	;; rbfixupselected: Commit and squash with the commit interactively chosen from the commits in the passed <range> via interactive rebase.
	amen = commit --amend --reuse-message=HEAD	; Amend to last commit without re-editing the message.
	amenu = commit --all --amend --reuse-message=HEAD	; Amend all modified and deleted files to last commit without re-editing the message.
	amend = commit --amend --reedit-message=HEAD	; Amend to last commit.
	amendu = commit --all --amend --reedit-message=HEAD	; Amend all modified and deleted files to last commit.
	;; commitfor: Commit for another author whose "NAME <EMAIL@HOST>" combo is either passed or selected from all previous committers (via passed AUTHOR-PATTERN).
	;; commitwithfiledate: Commit with the author date set to the most recent file modification date of files in the stage. Useful if you only now noticed that changes should have been committed a long time ago.
	;; commitidentical: Commit directly (without further edits) with the same commit message as <commit>.
	commitlike = commitidentical --edit ;; Commit with the same commit message as <commit> as the base for further editing.
	;; credit: Amend another author whose "NAME <EMAIL@HOST>" combo is either passed or selected from all previous committers (via passed AUTHOR-PATTERN).
	;; show-branch: Shows the branch anchestry (heads are prefixed with !, current with *), then after a --- separator commits (+) and merges (-).
	;; br: branch with DWIM detection of branch listing via pattern (from the help: git branch <pattern> would try to create a branch, use git branch --list <pattern> to list matching branches).
	;; brname: Print current (local) branch name.
	;; bra: List (local; -r remote-tracking; -a both) branches (optionally filtered by <glob>) ordered by date of most recent commit.
	;; brc: List (local; -r remote-tracking; -a both) branches (optionally filtered by <glob>) ordered by date of first commit.
	;; createlocalbr: Create (and track) local branches for all remote branches (matching PATTERN).
	;; localbrdo: Check out all / the last committed N local branches (except for the current branch and master (and base branch if defined)) one by one and execute COMMAND (or drop back to the shell) for each).
	;; localbrcdo: Check out all / the last N local branches (except for the current branch and master (and base branch if defined)) ordered by date of first commit and execute COMMAND (or drop back to the shell) for each).
	;; localbrrefdo: Iterate over all / the last committed N local branches (except for the current branch and master (and base branch if defined)) one by one and execute COMMAND for each branch, replacing {} with its name.
	;; localbrcrefdo: Iterate over all / the last committed N local branches (except for the current branch and master (and base branch if defined)) ordered by date of first commit one by one and execute COMMAND for each branch, replacing {} with its name.
	;; prune: Remove old local branches that do not exist in <remote> any more.
	;; existsbr: Check whether [all of] the passed [<remote>/]<branch> exists.
	;; remotebr: Print corresponding remote/branch for the current branch (or return error).
	deletebr = branch -d	; Delete branch; use oldeletebr to remove the branch in origin, too (and odeletebr to just delete it in origin).
	deletelb = branch -d @{-1}	; Delete the last checked-out branch.
	renamebr = branch -m	; Rename branch.
	;; archivebr: Tag <branch>, then delete it from the local repository as well as origin. Use to remove old branches that have been incorporated into master, or pass -f to force archiving.
	;; archivelocalbr: Archive all / the first committed N local branches (except for the current branch and master (and base branch if defined)).
	;; archivelocalbrc: Archive all / the first committed N local branches (except for the current branch and master) ordered by date of first commit.
	;; archived: List all / <branch> archived branches.
	;; archivedurl: List URLs to passed <remote> of all / <branch> archived branches.
	archivedourl = archivedurl origin
	archiveduurl = archivedurl upstream
	; How to create an unrelated branch that doesn't hold the previous commit history (e.g. as for the gh-pages)
	; 1. git checkout --orphan gh-pages
	; 2. git rm -rf .
	co = checkout
	checkoutselected = selected-command checkout	; Interactively select (from modified files or passed list of files) files (or directly pass N, M, ... selections) to checkout by number.
	cos = checkoutselected
	;; cobr: Checkout passed <remote-branch>, tracking it if it doesn't yet exist locally, or ensuring that an existing tracked branch doesn't contradict the request.
	;; rco: Checkout passed <branch> in <remote>; fetching if needed and ensuring that an existing tracked branch doesn't contradict the request.
	;; rcolatest: Checkout local branch from latest (by sort order) passed <remote> [matching pattern].
	;; rcolatestc: Checkout local branch from the passed <remote> branch [matching pattern] that was created last (except the current branch and master (and base branch if defined)).
	colb = checkout @{-1}	; Checkout last checked-out branch.
	com = master-command checkout
	;; nco: Checkout <branch> and make it the base branch (for git *n commands).
	;; nbr: Show the base branch name.
	;; nclear: Clear the defined base branch.
	con = base-command checkout
	cohunk = checkout --patch --	; Interactively cherry-pick and check out individual hunks from the index to the working copy.
	detach = checkout --detach	; Unassociate from the current branch without changing the current commit. Useful e.g. for separate worktrees, because they all must be on distinct branches.

	bl = shortblame
	;; file-blame: Show author name and last date for each file.
	;; dirty: Test whether there are uncommitted changes, either in the working copy or the index.
	;; untracked: Test whether there are new files not yet added to version control (and not covered by the ignore patterns).
	ss = status -s ; Short status without branch and tracking info. Does not output anything if the working copy is clean and there are no untracked files.
	st = status -sb ; Concise status with branch and tracking info.
	;; stfiles: Just list any changed files (for renames both original and resulting file as separate lines).
	;; stifiles: Just list any staged files (for renames both original and resulting file as separate lines).
	;; sti: Concise status only for staged files inside the index.
	;; browse: Open origin / the passed pattern matching a remote in a browser.

	;; stash: Save a dirty working copy and index in a commit.
	;; stashi: Save only index in a commit; keep the dirty working copy.
	;; stashI: Synonym for stashw.
	stash-i = stash save --keep-index
	stashw = stash save --keep-index ; Save only dirty working copy; keep changes in index. Useful to compile / test partial commits by temporarily cleaning the working copy.
	stashuu = stash save --include-untracked	; Save both modified and new (untracked files).
	;; selectedstash: Interactively select from existing stashes (or directly pass N, M, ... selections) to manipulate by number.
	sstash = selectedstash
	;; stashselected: Interactively select (from modified files or passed list of files) files (or directly pass N, M, ... selections) to stash by number.
	stashs = stashselected
	stashhunk = stash save --patch	; Interactively cherry-pick and stash away individual hunks changed in the working copy. Keeps changes in index unless --no-keep-index is given.
	;; stash list: Show all stashed commits.
	;; stash apply: Apply the topmost stashed commit onto the working copy.
	;; stash pop: Apply and the topmost stashed commit onto the working copy and remove it from the stash.
	;; stash drop: Remove a single stash.
	;; stash clear: Throw away all stashes.
	; Source: http://stackoverflow.com/questions/1360712/git-stash-cannot-apply-to-a-dirty-working-tree-please-stage-your-changes
	;; stash-pop-to-dirty: When "stash pop" complains.
	;; stash-to-branch: Stash the changes in a dirty working directory in a new branch.
	;; autostash: Automatically create a temporary stash before executing COMMAND, and apply it after the operation ends. This means that you can run Git commands that otherwise would complain on a dirty worktree.
	;; swaplast: Swap the last and one-before-last commits.

	;; sync: Synchronize the local repository with the major remotes.

	n = notes show ; List annotations for HEAD / passed ref.
	ne = notes edit ; Edit / add annotations for existing commits. They don't change the history, and are local to a repo.
	; Source: http://git-scm.com/blog/2010/08/25/notes.html
	onotepush = push origin refs/notes/* ; notes are implemented as references, and must be pushed to share them.
	unotepush = push upstream refs/notes/* ; notes are implemented as references, and must be pushed to share them.
	onotefetch = fetch origin refs/notes/*:refs/notes/* ; get notes from origin
	unotefetch = fetch upstream refs/notes/*:refs/notes/* ; get notes from upstream
	; To make the fetch automatic, add the following to .git/config:
	; [remote "origin"]
	; 	fetch = +refs/notes/*:refs/notes/*

	; tags how-to:
	;	1. Add a new tag for the newest stable release: git tag -a v0.5 -m "Version 0.5 Stable"
	;	2. Push the latest tag to GitHub: git push --tags
	; Optional:
	;	3. Delete the v0.4 tag locally: git tag -d v0.4
	;	4. Delete the v0.4 tag on GitHub (which removes its download link): git push origin :v0.4
	;; tag-version: Create an annotated tag, mostly used for official releases.

	;; cd: Change into the root directory of this Git working copy.
	root = rev-parse --show-toplevel	; Show root dir of this Git working copy.
	relative = rev-parse --show-prefix	; Show relative dir of the CWD in relation to the Git working copy root.
	; Note: Cannot define this as an external script; the property of being executed in the root dir would be lost.
	;; exec: Execute a shell command in the root dir of this Git working copy; e.g. git exec make.
	; This works because shell aliases are always executed in the top-level directory.
	;; inside: Execute COMMAND (which probably contains Git command(s)) inside the working copy that FILE resides in. (Most Git commands only work from within the working copy.)
	;; wcdo: Execute "git SIMPLECOMMAND" and/or COMMANDLINE on each passed WORKING-COPY.
	;; wc-with-suffix-do: Like wcdo, but also work on clones or worktrees that sit next to the working copy.
	;; wcs-in-dir-do: Execute "git SIMPLECOMMAND" and/or COMMANDLINE on all repositories found in passed DIRSPECs.
	;; wcdo-command: Build a command that executes "git SIMPLECOMMAND" and/or COMMANDLINE on all repositories found in passed wrapper + what + baseDirs.
	;; sh:  Enter a bunch of git commands interactively.
	;; shell: Launch an interactive shell. That alone wouldn't be very interesting, but it's valuable in combination with git-wcdo and the selective invocation based on the provided options.
	serve = !git daemon --reuseaddr --verbose  --base-path=. --export-all ./.git ; Fire up a git daemon for the repo you are currently in.
	;; worktree: Use parallel checkouts of <repository> in <path> (without having to push or pull!)
	; Source: /usr/share/doc/git-core/contrib/workdir/git-new-workdir
	export = archive
	;; export: git export -o latest.zip HEAD
	;; export: git export --format=tar --prefix=project-1.4.0/ v1.4.0 | gzip > project-1.4.0.tar.gz
	;; optimize: Reduce occupied disk space of the GIT_DIR by pruning and then garbage-collecting refs.

	;; whois: Look up person by name or email address.
	whodid = shortlog -n	; Show log grouped by name and sorted by the number of their commits.
	;; whodid -s: Show author names sorted by the number of their commits.
	whodidovertime = pasttimes-command whodid
	whodidoverweeks = pasttimes-command --weekly whodid
	whodidovermonths = pasttimes-command --monthly whodid
	whodidoveryears = pasttimes-command --yearly whodid
	;; whoowns: Show statistics on how many lines were last committed by which author.
	;; whocontributed: Show author names sorted by the total size of the diffs they're responsible for.
	whocontributedovertime = pasttimes-command whocontributed
	whocontributedoverweeks = pasttimes-command --weekly whocontributed
	whocontributedovermonths = pasttimes-command --monthly whocontributed
	whocontributedoveryears = pasttimes-command --yearly whocontributed
	statistics = shortlog -n -s	; Display a list of committers sorted by the frequency of commits. Use HEAD~42.. or v2.6..v2.7 to limit to range.
	;; churn: Show sorted number of changes per file; arguments as to git log, e.g. --since="1 month ago" subdir
	;; activity: Prints a summary of contributions in the repository.
	activitymine = mine-command activity
	activityteam = team-command activity
	whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short	; Print info about hash or commit name.

	;; customtool: Permanently set / execute remaining arguments with temporary diff.tool / merge.tool set to <toolname>.
	d = diff    ; ... unstaged changes in working copy.
	dt = difftool
	;; diffc: context diff; can also be used as a difftool
	;; sdiff: side-by-side diff; can also be used as a difftool
	diffwithdiffc = customtool diff.tool diffc
	diffwithsdiff = customtool diff.tool sdiff
	;; dl: Show separate diff of each file (instead of concatenating all changes), paged through with less.
	db = diff -w	; ignore all "blanks" whitespace changes
	dbl = dl -w
	dw = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse diff --color-words	; use word-based (not line-based) diff granularity
	dc = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse diff --color-words --word-diff-regex=.	; use character-based diff granularity
	da = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse diff --color-words --word-diff-regex=(^|[^[:alnum:]_])[[:alnum:]_]+([^[:alnum:]_]|$)|[^[:space:]]	; use alnum-based diff granularity
	dh = diff HEAD ; ... both staged or unstaged changes since last commit.
	dhl = dl HEAD
	dth = difftool HEAD
	dhw = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse diff --color-words HEAD	; use word-based (not line-based) diff granularity
	dhc = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse diff --color-words --word-diff-regex=. HEAD	; use character-based diff granularity
	dha = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse diff --color-words --word-diff-regex=(^|[^[:alnum:]_])[[:alnum:]_]+([^[:alnum:]_]|$)|[^[:space:]] HEAD	; use alnum-based diff granularity
	di = diff --cached ; ... staged changes in the index about to be committed.
	dil = dl --cached
	dti = difftool --cached
	diw = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse diff --cached --color-words	; staged changes, use word-based (not line-based) diff granularity
	dic = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse diff --cached --color-words	--word-diff-regex=.	; staged changes, use character-based diff granularity
	dia = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse diff --cached --color-words --word-diff-regex=(^|[^[:alnum:]_])[[:alnum:]_]+([^[:alnum:]_]|$)|[^[:space:]]	; use alnum-based diff granularity
	;; dp:  ... with predecessor, either current HEAD or passed revision.
	dpw = dp -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse --color-words	; use word-based (not line-based) diff granularity
	dpc = dp -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse --color-words --word-diff-regex=.	; use character-based diff granularity
	dpa = dp -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse --color-words --word-diff-regex=(^|[^[:alnum:]_])[[:alnum:]_]+([^[:alnum:]_]|$)|[^[:space:]]	; use alnum-based diff granularity
	;; dpl:  ... with predecessor, either current HEAD or passed revision.
	;; diffuntil: ... over all commits until passed revision.
	;; diffselected: Interactively select (from modified files or passed list of files) files (or directly pass N, M, ... selections) to diff by number.
	ds = diffselected
	;; dsw: diffselected with word-based (not line-based) diff granularity
	;; dsc: diffselected with character-based (not line-based) diff granularity
	dis = diffselected --cached
	dts = difftoolselected

	; Simple patch creation:
	;	$ git diff 1b6d > my.patch
	; On the receiving end, apply via:
	; 	$ git apply my.patch
	;; applycheck: Try to apply the passed patch and print statistics and result.
	;; applyrcheck: Try to apply the passed patch to the root and print statistics and result.
	;; applyr: Apply the patch from the root (as most patches should be based on the toplevel repository directory).
	;
	; Convert commit(s) to a (set of) patches [ <since> | <revision range> ],
	; ready to send by email, by default saved to CWD / -o outdir in mbox
	; format:
	; 	$ git format-patch --stdout 1b6d..HEAD^^
	; which can be passed to git send-email.
	ma = format-patch
	; On the receiving end, save an email to a file, then type:
	; 	$ git am < email.txt
	; Extract commits between revisions R1 and R2, and apply them on top of the current branch using git am to cherry-pick them:
	;   $ git ma -k --stdout R1..R2 | git am -3 -k
	; This applies the incoming patch and also creates a commit, including information such as the author.
	applymbox = am

	g = grep --color -n
	gf = grep --files-with-matches
	; XXX: Apparently, aliases aren't case-sensitive.
	;; gF: grep --files-without-match
	g-f = grep --files-without-match

	;; ls: List files under version control; skip unversioned files.
	lsr = ls --recursive
	ll = ls --long --relative-date	; List hash, author, and date of the last commit for each file under source control.
	llr = ls --long --relative-date --recursive
	;; lll: List all files under source control with relative paths from the working copy's root.
	;; lllbrurl: List URLs to passed <remote> of all files under source control in the current branch. In contrast to lllhurl, this link will always point to the latest version on that branch.
	lllbrourl = lllbrurl origin
	lllbruurl = lllbrurl upstream
	;; lllhurl: List URLs to passed <remote> of all files under source control with the current / passed revision. In contrast to lllbrurl (which incorporates future changes done in the branch), this creates a permalink to the current file's contents.
	lllhourl = lllhurl origin
	lllhuurl = lllhurl upstream

	;; datediff: Show the time range of the commits done in the passed <revision-range>, or --since=<date>.

	;; ident-update: Update the expansion of $Id:$ via ident in the .gitattributes after a commit. Can --install a hook to do this automatically on each commit.
	; How to enable what strings:
	; 	1. echo '@(#) file $Id$ project' >> file
	; 	2. echo '* ident' >> .gitattributes
	;   3. git commit file .gitattributes
	;; find-blob: Find commit(s) (the last one is the earliest) which have the passed hash of a blob in their tree. Use to resolve the $Id$ put into a file via the "ident" gitattribute, e.g. in a what string.
	;; hash-object: Print the hash of the passed file (which must not have the $Id$ expanded!)
	; This is the same as
	;   (echo -e -n "blob $(stat -c %s "$file")\0"; cat "$file") | sha1sum

	;; log: Show commit logs, decorate with ref names, show in topological (instead of chronological) order, keeping merged branches together.
	log1 = log --max-count 1

	;; rnlog: Show commit logs, limiting the number counting from the beginning instead of from the end. (You cannot do this via git log --reverse --max-count, because commit limiting is done before commit ordering.)
	;; rnlg: One-line topology, author, date, tags and commit summary, limiting the number counting from the beginning instead of from the end.

	logtimeshifted = discrepancylog --field1 AuthorDate: --field2 CommitDate: --pretty=fuller ; Show logs of amended or rebased commits only.
	logonbehalf = discrepancylog --field1 Author: --field2 Commit: --pretty=fuller	; Show logs where author and committer are not the same person.

	;; logg: Log only those commits where log messages match the specified text or /regexp/.
	loggmine = mine-command logg
	logg1 = logg --max-count 1
	logg1mine = mine-command logg1
	;; lgg: One-line topology, author, date, tags and commit summary where log messages match the specified text or /regexp/.
	lgg1 = lgg --max-count 1
	lgg1mine = mine-command lgg1

	; findlog does not look at the log message at all, but the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text.
	; XXX: Git (2.7.4 on Ubuntu, 2.12 on Windows) somehow has a built-in alias of "pickaxe" to "blame". Because of this, we have to use the shell command syntax !git-pickaxe instead of simply pickaxe.
	findlog = !git-pickaxe	; Pickaxe: Show log of commits where text or /regexp/ was added or removed in the diff.
	findlogmine = mine-command findlog
	findlogv = !git-pickaxe --name-status	; Pickaxe: Show log and filenames of commits where text or /regexp/ was added or removed in the diff.
	findlogvmine = mine-command findlogv
	findlg = !git-pickaxe --abbrev-commit --date=relative --decorate --pretty=oneline ; Pickaxe: Show short log of commits where text or /regexp/ was added or removed in the diff.
	findlgmine = mine-command findlg
	findlc = !GIT_PICKAXE_COMMAND=lc git-pickaxe --date=relative ; Pickaxe: Show log together with diff of commits where text or /regexp/ was added or removed in the diff.
	findlcmine = mine-command findlc
	findlcl = !GIT_PICKAXE_COMMAND=lcl git-pickaxe --date=relative ; Pickaxe: Show separate log together with diff of commits where text or /regexp/ was added or removed in the diff.
	findlclmine = mine-command findlcl
	findshow = !git-pickaxe --max-count 1 --date=relative -p	; Pickaxe: Show short log together with diff of the most recent commit where text or /regexp/ was added or removed in the diff.
	findshowmine = mine-command findshow

	; findlogg looks at both log message and actual diff; a combination of logg and findlog.
	findlogg = pickaxegrep --no-patch	; Show log of commits where log messages match text or /regexp/ or where the text or /regexp/ was added or removed in the diff.
	findloggmine = mine-command findlogg
	findloggv = pickaxegrep --name-status	; Show log and filenames of commits where log messages match text or /regexp/ or where the text or /regexp/ was added or removed in the diff.
	findloggvmine = mine-command findloggv
	findlgg = pickaxegrep --no-patch --abbrev-commit --date=relative --decorate --pretty=oneline	; Show short log of commits where log messages match text or /regexp/ or where the text or /regexp/ was added or removed in the diff.
	findlggmine = mine-command findlgg
	findlcg = pickaxegrep --date=relative	; Show log together with diff of commits where log messages match text or /regexp/ or where the text or /regexp/ was added or removed in the diff.
	findlcgmine = mine-command findlcg
	findlclg = !GIT_LOGREVS_SHOW_COMMAND=showl git-pickaxegrep --date=relative	; Show separate log together with diff of commits where log messages match text or /regexp/ or where the text or /regexp/ was added or removed in the diff.
	findlclgmine = mine-command findlclg

	wherelastlog = !GIT_PICKAXE_COMMAND='log --max-count 1' git-pickaxe	; Show single log of the commit where text or /regexp/ was last mentioned in the diff.
	wherelastlogmine = mine-command wherelastlog
	wherelastlogv = !GIT_PICKAXE_COMMAND='logv --max-count 1' git-pickaxe	; Show single log and filenames of the commit where text or /regexp/ was last mentioned in the diff.
	wherelastlogvmine = mine-command wherelastlogv
	wherelastshow = !git-pickaxe --max-count 1 -p	; Show short log together with diff of the most recent commit where text or /regexp/ was last mentioned in the diff.
	wherelastshowmine = mine-command wherelastshow
	; wherelastshow is like findshow, but without the relative date.

	wherelastlogg = pickaxegrep --max-count 1 --no-patch	; Show single log of the commit where text or /regexp/ was last mentioned in the log message or diff.
	wherelastloggmine = mine-command wherelastlogg
	wherelastloggv = pickaxegrep --max-count 1 --name-status	; Show single log and filenames of the commit where text or /regexp/ was last mentioned in the log message or diff.
	wherelastloggvmine = mine-command wherelastloggv
	wherelastshowg = pickaxegrep --max-count 1 --date=relative	; Show single log together with diff of the commit where text or /regexp/ was last mentioned in the log message or diff.
	wherelastshowgmine = mine-command wherelastshowg

	whereintroducedlog = !GIT_PICKAXE_COMMAND='rnlog --reverse --max-count 1' git-pickaxe	; Show single log of the commit where text or /regexp/ was first mentioned (added) in the diff.
	whereintroducedlogmine = mine-command whereintroducedlog
	whereintroducedlogv = !GIT_RNLOG_COMMAND=logv GIT_PICKAXE_COMMAND='rnlog --reverse --max-count 1' git-pickaxe	; Show single log including filenames of the commit where text or /regexp/ was first mentioned (added) in the diff.
	whereintroducedlogvmine = mine-command whereintroducedlogv
	whereintroducedshow = !GIT_RNLOG_COMMAND=show GIT_PICKAXE_COMMAND='rnlog --reverse --max-count 1 --date=relative' git-pickaxe	; Show log together with diff of the commit where text or /regexp/ was first mentioned (added) in the diff.
	whereintroducedshowmine = mine-command whereintroducedshow

	whereintroducedlogg = pickaxegrep --reverse --max-count 1 --no-patch	; Show single log of the commit where text or /regexp/ was first mentioned in the log message or diff.
	whereintroducedloggmine = mine-command whereintroducedlogg
	whereintroducedloggv = pickaxegrep --reverse --max-count 1 --name-status	; Show single log and filenames of the commit where text or /regexp/ was first mentioned in the log message or diff.
	whereintroducedloggvmine = mine-command whereintroducedloggv
	whereintroducedshowg = pickaxegrep --reverse --max-count 1 --date=relative	; Show single log together with diff of the commit where text or /regexp/ was first mentioned in the log message or diff.
	whereintroducedshowgmine = mine-command whereintroducedshowg

	; touchedlog is a more encompassing variant of findlog that not just shows those commits where the number of occurrences of text or /regexp/ changes, but also lines matching text or /regexp/ that just were somehow modified, without changing the number of occurrences themselves.
	touchedlog = !git-pickaxe --more	; Pickaxe: Show log where lines were modified where text or /regexp/ appears (without necessarily modifying text or /regexp/ itself).
	touchedlogmine = mine-command touchedlog
	touchedlogv = !git-pickaxe --more --name-status	; Pickaxe: Show log and filenames where lines were modified where text or /regexp/ appears (without necessarily modifying text or /regexp/ itself).
	touchedlogvmine = mine-command touchedlogv
	touchedlg = !git-pickaxe --more --abbrev-commit --date=relative --decorate --pretty=oneline ; Pickaxe: Show short log where lines were modified where text or /regexp/ appears (without necessarily modifying text or /regexp/ itself).
	touchedlgmine = mine-command touchedlg
	touchedlc = !GIT_PICKAXE_COMMAND=lc git-pickaxe --more --date=relative ; Pickaxe: Show log together with diff where lines were modified where text or /regexp/ appears (without necessarily modifying text or /regexp/ itself).
	touchedlcmine = mine-command touchedlc
	touchedlcl = !GIT_PICKAXE_COMMAND=lcl git-pickaxe --more --date=relative ; Pickaxe: Show separate log together with diff where lines were modified where text or /regexp/ appears (without necessarily modifying text or /regexp/ itself).
	touchedlclmine = mine-command touchedlcl
	touchedshow = !git-pickaxe --more --max-count 1 --date=relative -p	; Pickaxe: Show log together with diff of the most recent commit where lines were modified where text or /regexp/ appears (without necessarily modifying text or /regexp/ itself).
	touchedshowmine = mine-command touchedshow

	touchedlogg = pickaxegrep --more --no-patch	; Show log of commits where log messages match text or /regexp/ or where lines were modified where text or /regexp/ appears (without necessarily modifying text or /regexp/ itself).
	touchedloggmine = mine-command touchedlogg
	touchedloggv = pickaxegrep --more --name-status	; Show log and filenames of commits where log messages match text or /regexp/ or where lines were modified where text or /regexp/ appears (without necessarily modifying text or /regexp/ itself).
	touchedloggvmine = mine-command touchedloggv
	touchedlgg = pickaxegrep --more --no-patch --abbrev-commit --date=relative --decorate --pretty=oneline	; Show short log of commits where log messages match text or /regexp/ or where lines were modified where text or /regexp/ appears (without necessarily modifying text or /regexp/ itself).
	touchedlggmine = mine-command touchedlgg
	touchedlcg = pickaxegrep --more --date=relative	; Show log together with diff of commits where log messages match text or /regexp/ or where lines were modified where text or /regexp/ appears (without necessarily modifying text or /regexp/ itself).
	touchedlcgmine = mine-command touchedlcg
	touchedlclg = !GIT_LOGREVS_SHOW_COMMAND=showl git-pickaxegrep --more --date=relative	; Show separate log together with diff of commits where log messages match text or /regexp/ or where lines were modified where text or /regexp/ appears (without necessarily modifying text or /regexp/ itself).
	touchedlclgmine = mine-command touchedlclg

	lc = whatchanged -m -p ; Logs together with diff between commits.
	lcf = whatchanged -m --first-parent -p ; Logs together with diff between commits, but only from the "main branch" perspective, skipping commits that come from merged branches. This makes sense only when following a strict policy of merging all topic branches when staying on a single integration branch.
	;; lcl: Show separate log and diff of each commit (instead of concatenating all commits), paged through with less. Limit the number of commits via -<number> / -n <number> / --max-count <number> if the default of 20 isn't right.
	lclf = lcl --first-parent
	lcmine = mine-command lc ; Logs together with diff between commits, filtered for my personal commits.
	lcteam = team-command lc ; Logs together with diff between commits, filtered for my personal commits.
	lclastby = dashdash-default-command : others-command byuserrange-command lc --auto-revision : ; Logs together with diff between commits of the last consecutive commit(s) done by the passed or queried user(s)
	lcby = dashdash-default-command : others-command lc : ; Logs together with diff between commits, filtered for that user(s)' commits.
	lcfmine = lcmine --first-parent
	lcfteam = lcteam --first-parent
	lcfby = dashdash-default-command : others-command lc --first-parent :
	;; show: Log together with diff for a particular commit; like lc but will not log further commits.
	;; showl: Show separate log together with diff of each passed revision (instead of concatenating all commits), paged through with less.
	showw = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse show --color-words	; use word-based (not line-based) diff granularity
	showc = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse show --color-words --word-diff-regex=.	; use character-based diff granularity
	showa = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse show --color-words --word-diff-regex=(^|[^[:alnum:]_])[[:alnum:]_]+([^[:alnum:]_]|$)|[^[:space:]]	; use alnum-based diff granularity

	showmine = mine-command byuserrange-command show --last-only --auto-revision
	showteam = team-command byuserrange-command show --last-only --auto-revision
	showlastby = dashdash-default-command : others-command byuserrange-command show --last-only --auto-revision :
	showby = dashdash-default-command : others-command show :

	showwmine = mine-command byuserrange-command showw --last-only --auto-revision
	showwteam = team-command byuserrange-command showw --last-only --auto-revision
	showwlastby = dashdash-default-command : others-command byuserrange-command showw --last-only --auto-revision :
	showwby = dashdash-default-command : others-command showw :

	showcmine = mine-command byuserrange-command showc --last-only --auto-revision
	showcteam = team-command byuserrange-command showc --last-only --auto-revision
	showclastby = dashdash-default-command : others-command byuserrange-command showc --last-only --auto-revision :
	showcby = dashdash-default-command : others-command showc :

	showamine = mine-command byuserrange-command showa --last-only --auto-revision
	showateam = team-command byuserrange-command showa --last-only --auto-revision
	showalastby = dashdash-default-command : others-command byuserrange-command showa --last-only --auto-revision :
	showaby = dashdash-default-command : others-command showa :

	;; showfiles: Show the files modified in passed commit or commit range.
	showfilesmine = mine-command byuserrange-command showfiles --last-only --auto-revision	; Show the files modified by me in my last commit.
	showfilesteam = team-command byuserrange-command showfiles --last-only --auto-revision	; Show the files modified by me in my last commit.
	bymeshowfiles = mine-command byuserrange-command showfiles	; Show all files modified by me in the last / passed -r <commit> and directly preceding, as long as they also were by me.
	byteamshowfiles = team-command byuserrange-command showfiles	; Show all files modified by my team in the last / passed -r <commit> and directly preceding, as long as they also were by them.
	showfind = !GIT_PICKAXE_COMMAND=show git-pickaxe	; Log together with diff of those files where text or /regexp/ was added or removed.
	showfilesfind = !GIT_PICKAXE_COMMAND=showfiles git-pickaxe	; Show the files modified in passed commit or commit range where text or /regexp/ was added or removed.
	showtouched = !GIT_PICKAXE_COMMAND=show git-pickaxe --more	; Log together with diff of those files where lines were modified where text or /regexp/ appears.
	showfilestouched = !GIT_PICKAXE_COMMAND=showfiles git-pickaxe --more	; Show the files modified in passed commit or commit range where lines were modified where text or /regexp/ appears.

	; Commit logs Note: Git 1.6.0 only supports %Cred, %Cgreen, %Cblue for highlighting; only newer Git versions also support %C(more-colors).
	;; logv: Verbose log that includes filenames (like "svn log -v"), and additional committer vs. author information. Still shows all files of the commit even when filtering commits for certain paths (whereas "git log --name-status" also filters the file list itself).
	logv1 = logv --max-count 1
	l = log --pretty=tformat:%s	; One-line list of commit summaries.
	l1 = l --max-count 1
	lo = log --pretty=format:%B	; Raw, unwrapped subject and body.
	lo1 = show --no-patch --pretty=format:%B	; Raw, unwrapped subject and body, only for the passed commits. Good for reusing for a new commit message.
	lmine = mine-command l ; git l, filtered for my personal commits.
	lteam = team-command l ; git l, filtered for my personal commits.
	llastby = dashdash-default-command : others-command byuserrange-command l --auto-revision :	; git l of the last consecutive commit(s) done by the passed or queried user(s)
	lby = dashdash-default-command : others-command l : ; git l, filtered for that user(s)' commits.
	lmine1 = lmine --max-count 1
	lteam1 = lteam --max-count 1
	lothers1 = dashdash-default-command : others-command l --max-count 1 :
	lg = onelinelog '' --graph	; One-line topology, author, date, tags and commit summary.
	lg1 = lg --max-count 1
	;; lgv: One-line author, date, tags and commit summary, followed by modified filenames like "svn log -v".
	lh = log --pretty=tformat:%H	; One-line list of full commit hashes; useful with --grep.
	lh1 = lh --max-count 1	; Same as rev-parse HEAD.
	lhmine = mine-command lh ; git lh, filtered for my personal commits.
	lhteam = team-command lh ; git lh, filtered for my personal commits.
	lhlastby = dashdash-default-command : others-command byuserrange-command lh --auto-revision :	; git lh of the last consecutive commit(s) done by the passed or queried user(s)
	lhby = dashdash-default-command : others-command lh : ; git lh, filtered for that user(s)' commits.
	lhmine1 = lhmine --max-count 1
	lhteam1 = lhteam --max-count 1
	lhothers1 = dashdash-default-command : others-command lh --max-count 1 :
	;; lhurl: URLs to passed <remote> of all found commits.
	lhourl = lhurl origin	; My GitHub clone URLs of all found commits.
	lhourl1 = lhourl --max-count 1
	lhuurl = lhurl upstream	; Upstream URLs of all found commits.
	lhuurl1 = lhuurl --max-count 1
	lhourlv = lhurl origin --name-status	; My GitHub clone URLs and changed files of all found commits.
	lhourlv1 = lhourlv --max-count 1
	lhuurlv = lhurl upstream --name-status	; Upstream URLs and changed files of all found commits.
	lhuurlv1 = lhuurlv --max-count 1
	;; lghighlight: git lg, with lines that match passed PATTERN highlighted
	lghmine = mine-command --no-option-name lghighlight ; git lg, with my personal commits highlighted
	lghteam = team-command --no-option-name lghighlight ; git lg, with my personal commits highlighted
	lghby = dashdash-default-command : others-command --name --no-option-name --joined-as-pattern --prefix '(' --suffix ', ' lghighlight : ; git lg, with that user(s)' commits highlighted
	;; lgmine: git lg, filtered for my personal commits.
	;; lgteam: git lg, filtered for my team's commits.
	lglastby = dashdash-default-command : others-command byuserrange-command lg --auto-revision :	; git lg of the last consecutive commit(s) done by the passed or queried user(s)
	lgby = dashdash-default-command : others-command lg : ; git lg, filtered for that user(s)' commits.
	lgmine1 = lgmine --max-count 1
	lgteam1 = lgteam --max-count 1
	lgothers1 = dashdash-default-command : others-command lg --max-count 1 :
	logmine = mine-command log ; git log, filtered for my personal commits.
	logteam = team-command log ; git log, filtered for my personal commits.
	loglastby = dashdash-default-command : others-command byuserrange-command log --auto-revision :	; git log of the last consecutive commit(s) done by the passed or queried user(s)
	logby = dashdash-default-command : others-command log : ; git log, filtered for that user(s)' commits.
	logmine1 = logmine --max-count 1
	logteam1 = logteam --max-count 1
	logothers1 = dashdash-default-command : others-command log --max-count 1 :
	logvmine = mine-command logv ; logmine including filenames
	logvteam = team-command logv ; logteam including filenames
	logvlastby = dashdash-default-command : others-command byuserrange-command logv --auto-revision :	; loglastby including filenames
	logvby = dashdash-default-command : others-command logv : ; logby including filenames
	logvmine1 = logvmine --max-count 1
	logvteam1 = logvteam --max-count 1
	logvothers1 = dashdash-default-command : others-command logv --max-count 1 :

	lminetoday = today-command mine-command l ; One-line list of commit summaries of my changes of today.
	lteamtoday = today-command team-command l ; One-line list of commit summaries of my changes of today.
	lotherstoday = today-command dashdash-default-command : others-command l : ; One-line list of commit summaries of my changes of today.
	lgminetoday = today-command mine-command lg ; One-line topology, author, date, tags and commit summary of my changes of today.
	lgteamtoday = today-command team-command lg ; One-line topology, author, date, tags and commit summary of my changes of today.
	lgotherstoday = today-command dashdash-default-command : others-command lg : ; One-line topology, author, date, tags and commit summary of my changes of today.
	logminetoday = today-command mine-command log ; Show log of my changes of today.
	logteamtoday = today-command team-command log ; Show log of my changes of today.
	logotherstoday = today-command dashdash-default-command : others-command log : ; Show log of my changes of today.
	logvminetoday = today-command mine-command log --name-status
	logvteamtoday = today-command team-command log --name-status
	logvotherstoday = today-command dashdash-default-command : others-command log --name-status :

	lmineweek = week-command mine-command l ; One-line list of commit summaries of my changes of the previous 7 days.
	lteamweek = week-command team-command l ; One-line list of commit summaries of my changes of the previous 7 days.
	lothersweek = week-command dashdash-default-command : others-command l : ; One-line list of commit summaries of my changes of the previous 7 days.
	lgmineweek = week-command mine-command lg ; One-line topology, author, date, tags and commit summary of my changes of the previous 7 days.
	lgteamweek = week-command team-command lg ; One-line topology, author, date, tags and commit summary of my changes of the previous 7 days.
	lgothersweek = week-command dashdash-default-command : others-command lg : ; One-line topology, author, date, tags and commit summary of my changes of the previous 7 days.
	logmineweek = week-command mine-command log ; Show log of my changes of the previous 7 days.
	logteamweek = week-command team-command log ; Show log of my changes of the previous 7 days.
	logothersweek = week-command dashdash-default-command : others-command log : ; Show log of my changes of the previous 7 days.
	logvmineweek = week-command mine-command log --name-status
	logvteamweek = week-command team-command log --name-status
	logvothersweek = week-command dashdash-default-command : others-command log --name-status :

	lgstf = stfiles-command lg	; One-line topology, author, date, tags and commit summary of currently changed files.
	logstf = stfiles-command log	; Commit logs of currently changed files.
	logvstf = stfiles-command logv	; Verbose commit logs (including filenames) of currently changed files.
	lgstif = stifiles-command lg	; One-line topology, author, date, tags and commit summary of currently staged files.
	logstif = stifiles-command log	; Commit logs of currently staged files.
	logvstif = stifiles-command logv	; Verbose commit logs (including filenames) of currently staged files.

	lgs = selected-command lg	; Interactively select (from modified files or passed list of files) files (or directly pass N, M, ... selections) to log one-line topology, author, date, tags and commit summary by number.
	logs = selected-command log	; Interactively select (from modified files or passed list of files) files (or directly pass N, M, ... selections) commit logs by number.
	logvs = selected-command logv	; Interactively select (from modified files or passed list of files) files (or directly pass N, M, ... selections) verbose commit logs (including filenames) by number.
	lcs = selected-command lc	; Interactively select (from modified files or passed list of files) files (or directly pass N, M, ... selections) to log commits together with diff between commits by number.

	emaillg = email-command lg	; Start composing an email with one-line topology, author, date, tags and commit summary output to the originators of the covered commits.
	emaillg1 = email-command lg --max-count 1
	emaillog = email-command log	; Start composing an email with log output to the originators of the covered commits.
	emaillog1 = email-command log --max-count 1
	emaillc = email-command lc	; Start composing an email with logs together with diff output to the originators of the covered commits.
	emailshow = email-command show	; Start composing an email with log + diff output to the originators of the covered commits.

	;; logi: Show commit logs of files in index.
	;; lci: Logs together with diff between commits. of files in index.
	;; lgi: One-line topology, author, date, tags and commit summary of files in index.

	;; rev-parse: Resolve commit id from various passed ref types.
	;; commitid: Resolve commit id from the passed commit ref, with error message (unless -n|--no-error). With -q|--quiet, just performs the check without any output.
	;; equals: Check whether all passed refs refer to the same commit.

	;; td...: Log variants that only cover changes committed today.
	tdchurn = today-command churn
	tdd = today-command --no-range diffuntil ; Show all changes from today in a single big diff.
	tddl = today-command --no-range diffuntill ; Show all changes from today in a big diffs, separately for each changed file.
	tddt = today-command --no-range difftooluntil ; Show all changes from today in a single big diff.
	tdma = today-command --no-range --one-more format-patch
	tdfindlog = today-command findlog
	tdfindlogv = today-command findlogv
	tdfindlg = today-command findlg
	tdfindlc = today-command findlc
	tdfindlcl = today-command findlcl
	tdfindshow = today-command findshow
	tdfindlogg = today-command findlogg
	tdfindloggv = today-command findloggv
	tdfindlgg = today-command findlgg
	tdfindlcg = today-command findlcg
	tdfindlclg = today-command findlclg
	tdtouchedlog = today-command touchedlog
	tdtouchedlogv = today-command touchedlogv
	tdtouchedlg = today-command touchedlg
	tdtouchedlc = today-command touchedlc
	tdtouchedlcl = today-command touchedlcl
	tdtouchedshow = today-command touchedshow
	tdtouchedlogg = today-command touchedlogg
	tdtouchedloggv = today-command touchedloggv
	tdtouchedlgg = today-command touchedlgg
	tdtouchedlcg = today-command touchedlcg
	tdtouchedlclg = today-command touchedlclg
	tdwherelastlog = today-command wherelastlog
	tdwherelastlogv = today-command wherelastlogv
	tdwherelastshow = today-command wherelastshow
	tdwherelastlogg = today-command wherelastlogg
	tdwherelastloggv = today-command wherelastloggv
	tdwherelastshowg = today-command wherelastshowg
	tdwhereintroducedlog = today-command whereintroducedlog
	tdwhereintroducedlogv = today-command whereintroducedlogv
	tdwhereintroducedshow = today-command whereintroducedshow
	tdwhereintroducedlogg = today-command whereintroducedlogg
	tdwhereintroducedloggv = today-command whereintroducedloggv
	tdwhereintroducedshowg = today-command whereintroducedshowg
	tdlc = today-command lc
	tdlcf = today-command lcf --reverse
	tdlcl = today-command lcl --reverse
	tdlclf = today-command lclf --reverse
	tdlcmine = today-command lcmine --reverse
	tdlcteam = today-command lcteam --reverse
	tdlcby = dashdash-default-command : today-command others-command lc --reverse :
	tdlcfmine = today-command lcfmine --reverse
	tdlcfteam = today-command lcfteam --reverse
	tdlcfby = today-command lcfby --reverse
	tdshow = today-command show
	tdshoww = today-command showw
	tdshowc = today-command showc
	tdshowa = today-command showa
	tdshowfiles = today-command --no-range showfiles
	tdshowselected = today-command showselected
	tdshowlselected = today-command showlselected
	tdlog = today-command log
	tdlogv = today-command logv
	tdglog = today-command glog
	tdlogg = today-command logg
	tdlgg = today-command lgg
	tdl = today-command l
	tdlmine = today-command lmine
	tdlteam = today-command lteam
	tdlby = dashdash-default-command : today-command others-command l :
	tdlg = today-command lg
	tdlgv = today-command lgv
	tdlh = today-command lh --reverse
	tdlhmine = today-command lhmine --reverse
	tdlhteam = today-command lhteam --reverse
	tdlhby = dashdash-default-command : today-command others-command lh --reverse :
	tdlhurl = today-command lhurl
	tdlhourl = today-command lhourl --reverse
	tdlhuurl = today-command lhuurl --reverse
	tdlhourlv = today-command lhourlv --reverse
	tdlhuurlv = today-command lhuurlv --reverse
	tdlgmine = today-command lgmine
	tdlgteam = today-command lgteam
	tdlgby = dashdash-default-command : today-command others-command lg :
	tdlogmine = today-command logmine
	tdlogteam = today-command logteam
	tdlogby = dashdash-default-command : today-command others-command log :
	tdfixup = today-command fixupselected
	tdrbfixup = today-command rbfixupselected
	tdrbi = today-command --no-range --one-more rebase -i
	tdbase = today-command --no-range name-rev --name-only
	tdwhodid = files-command whodid tdshowfiles
	tdwhotouched = today-command whodid
	tdwhatdid = today-command whatdid
	; tdactivity would just show activity for today
	tdemaillog = today-command email-command log
	tdemaillc = today-command email-command show
	; tdpull-request does not cover a branch

	;; week...: Log variants that only cover changes committed week.
	weekchurn = week-command churn
	weekd = week-command --no-range diffuntil ; Show all changes from week in a single big diff.
	weekdl = week-command --no-range diffuntill ; Show all changes from week in a big diffs, separately for each changed file.
	weekdt = week-command --no-range difftooluntil ; Show all changes from week in a single big diff.
	weekma = week-command --no-range --one-more format-patch
	weekfindlog = week-command findlog
	weekfindlogv = week-command findlogv
	weekfindlg = week-command findlg
	weekfindlc = week-command findlc
	weekfindlcl = week-command findlcl
	weekfindshow = week-command findshow
	weekfindlogg = week-command findlogg
	weekfindloggv = week-command findloggv
	weekfindlgg = week-command findlgg
	weekfindlcg = week-command findlcg
	weekfindlclg = week-command findlclg
	weektouchedlog = week-command touchedlog
	weektouchedlogv = week-command touchedlogv
	weektouchedlg = week-command touchedlg
	weektouchedlc = week-command touchedlc
	weektouchedlcl = week-command touchedlcl
	weektouchedshow = week-command touchedshow
	weektouchedlogg = week-command touchedlogg
	weektouchedloggv = week-command touchedloggv
	weektouchedlgg = week-command touchedlgg
	weektouchedlcg = week-command touchedlcg
	weektouchedlclg = week-command touchedlclg
	weekwherelastlog = week-command wherelastlog
	weekwherelastlogv = week-command wherelastlogv
	weekwherelastshow = week-command wherelastshow
	weekwherelastlogg = week-command wherelastlogg
	weekwherelastloggv = week-command wherelastloggv
	weekwherelastshowg = week-command wherelastshowg
	weekwhereintroducedlog = week-command whereintroducedlog
	weekwhereintroducedlogv = week-command whereintroducedlogv
	weekwhereintroducedshow = week-command whereintroducedshow
	weekwhereintroducedlogg = week-command whereintroducedlogg
	weekwhereintroducedloggv = week-command whereintroducedloggv
	weekwhereintroducedshowg = week-command whereintroducedshowg
	weeklc = week-command lc
	weeklcf = week-command lcf --reverse
	weeklcl = week-command lcl --reverse
	weeklclf = week-command lclf --reverse
	weeklcmine = week-command lcmine --reverse
	weeklcteam = week-command lcteam --reverse
	weeklcby = dashdash-default-command : week-command others-command lc --reverse :
	weeklcfmine = week-command lcfmine --reverse
	weeklcfteam = week-command lcfteam --reverse
	weeklcfby = week-command lcfby --reverse
	weekshow = week-command show
	weekshoww = week-command showw
	weekshowc = week-command showc
	weekshowa = week-command showa
	weekshowfiles = week-command --no-range showfiles
	weekshowselected = week-command showselected
	weekshowlselected = week-command showlselected
	weeklog = week-command log
	weeklogv = week-command logv
	weekglog = week-command glog
	weeklogg = week-command logg
	weeklgg = week-command lgg
	weekl = week-command l
	weeklmine = week-command lmine
	weeklteam = week-command lteam
	weeklby = dashdash-default-command : week-command others-command l :
	weeklg = week-command lg
	weeklgv = week-command lgv
	weeklh = week-command lh --reverse
	weeklhmine = week-command lhmine --reverse
	weeklhteam = week-command lhteam --reverse
	weeklhby = dashdash-default-command : week-command others-command lh --reverse :
	weeklhurl = week-command lhurl
	weeklhourl = week-command lhourl --reverse
	weeklhuurl = week-command lhuurl --reverse
	weeklhourlv = week-command lhourlv --reverse
	weeklhuurlv = week-command lhuurlv --reverse
	weeklgmine = week-command lgmine
	weeklgteam = week-command lgteam
	weeklgby = dashdash-default-command : week-command others-command lg :
	weeklogmine = week-command logmine
	weeklogteam = week-command logteam
	weeklogby = dashdash-default-command : week-command others-command log :
	weekfixup = week-command fixupselected
	weekrbfixup = week-command rbfixupselected
	weekrbi = week-command --no-range rebase -i
	weekbase = week-command --no-range name-rev --name-only
	weekwhodid = files-command whodid weekshowfiles
	weekwhotouched = week-command whodid
	weekwhatdid = week-command whatdid
	; weekactivity would just show activity for week
	weekemaillog = week-command email-command log
	weekemaillc = week-command email-command show
	; weekpull-request does not cover a branch

	;; by...: Log variants that only cover changes committed by the author of the HEAD / passed -r|--revision REVISION.
	bychurn = byuserrange-command churn
	byd = byuserrange-command --with-range ... diff
	bydl = byuserrange-command --with-range ... dl
	bydt = byuserrange-command --with-range ... difftool
	byma = byuserrange-command format-patch
	byfindlog = byuserrange-command findlog
	byfindlogv = byuserrange-command findlogv
	byfindlg = byuserrange-command findlg
	byfindlc = byuserrange-command findlc
	byfindlcl = byuserrange-command findlcl
	byfindshow = byuserrange-command findshow
	byfindlogg = byuserrange-command findlogg
	byfindloggv = byuserrange-command findloggv
	byfindlgg = byuserrange-command findlgg
	byfindlcg = byuserrange-command findlcg
	byfindlclg = byuserrange-command findlclg
	bytouchedlog = byuserrange-command touchedlog
	bytouchedlogv = byuserrange-command touchedlogv
	bytouchedlg = byuserrange-command touchedlg
	bytouchedlc = byuserrange-command touchedlc
	bytouchedlcl = byuserrange-command touchedlcl
	bytouchedshow = byuserrange-command touchedshow
	bytouchedlogg = byuserrange-command touchedlogg
	bytouchedloggv = byuserrange-command touchedloggv
	bytouchedlgg = byuserrange-command touchedlgg
	bytouchedlcg = byuserrange-command touchedlcg
	bytouchedlclg = byuserrange-command touchedlclg
	bywherelastlog = byuserrange-command wherelastlog
	bywherelastlogv = byuserrange-command wherelastlogv
	bywherelastshow = byuserrange-command wherelastshow
	bywherelastlogg = byuserrange-command wherelastlogg
	bywherelastloggv = byuserrange-command wherelastloggv
	bywherelastshowg = byuserrange-command wherelastshowg
	bywhereintroducedlog = byuserrange-command whereintroducedlog
	bywhereintroducedlogv = byuserrange-command whereintroducedlogv
	bywhereintroducedshow = byuserrange-command whereintroducedshow
	bywhereintroducedlogg = byuserrange-command whereintroducedlogg
	bywhereintroducedloggv = byuserrange-command whereintroducedloggv
	bywhereintroducedshowg = byuserrange-command whereintroducedshowg
	bylc = byuserrange-command lc
	bylcf = byuserrange-command lcf --reverse
	bylcl = byuserrange-command lcl --reverse
	bylclf = byuserrange-command lclf --reverse
	bylcmine = byuserrange-command lcmine --reverse
	bylcteam = byuserrange-command lcteam --reverse
	bylcby = dashdash-default-command : byuserrange-command others-command lc --reverse :
	bylcfmine = byuserrange-command lcfmine --reverse
	bylcfteam = byuserrange-command lcfteam --reverse
	bylcfby = byuserrange-command lcfby --reverse
	byshow = byuserrange-command show
	byshoww = byuserrange-command showw
	byshowc = byuserrange-command showc
	byshowa = byuserrange-command showa
	byshowfiles = byuserrange-command --with-range ... showfiles
	byshowselected = byuserrange-command showselected
	byshowlselected = byuserrange-command showlselected
	bylog = byuserrange-command log
	bylogv = byuserrange-command logv
	byglog = byuserrange-command glog
	bylogg = byuserrange-command logg
	bylgg = byuserrange-command lgg
	byl = byuserrange-command l
	bylmine = byuserrange-command lmine
	bylteam = byuserrange-command lteam
	bylby = dashdash-default-command : byuserrange-command others-command l :
	bylg = byuserrange-command lg
	bylgv = byuserrange-command lgv
	bylh = byuserrange-command lh --reverse
	bylhmine = byuserrange-command lhmine --reverse
	bylhteam = byuserrange-command lhteam --reverse
	bylhby = dashdash-default-command : byuserrange-command others-command lh --reverse :
	bylhurl = byuserrange-command lhurl
	bylhourl = byuserrange-command lhourl --reverse
	bylhuurl = byuserrange-command lhuurl --reverse
	bylhourlv = byuserrange-command lhourlv --reverse
	bylhuurlv = byuserrange-command lhuurlv --reverse
	bylgmine = byuserrange-command lgmine
	bylgteam = byuserrange-command lgteam
	bylgby = dashdash-default-command : byuserrange-command others-command lg :
	bylogmine = byuserrange-command logmine
	bylogteam = byuserrange-command logteam
	bylogby = dashdash-default-command : byuserrange-command others-command log :
	byfixup = byuserrange-command fixupselected
	byrbfixup = byuserrange-command rbfixupselected
	byrbi = byuserrange-command --no-range --one-more rebase -i
	bybase = byuserrange-command --no-range name-rev --name-only
	bywhodid = files-command whodid byshowfiles
	bywhotouched = byuserrange-command whodid
	bywhatdid = byuserrange-command whatdid
	byactivity = byuserrange-command activity
	byactivitymine = byuserrange-command activitymine
	byactivityteam = byuserrange-command activityteam
	byemaillog = byuserrange-command email-command log
	byemaillc = byuserrange-command email-command lc
	; bypull-request does not cover a branch

	;; rev-range: Run a Git command with a revision range from the passed revision up to HEAD.
	;; rev-range-this-branch: Run a Git command with a revision range that covers the current branch (up to another reference).
	;; rev-range-incoming: Run a Git command with the revision range of the commits that already exist in remote on the current branch, but not yet in the local branch.
	;; rev-range-outgoing: Run a Git command with the revision range of the commits that already exist on the current branch, but not yet in the corresponding remote branch.

	;; br...: Log variants that only cover the current branch (as tagged or referenced anywhere in the history (also by remotes))
	brchurn = rev-range-this-branch --any churn
	brd = rev-range-this-branch --any --with-range ... diff
	brdl = rev-range-this-branch --any --with-range ... dl
	brdt = rev-range-this-branch --any --with-range ... difftool
	brma = rev-range-this-branch --any format-patch
	brfindlog = rev-range-this-branch --any --keep-last findlog
	brfindlogv = rev-range-this-branch --any --keep-last findlogv
	brfindlg = rev-range-this-branch --any --keep-last findlg
	brfindlc = rev-range-this-branch --any --keep-last findlc
	brfindlcl = rev-range-this-branch --any --keep-last findlcl
	brfindshow = rev-range-this-branch --any --keep-last findshow
	brfindlogg = rev-range-this-branch --any --keep-last findlogg
	brfindloggv = rev-range-this-branch --any --keep-last findloggv
	brfindlgg = rev-range-this-branch --any --keep-last findlgg
	brfindlcg = rev-range-this-branch --any --keep-last findlcg
	brfindlclg = rev-range-this-branch --any --keep-last findlclg
	brtouchedlog = rev-range-this-branch --any --keep-last touchedlog
	brtouchedlogv = rev-range-this-branch --any --keep-last touchedlogv
	brtouchedlg = rev-range-this-branch --any --keep-last touchedlg
	brtouchedlc = rev-range-this-branch --any --keep-last touchedlc
	brtouchedlcl = rev-range-this-branch --any --keep-last touchedlcl
	brtouchedshow = rev-range-this-branch --any --keep-last touchedshow
	brtouchedlogg = rev-range-this-branch --any --keep-last touchedlogg
	brtouchedloggv = rev-range-this-branch --any --keep-last touchedloggv
	brtouchedlgg = rev-range-this-branch --any --keep-last touchedlgg
	brtouchedlcg = rev-range-this-branch --any --keep-last touchedlcg
	brtouchedlclg = rev-range-this-branch --any --keep-last touchedlclg
	brwherelastlog = rev-range-this-branch --any --keep-last wherelastlog
	brwherelastlogv = rev-range-this-branch --any --keep-last wherelastlogv
	brwherelastshow = rev-range-this-branch --any --keep-last wherelastshow
	brwherelastlogg = rev-range-this-branch --any --keep-last wherelastlogg
	brwherelastloggv = rev-range-this-branch --any --keep-last wherelastloggv
	brwherelastshowg = rev-range-this-branch --any --keep-last wherelastshowg
	brwhereintroducedlog = rev-range-this-branch --any --keep-last whereintroducedlog
	brwhereintroducedlogv = rev-range-this-branch --any --keep-last whereintroducedlogv
	brwhereintroducedshow = rev-range-this-branch --any --keep-last whereintroducedshow
	brwhereintroducedlogg = rev-range-this-branch --any --keep-last whereintroducedlogg
	brwhereintroducedloggv = rev-range-this-branch --any --keep-last whereintroducedloggv
	brwhereintroducedshowg = rev-range-this-branch --any --keep-last whereintroducedshowg
	brlc = rev-range-this-branch --any --one-more-command log lc
	brlcf = rev-range-this-branch --any --one-more-command log lcf --reverse
	brlcl = rev-range-this-branch --any lcl --reverse
	brlclf = rev-range-this-branch --any lclf --reverse
	brlcmine = rev-range-this-branch --any --one-more-command log lcmine --reverse
	brlcteam = rev-range-this-branch --any --one-more-command log lcteam --reverse
	brlcby = dashdash-default-command : rev-range-this-branch --any --one-more-command log others-command lc --reverse :
	brlcfmine = rev-range-this-branch --any --one-more-command log lcfmine --reverse
	brlcfteam = rev-range-this-branch --any --one-more-command log lcfteam --reverse
	brlcfby = rev-range-this-branch --any --one-more-command log lcfby --reverse
	brshow = rev-range-this-branch --any --one-more-command log show
	brshoww = rev-range-this-branch --any --one-more-command log showw
	brshowc = rev-range-this-branch --any --one-more-command log showc
	brshowa = rev-range-this-branch --any --one-more-command log showa
	brshowfiles = rev-range-this-branch --any --with-range ... showfiles
	brshowselected = rev-range-this-branch --any --one-more-command log showselected
	brshowlselected = rev-range-this-branch --any --one-more-command log showlselected
	brlog = rev-range-this-branch --any --one-more log
	brlogv = rev-range-this-branch --any --one-more logv
	brglog = rev-range-this-branch --any glog
	brlogg = rev-range-this-branch --any --one-more logg
	brlgg = rev-range-this-branch --any --one-more lgg
	brl = rev-range-this-branch --any l
	brlmine = rev-range-this-branch --any lmine
	brlteam = rev-range-this-branch --any lteam
	brlby = dashdash-default-command : rev-range-this-branch --any others-command l :
	brlg = rev-range-this-branch --any --one-more lg
	brlgn = rev-range-this-branch --any lg
	brlgv = rev-range-this-branch --any --one-more lgv
	brlh = rev-range-this-branch --any lh --reverse
	brlhmine = rev-range-this-branch --any lhmine --reverse
	brlhteam = rev-range-this-branch --any lhteam --reverse
	brlhby = dashdash-default-command : rev-range-this-branch --any others-command lh --reverse :
	brlhurl = rev-range-this-branch --any lhurl
	brlhourl = rev-range-this-branch --any lhourl --reverse
	brlhuurl = rev-range-this-branch --any lhuurl --reverse
	brlhourlv = rev-range-this-branch --any lhourlv --reverse
	brlhuurlv = rev-range-this-branch --any lhuurlv --reverse
	brlgmine = rev-range-this-branch --any --one-more lgmine
	brlgteam = rev-range-this-branch --any --one-more lgteam
	brlgby = dashdash-default-command : rev-range-this-branch --any --one-more others-command lg :
	brlogmine = rev-range-this-branch --any --one-more logmine
	brlogteam = rev-range-this-branch --any --one-more logteam
	brlogby = dashdash-default-command : rev-range-this-branch --any --one-more others-command log :
	brfixup = rev-range-this-branch --any fixupselected
	brrbfixup = rev-range-this-branch --any rbfixupselected
	brrbi = rev-range-this-branch --any --no-range rebase -i
	brbase = rev-range-this-branch --any --no-range name-rev --name-only
	brwhodid = files-command whodid brshowfiles
	brwhotouched = rev-range-this-branch --any whodid
	brwhatdid = rev-range-this-branch --any whatdid
	bractivity = rev-range-this-branch --any activity
	bractivitymine = rev-range-this-branch --any activitymine
	bractivityteam = rev-range-this-branch --any activityteam
	bremaillog = rev-range-this-branch --any email-command log
	bremaillc = rev-range-this-branch --any email-command lc
	brpull-request = previousbranch-command --keep-position pull-request --base BRANCH

	;; b2r...: Log variants that only cover the current and preceding branch (as tagged or referenced anywhere in the history (also by remotes))
	b2rchurn = rev-range-this-branch --any --branch-number 2 churn
	b2rd = rev-range-this-branch --any --branch-number 2 --with-range ... diff
	b2rdl = rev-range-this-branch --any --branch-number 2 --with-range ... dl
	b2rdt = rev-range-this-branch --any --branch-number 2 --with-range ... difftool
	b2rma = rev-range-this-branch --any --branch-number 2 format-patch
	b2rfindlog = rev-range-this-branch --any --branch-number 2 --keep-last findlog
	b2rfindlogv = rev-range-this-branch --any --branch-number 2 --keep-last findlogv
	b2rfindlg = rev-range-this-branch --any --branch-number 2 --keep-last findlg
	b2rfindlc = rev-range-this-branch --any --branch-number 2 --keep-last findlc
	b2rfindlcl = rev-range-this-branch --any --branch-number 2 --keep-last findlcl
	b2rfindshow = rev-range-this-branch --any --branch-number 2 --keep-last findshow
	b2rfindlogg = rev-range-this-branch --any --branch-number 2 --keep-last findlogg
	b2rfindloggv = rev-range-this-branch --any --branch-number 2 --keep-last findloggv
	b2rfindlgg = rev-range-this-branch --any --branch-number 2 --keep-last findlgg
	b2rfindlcg = rev-range-this-branch --any --branch-number 2 --keep-last findlcg
	b2rfindlclg = rev-range-this-branch --any --branch-number 2 --keep-last findlclg
	b2rtouchedlog = rev-range-this-branch --any --branch-number 2 --keep-last touchedlog
	b2rtouchedlogv = rev-range-this-branch --any --branch-number 2 --keep-last touchedlogv
	b2rtouchedlg = rev-range-this-branch --any --branch-number 2 --keep-last touchedlg
	b2rtouchedlc = rev-range-this-branch --any --branch-number 2 --keep-last touchedlc
	b2rtouchedlcl = rev-range-this-branch --any --branch-number 2 --keep-last touchedlcl
	b2rtouchedshow = rev-range-this-branch --any --branch-number 2 --keep-last touchedshow
	b2rtouchedlogg = rev-range-this-branch --any --branch-number 2 --keep-last touchedlogg
	b2rtouchedloggv = rev-range-this-branch --any --branch-number 2 --keep-last touchedloggv
	b2rtouchedlgg = rev-range-this-branch --any --branch-number 2 --keep-last touchedlgg
	b2rtouchedlcg = rev-range-this-branch --any --branch-number 2 --keep-last touchedlcg
	b2rtouchedlclg = rev-range-this-branch --any --branch-number 2 --keep-last touchedlclg
	b2rwherelastlog = rev-range-this-branch --any --branch-number 2 --keep-last wherelastlog
	b2rwherelastlogv = rev-range-this-branch --any --branch-number 2 --keep-last wherelastlogv
	b2rwherelastshow = rev-range-this-branch --any --branch-number 2 --keep-last wherelastshow
	b2rwherelastlogg = rev-range-this-branch --any --branch-number 2 --keep-last wherelastlogg
	b2rwherelastloggv = rev-range-this-branch --any --branch-number 2 --keep-last wherelastloggv
	b2rwherelastshowg = rev-range-this-branch --any --branch-number 2 --keep-last wherelastshowg
	b2rwhereintroducedlog = rev-range-this-branch --any --branch-number 2 --keep-last whereintroducedlog
	b2rwhereintroducedlogv = rev-range-this-branch --any --branch-number 2 --keep-last whereintroducedlogv
	b2rwhereintroducedshow = rev-range-this-branch --any --branch-number 2 --keep-last whereintroducedshow
	b2rwhereintroducedlogg = rev-range-this-branch --any --branch-number 2 --keep-last whereintroducedlogg
	b2rwhereintroducedloggv = rev-range-this-branch --any --branch-number 2 --keep-last whereintroducedloggv
	b2rwhereintroducedshowg = rev-range-this-branch --any --branch-number 2 --keep-last whereintroducedshowg
	b2rlc = rev-range-this-branch --any --branch-number 2 --one-more-command log lc
	b2rlcf = rev-range-this-branch --any --branch-number 2 --one-more-command log lcf --reverse
	b2rlcl = rev-range-this-branch --any --branch-number 2 lcl --reverse
	b2rlclf = rev-range-this-branch --any --branch-number 2 lclf --reverse
	b2rlcmine = rev-range-this-branch --any --branch-number 2 --one-more-command log lcmine --reverse
	b2rlcteam = rev-range-this-branch --any --branch-number 2 --one-more-command log lcteam --reverse
	b2rlcby = dashdash-default-command : rev-range-this-branch --any --branch-number 2 --one-more-command log others-command lc --reverse :
	b2rlcfmine = rev-range-this-branch --any --branch-number 2 --one-more-command log lcfmine --reverse
	b2rlcfteam = rev-range-this-branch --any --branch-number 2 --one-more-command log lcfteam --reverse
	b2rlcfby = rev-range-this-branch --any --branch-number 2 --one-more-command log lcfby --reverse
	b2rshow = rev-range-this-branch --any --branch-number 2 --one-more-command log show
	b2rshoww = rev-range-this-branch --any --branch-number 2 --one-more-command log showw
	b2rshowc = rev-range-this-branch --any --branch-number 2 --one-more-command log showc
	b2rshowa = rev-range-this-branch --any --branch-number 2 --one-more-command log showa
	b2rshowfiles = rev-range-this-branch --any --branch-number 2 --with-range ... showfiles
	b2rshowselected = rev-range-this-branch --any --branch-number 2 --one-more-command log showselected
	b2rshowlselected = rev-range-this-branch --any --branch-number 2 --one-more-command log showlselected
	b2rlog = rev-range-this-branch --any --branch-number 2 --one-more log
	b2rlogv = rev-range-this-branch --any --branch-number 2 --one-more logv
	b2rglog = rev-range-this-branch --any --branch-number 2 glog
	b2rlogg = rev-range-this-branch --any --branch-number 2 --one-more logg
	b2rlgg = rev-range-this-branch --any --branch-number 2 --one-more lgg
	b2rl = rev-range-this-branch --any --branch-number 2 l
	b2rlmine = rev-range-this-branch --any --branch-number 2 lmine
	b2rlteam = rev-range-this-branch --any --branch-number 2 lteam
	b2rlby = dashdash-default-command : rev-range-this-branch --any --branch-number 2 others-command l :
	b2rlg = rev-range-this-branch --any --branch-number 2 --one-more lg
	b2rlgn = rev-range-this-branch --any --branch-number 2 lg
	b2rlgv = rev-range-this-branch --any --branch-number 2 --one-more lgv
	b2rlh = rev-range-this-branch --any --branch-number 2 lh --reverse
	b2rlhmine = rev-range-this-branch --any --branch-number 2 lhmine --reverse
	b2rlhteam = rev-range-this-branch --any --branch-number 2 lhteam --reverse
	b2rlhby = dashdash-default-command : rev-range-this-branch --any --branch-number 2 others-command lh --reverse :
	b2rlhurl = rev-range-this-branch --any --branch-number 2 lhurl
	b2rlhourl = rev-range-this-branch --any --branch-number 2 lhourl --reverse
	b2rlhuurl = rev-range-this-branch --any --branch-number 2 lhuurl --reverse
	b2rlhourlv = rev-range-this-branch --any --branch-number 2 lhourlv --reverse
	b2rlhuurlv = rev-range-this-branch --any --branch-number 2 lhuurlv --reverse
	b2rlgmine = rev-range-this-branch --any --branch-number 2 --one-more lgmine
	b2rlgteam = rev-range-this-branch --any --branch-number 2 --one-more lgteam
	b2rlgby = dashdash-default-command : rev-range-this-branch --any --branch-number 2 --one-more others-command lg :
	b2rlogmine = rev-range-this-branch --any --branch-number 2 --one-more logmine
	b2rlogteam = rev-range-this-branch --any --branch-number 2 --one-more logteam
	b2rlogby = dashdash-default-command : rev-range-this-branch --any --branch-number 2 --one-more others-command log :
	b2rfixup = rev-range-this-branch --any --branch-number 2 fixupselected
	b2rrbfixup = rev-range-this-branch --any --branch-number 2 rbfixupselected
	b2rrbi = rev-range-this-branch --any --branch-number 2 --no-range rebase -i
	b2rbase = rev-range-this-branch --any --branch-number 2 --no-range name-rev --name-only
	b2rwhodid = files-command whodid b2rshowfiles
	b2rwhotouched = rev-range-this-branch --any --branch-number 2 whodid
	b2rwhatdid = rev-range-this-branch --any --branch-number 2 whatdid
	b2ractivity = rev-range-this-branch --any --branch-number 2 activity
	b2ractivitymine = rev-range-this-branch --any --branch-number 2 activitymine
	b2ractivityteam = rev-range-this-branch --any --branch-number 2 activityteam
	b2remaillog = rev-range-this-branch --any --branch-number 2 email-command log
	b2remaillc = rev-range-this-branch --any --branch-number 2 email-command lc
	b2rpull-request = previousbranch-command --branch-number 2 --keep-position pull-request --base BRANCH

	;; b3r...: Log variants that only cover the current and two preceding branches (as tagged or referenced anywhere in the history (also by remotes))
	b3rchurn = rev-range-this-branch --any --branch-number 3 churn
	b3rd = rev-range-this-branch --any --branch-number 3 --with-range ... diff
	b3rdl = rev-range-this-branch --any --branch-number 3 --with-range ... dl
	b3rdt = rev-range-this-branch --any --branch-number 3 --with-range ... difftool
	b3rma = rev-range-this-branch --any --branch-number 3 format-patch
	b3rfindlog = rev-range-this-branch --any --branch-number 3 --keep-last findlog
	b3rfindlogv = rev-range-this-branch --any --branch-number 3 --keep-last findlogv
	b3rfindlg = rev-range-this-branch --any --branch-number 3 --keep-last findlg
	b3rfindlc = rev-range-this-branch --any --branch-number 3 --keep-last findlc
	b3rfindlcl = rev-range-this-branch --any --branch-number 3 --keep-last findlcl
	b3rfindshow = rev-range-this-branch --any --branch-number 3 --keep-last findshow
	b3rfindlogg = rev-range-this-branch --any --branch-number 3 --keep-last findlogg
	b3rfindloggv = rev-range-this-branch --any --branch-number 3 --keep-last findloggv
	b3rfindlgg = rev-range-this-branch --any --branch-number 3 --keep-last findlgg
	b3rfindlcg = rev-range-this-branch --any --branch-number 3 --keep-last findlcg
	b3rfindlclg = rev-range-this-branch --any --branch-number 3 --keep-last findlclg
	b3rtouchedlog = rev-range-this-branch --any --branch-number 3 --keep-last touchedlog
	b3rtouchedlogv = rev-range-this-branch --any --branch-number 3 --keep-last touchedlogv
	b3rtouchedlg = rev-range-this-branch --any --branch-number 3 --keep-last touchedlg
	b3rtouchedlc = rev-range-this-branch --any --branch-number 3 --keep-last touchedlc
	b3rtouchedlcl = rev-range-this-branch --any --branch-number 3 --keep-last touchedlcl
	b3rtouchedshow = rev-range-this-branch --any --branch-number 3 --keep-last touchedshow
	b3rtouchedlogg = rev-range-this-branch --any --branch-number 3 --keep-last touchedlogg
	b3rtouchedloggv = rev-range-this-branch --any --branch-number 3 --keep-last touchedloggv
	b3rtouchedlgg = rev-range-this-branch --any --branch-number 3 --keep-last touchedlgg
	b3rtouchedlcg = rev-range-this-branch --any --branch-number 3 --keep-last touchedlcg
	b3rtouchedlclg = rev-range-this-branch --any --branch-number 3 --keep-last touchedlclg
	b3rwherelastlog = rev-range-this-branch --any --branch-number 3 --keep-last wherelastlog
	b3rwherelastlogv = rev-range-this-branch --any --branch-number 3 --keep-last wherelastlogv
	b3rwherelastshow = rev-range-this-branch --any --branch-number 3 --keep-last wherelastshow
	b3rwherelastlogg = rev-range-this-branch --any --branch-number 3 --keep-last wherelastlogg
	b3rwherelastloggv = rev-range-this-branch --any --branch-number 3 --keep-last wherelastloggv
	b3rwherelastshowg = rev-range-this-branch --any --branch-number 3 --keep-last wherelastshowg
	b3rwhereintroducedlog = rev-range-this-branch --any --branch-number 3 --keep-last whereintroducedlog
	b3rwhereintroducedlogv = rev-range-this-branch --any --branch-number 3 --keep-last whereintroducedlogv
	b3rwhereintroducedshow = rev-range-this-branch --any --branch-number 3 --keep-last whereintroducedshow
	b3rwhereintroducedlogg = rev-range-this-branch --any --branch-number 3 --keep-last whereintroducedlogg
	b3rwhereintroducedloggv = rev-range-this-branch --any --branch-number 3 --keep-last whereintroducedloggv
	b3rwhereintroducedshowg = rev-range-this-branch --any --branch-number 3 --keep-last whereintroducedshowg
	b3rlc = rev-range-this-branch --any --branch-number 3 --one-more-command log lc
	b3rlcf = rev-range-this-branch --any --branch-number 3 --one-more-command log lcf --reverse
	b3rlcl = rev-range-this-branch --any --branch-number 3 lcl --reverse
	b3rlclf = rev-range-this-branch --any --branch-number 3 lclf --reverse
	b3rlcmine = rev-range-this-branch --any --branch-number 3 --one-more-command log lcmine --reverse
	b3rlcteam = rev-range-this-branch --any --branch-number 3 --one-more-command log lcteam --reverse
	b3rlcby = dashdash-default-command : rev-range-this-branch --any --branch-number 3 --one-more-command log others-command lc --reverse :
	b3rlcfmine = rev-range-this-branch --any --branch-number 3 --one-more-command log lcfmine --reverse
	b3rlcfteam = rev-range-this-branch --any --branch-number 3 --one-more-command log lcfteam --reverse
	b3rlcfby = rev-range-this-branch --any --branch-number 3 --one-more-command log lcfby --reverse
	b3rshow = rev-range-this-branch --any --branch-number 3 --one-more-command log show
	b3rshoww = rev-range-this-branch --any --branch-number 3 --one-more-command log showw
	b3rshowc = rev-range-this-branch --any --branch-number 3 --one-more-command log showc
	b3rshowa = rev-range-this-branch --any --branch-number 3 --one-more-command log showa
	b3rshowfiles = rev-range-this-branch --any --branch-number 3 --with-range ... showfiles
	b3rshowselected = rev-range-this-branch --any --branch-number 3 --one-more-command log showselected
	b3rshowlselected = rev-range-this-branch --any --branch-number 3 --one-more-command log showlselected
	b3rlog = rev-range-this-branch --any --branch-number 3 --one-more log
	b3rlogv = rev-range-this-branch --any --branch-number 3 --one-more logv
	b3rglog = rev-range-this-branch --any --branch-number 3 glog
	b3rlogg = rev-range-this-branch --any --branch-number 3 --one-more logg
	b3rlgg = rev-range-this-branch --any --branch-number 3 --one-more lgg
	b3rl = rev-range-this-branch --any --branch-number 3 l
	b3rlmine = rev-range-this-branch --any --branch-number 3 lmine
	b3rlteam = rev-range-this-branch --any --branch-number 3 lteam
	b3rlby = dashdash-default-command : rev-range-this-branch --any --branch-number 3 others-command l :
	b3rlg = rev-range-this-branch --any --branch-number 3 --one-more lg
	b3rlgn = rev-range-this-branch --any --branch-number 3 lg
	b3rlgv = rev-range-this-branch --any --branch-number 3 --one-more lgv
	b3rlh = rev-range-this-branch --any --branch-number 3 lh --reverse
	b3rlhmine = rev-range-this-branch --any --branch-number 3 lhmine --reverse
	b3rlhteam = rev-range-this-branch --any --branch-number 3 lhteam --reverse
	b3rlhby = dashdash-default-command : rev-range-this-branch --any --branch-number 3 others-command lh --reverse :
	b3rlhurl = rev-range-this-branch --any --branch-number 3 lhurl
	b3rlhourl = rev-range-this-branch --any --branch-number 3 lhourl --reverse
	b3rlhuurl = rev-range-this-branch --any --branch-number 3 lhuurl --reverse
	b3rlhourlv = rev-range-this-branch --any --branch-number 3 lhourlv --reverse
	b3rlhuurlv = rev-range-this-branch --any --branch-number 3 lhuurlv --reverse
	b3rlgmine = rev-range-this-branch --any --branch-number 3 --one-more lgmine
	b3rlgteam = rev-range-this-branch --any --branch-number 3 --one-more lgteam
	b3rlgby = dashdash-default-command : rev-range-this-branch --any --branch-number 3 --one-more others-command lg :
	b3rlogmine = rev-range-this-branch --any --branch-number 3 --one-more logmine
	b3rlogteam = rev-range-this-branch --any --branch-number 3 --one-more logteam
	b3rlogby = dashdash-default-command : rev-range-this-branch --any --branch-number 3 --one-more others-command log :
	b3rfixup = rev-range-this-branch --any --branch-number 3 fixupselected
	b3rrbfixup = rev-range-this-branch --any --branch-number 3 rbfixupselected
	b3rrbi = rev-range-this-branch --any --branch-number 3 --no-range rebase -i
	b3rbase = rev-range-this-branch --any --branch-number 3 --no-range name-rev --name-only
	b3rwhodid = files-command whodid b3rshowfiles
	b3rwhotouched = rev-range-this-branch --any --branch-number 3 whodid
	b3rwhatdid = rev-range-this-branch --any --branch-number 3 whatdid
	b3ractivity = rev-range-this-branch --any --branch-number 3 activity
	b3ractivitymine = rev-range-this-branch --any --branch-number 3 activitymine
	b3ractivityteam = rev-range-this-branch --any --branch-number 3 activityteam
	b3remaillog = rev-range-this-branch --any --branch-number 3 email-command log
	b3remaillc = rev-range-this-branch --any --branch-number 3 email-command lc
	b3rpull-request = previousbranch-command --branch-number 3 --keep-position pull-request --base BRANCH

	;; bm...: Log variants that cover the differences of the current branch to master.
	bmchurn = master-command --keep-position rev-range --revision MASTER --end-revision HEAD churn
	bmd = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --with-range ... diff
	bmdl = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --with-range ... dl
	bmdt = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --with-range ... difftool
	bmma = master-command --keep-position rev-range --revision MASTER --end-revision HEAD format-patch
	bmfindlog = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last findlog
	bmfindlogv = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last findlogv
	bmfindlg = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last findlg
	bmfindlc = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last findlc
	bmfindlcl = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last findlcl
	bmfindshow = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last findshow
	bmfindlogg = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last findlogg
	bmfindloggv = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last findloggv
	bmfindlgg = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last findlgg
	bmfindlcg = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last findlcg
	bmfindlclg = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last findlclg
	bmtouchedlog = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last touchedlog
	bmtouchedlogv = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last touchedlogv
	bmtouchedlg = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last touchedlg
	bmtouchedlc = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last touchedlc
	bmtouchedlcl = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last touchedlcl
	bmtouchedshow = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last touchedshow
	bmtouchedlogg = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last touchedlogg
	bmtouchedloggv = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last touchedloggv
	bmtouchedlgg = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last touchedlgg
	bmtouchedlcg = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last touchedlcg
	bmtouchedlclg = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last touchedlclg
	bmwherelastlog = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last wherelastlog
	bmwherelastlogv = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last wherelastlogv
	bmwherelastshow = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last wherelastshow
	bmwherelastlogg = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last wherelastlogg
	bmwherelastloggv = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last wherelastloggv
	bmwherelastshowg = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last wherelastshowg
	bmwhereintroducedlog = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last whereintroducedlog
	bmwhereintroducedlogv = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last whereintroducedlogv
	bmwhereintroducedshow = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last whereintroducedshow
	bmwhereintroducedlogg = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last whereintroducedlogg
	bmwhereintroducedloggv = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last whereintroducedloggv
	bmwhereintroducedshowg = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --keep-last whereintroducedshowg
	bmlc = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more-command log lc
	bmlcf = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more-command log lcf --reverse
	bmlcl = master-command --keep-position rev-range --revision MASTER --end-revision HEAD lcl --reverse
	bmlclf = master-command --keep-position rev-range --revision MASTER --end-revision HEAD lclf --reverse
	bmlcmine = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more-command log lcmine --reverse
	bmlcteam = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more-command log lcteam --reverse
	bmlcby = dashdash-default-command : master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more-command log others-command lc --reverse :
	bmlcfmine = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more-command log lcfmine --reverse
	bmlcfteam = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more-command log lcfteam --reverse
	bmlcfby = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more-command log lcfby --reverse
	bmshow = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more-command log show
	bmshoww = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more-command log showw
	bmshowc = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more-command log showc
	bmshowa = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more-command log showa
	bmshowfiles = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --with-range ... showfiles
	bmshowselected = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more-command log showselected
	bmshowlselected = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more-command log showlselected
	bmlog = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more log
	bmlogv = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more logv
	bmglog = master-command --keep-position rev-range --revision MASTER --end-revision HEAD glog
	bmlogg = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more logg
	bmlgg = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more lgg
	bml = master-command --keep-position rev-range --revision MASTER --end-revision HEAD l
	bmlmine = master-command --keep-position rev-range --revision MASTER --end-revision HEAD lmine
	bmlteam = master-command --keep-position rev-range --revision MASTER --end-revision HEAD lteam
	bmlby = dashdash-default-command : master-command --keep-position rev-range --revision MASTER --end-revision HEAD others-command l :
	bmlg = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more lg
	bmlgn = master-command --keep-position rev-range --revision MASTER --end-revision HEAD lg
	bmlgv = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more lgv
	bmlh = master-command --keep-position rev-range --revision MASTER --end-revision HEAD lh --reverse
	bmlhmine = master-command --keep-position rev-range --revision MASTER --end-revision HEAD lhmine --reverse
	bmlhteam = master-command --keep-position rev-range --revision MASTER --end-revision HEAD lhteam --reverse
	bmlhby = dashdash-default-command : master-command --keep-position rev-range --revision MASTER --end-revision HEAD others-command lh --reverse :
	bmlhurl = master-command --keep-position rev-range --revision MASTER --end-revision HEAD lhurl
	bmlhourl = master-command --keep-position rev-range --revision MASTER --end-revision HEAD lhourl --reverse
	bmlhuurl = master-command --keep-position rev-range --revision MASTER --end-revision HEAD lhuurl --reverse
	bmlhourlv = master-command --keep-position rev-range --revision MASTER --end-revision HEAD lhourlv --reverse
	bmlhuurlv = master-command --keep-position rev-range --revision MASTER --end-revision HEAD lhuurlv --reverse
	bmlgmine = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more lgmine
	bmlgteam = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more lgteam
	bmlgby = dashdash-default-command : master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more others-command lg :
	bmlogmine = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more logmine
	bmlogteam = master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more logteam
	bmlogby = dashdash-default-command : master-command --keep-position rev-range --revision MASTER --end-revision HEAD --one-more others-command log :
	bmfixup = master-command --keep-position rev-range --revision MASTER --end-revision HEAD fixupselected
	bmrbfixup = master-command --keep-position rev-range --revision MASTER --end-revision HEAD rbfixupselected
	bmrbi = master-command --keep-position rev-range --revision MASTER --no-range rebase -i
	bmbase = master-command --keep-position rev-range --revision MASTER --no-range name-rev --name-only
	bmwhodid = files-command whodid bnshowfiles
	bmwhotouched = master-command --keep-position rev-range --revision MASTER --end-revision HEAD whodid
	bmwhatdid = master-command --keep-position rev-range --revision MASTER --end-revision HEAD whatdid
	bmactivity = master-command --keep-position rev-range --revision MASTER --end-revision HEAD activity
	bmactivitymine = master-command --keep-position rev-range --revision MASTER --end-revision HEAD activitymine
	bmactivityteam = master-command --keep-position rev-range --revision MASTER --end-revision HEAD activityteam
	bmemaillog = master-command --keep-position rev-range --revision MASTER --end-revision HEAD email-command log
	bmemaillc = master-command --keep-position rev-range --revision MASTER --end-revision HEAD email-command lc
	bmpull-request = master-command --keep-position pull-request --base MASTER

	;; bn...: Log variants that cover the differences of the current branch to the base branch.
	bnchurn = base-command --keep-position rev-range --revision BASE --end-revision HEAD churn
	bnd = base-command --keep-position rev-range --revision BASE --end-revision HEAD --with-range ... diff
	bndl = base-command --keep-position rev-range --revision BASE --end-revision HEAD --with-range ... dl
	bndt = base-command --keep-position rev-range --revision BASE --end-revision HEAD --with-range ... difftool
	bnma = base-command --keep-position rev-range --revision BASE --end-revision HEAD format-patch
	bnfindlog = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last findlog
	bnfindlogv = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last findlogv
	bnfindlg = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last findlg
	bnfindlc = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last findlc
	bnfindlcl = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last findlcl
	bnfindshow = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last findshow
	bnfindlogg = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last findlogg
	bnfindloggv = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last findloggv
	bnfindlgg = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last findlgg
	bnfindlcg = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last findlcg
	bnfindlclg = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last findlclg
	bntouchedlog = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last touchedlog
	bntouchedlogv = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last touchedlogv
	bntouchedlg = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last touchedlg
	bntouchedlc = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last touchedlc
	bntouchedlcl = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last touchedlcl
	bntouchedshow = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last touchedshow
	bntouchedlogg = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last touchedlogg
	bntouchedloggv = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last touchedloggv
	bntouchedlgg = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last touchedlgg
	bntouchedlcg = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last touchedlcg
	bntouchedlclg = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last touchedlclg
	bnwherelastlog = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last wherelastlog
	bnwherelastlogv = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last wherelastlogv
	bnwherelastshow = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last wherelastshow
	bnwherelastlogg = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last wherelastlogg
	bnwherelastloggv = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last wherelastloggv
	bnwherelastshowg = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last wherelastshowg
	bnwhereintroducedlog = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last whereintroducedlog
	bnwhereintroducedlogv = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last whereintroducedlogv
	bnwhereintroducedshow = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last whereintroducedshow
	bnwhereintroducedlogg = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last whereintroducedlogg
	bnwhereintroducedloggv = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last whereintroducedloggv
	bnwhereintroducedshowg = base-command --keep-position rev-range --revision BASE --end-revision HEAD --keep-last whereintroducedshowg
	bnlc = base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more-command log lc
	bnlcf = base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more-command log lcf --reverse
	bnlcl = base-command --keep-position rev-range --revision BASE --end-revision HEAD lcl --reverse
	bnlclf = base-command --keep-position rev-range --revision BASE --end-revision HEAD lclf --reverse
	bnlcmine = base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more-command log lcmine --reverse
	bnlcteam = base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more-command log lcteam --reverse
	bnlcby = dashdash-default-command : base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more-command log others-command lc --reverse :
	bnlcfmine = base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more-command log lcfmine --reverse
	bnlcfteam = base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more-command log lcfteam --reverse
	bnlcfby = base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more-command log lcfby --reverse
	bnshow = base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more-command log show
	bnshoww = base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more-command log showw
	bnshowc = base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more-command log showc
	bnshowa = base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more-command log showa
	bnshowfiles = base-command --keep-position rev-range --revision BASE --end-revision HEAD --with-range ... showfiles
	bnshowselected = base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more-command log showselected
	bnshowlselected = base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more-command log showlselected
	bnlog = base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more log
	bnlogv = base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more logv
	bnglog = base-command --keep-position rev-range --revision BASE --end-revision HEAD glog
	bnlogg = base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more logg
	bnlgg = base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more lgg
	bnl = base-command --keep-position rev-range --revision BASE --end-revision HEAD l
	bnlmine = base-command --keep-position rev-range --revision BASE --end-revision HEAD lmine
	bnlteam = base-command --keep-position rev-range --revision BASE --end-revision HEAD lteam
	bnlby = dashdash-default-command : base-command --keep-position rev-range --revision BASE --end-revision HEAD others-command l :
	bnlg = base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more lg
	bnlgn = base-command --keep-position rev-range --revision BASE --end-revision HEAD lg
	bnlgv = base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more lgv
	bnlh = base-command --keep-position rev-range --revision BASE --end-revision HEAD lh --reverse
	bnlhmine = base-command --keep-position rev-range --revision BASE --end-revision HEAD lhmine --reverse
	bnlhteam = base-command --keep-position rev-range --revision BASE --end-revision HEAD lhteam --reverse
	bnlhby = dashdash-default-command : base-command --keep-position rev-range --revision BASE --end-revision HEAD others-command lh --reverse :
	bnlhurl = base-command --keep-position rev-range --revision BASE --end-revision HEAD lhurl
	bnlhourl = base-command --keep-position rev-range --revision BASE --end-revision HEAD lhourl --reverse
	bnlhuurl = base-command --keep-position rev-range --revision BASE --end-revision HEAD lhuurl --reverse
	bnlhourlv = base-command --keep-position rev-range --revision BASE --end-revision HEAD lhourlv --reverse
	bnlhuurlv = base-command --keep-position rev-range --revision BASE --end-revision HEAD lhuurlv --reverse
	bnlgmine = base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more lgmine
	bnlgteam = base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more lgteam
	bnlgby = dashdash-default-command : base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more others-command lg :
	bnlogmine = base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more logmine
	bnlogteam = base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more logteam
	bnlogby = dashdash-default-command : base-command --keep-position rev-range --revision BASE --end-revision HEAD --one-more others-command log :
	bnfixup = base-command --keep-position rev-range --revision BASE --end-revision HEAD fixupselected
	bnrbfixup = base-command --keep-position rev-range --revision BASE --end-revision HEAD rbfixupselected
	bnrbi = base-command --keep-position rev-range --revision BASE --no-range rebase -i
	bnbase = base-command --keep-position rev-range --revision BASE --no-range name-rev --name-only
	bnwhodid = files-command whodid bnshowfiles
	bnwhotouched = base-command --keep-position rev-range --revision BASE --end-revision HEAD whodid
	bnwhatdid = base-command --keep-position rev-range --revision BASE --end-revision HEAD whatdid
	bnactivity = base-command --keep-position rev-range --revision BASE --end-revision HEAD activity
	bnactivitymine = base-command --keep-position rev-range --revision BASE --end-revision HEAD activitymine
	bnactivityteam = base-command --keep-position rev-range --revision BASE --end-revision HEAD activityteam
	bnemaillog = base-command --keep-position rev-range --revision BASE --end-revision HEAD email-command log
	bnemaillc = base-command --keep-position rev-range --revision BASE --end-revision HEAD email-command lc
	bnpull-request = base-command --keep-position pull-request --base BASE

	;; bl...: Log variants that cover the differences of the current branch to the last checked-out branch (typically the one it was branched off).
	blchurn = rev-range --revision @{-1} --end-revision HEAD churn
	bld = rev-range --revision @{-1} --end-revision HEAD --with-range ... diff
	bldl = rev-range --revision @{-1} --end-revision HEAD --with-range ... dl
	bldt = rev-range --revision @{-1} --end-revision HEAD --with-range ... difftool
	blma = rev-range --revision @{-1} --end-revision HEAD format-patch
	blfindlog = rev-range --revision @{-1} --end-revision HEAD --keep-last findlog
	blfindlogv = rev-range --revision @{-1} --end-revision HEAD --keep-last findlogv
	blfindlg = rev-range --revision @{-1} --end-revision HEAD --keep-last findlg
	blfindlc = rev-range --revision @{-1} --end-revision HEAD --keep-last findlc
	blfindlcl = rev-range --revision @{-1} --end-revision HEAD --keep-last findlcl
	blfindshow = rev-range --revision @{-1} --end-revision HEAD --keep-last findshow
	blfindlogg = rev-range --revision @{-1} --end-revision HEAD --keep-last findlogg
	blfindloggv = rev-range --revision @{-1} --end-revision HEAD --keep-last findloggv
	blfindlgg = rev-range --revision @{-1} --end-revision HEAD --keep-last findlgg
	blfindlcg = rev-range --revision @{-1} --end-revision HEAD --keep-last findlcg
	blfindlclg = rev-range --revision @{-1} --end-revision HEAD --keep-last findlclg
	bltouchedlog = rev-range --revision @{-1} --end-revision HEAD --keep-last touchedlog
	bltouchedlogv = rev-range --revision @{-1} --end-revision HEAD --keep-last touchedlogv
	bltouchedlg = rev-range --revision @{-1} --end-revision HEAD --keep-last touchedlg
	bltouchedlc = rev-range --revision @{-1} --end-revision HEAD --keep-last touchedlc
	bltouchedlcl = rev-range --revision @{-1} --end-revision HEAD --keep-last touchedlcl
	bltouchedshow = rev-range --revision @{-1} --end-revision HEAD --keep-last touchedshow
	bltouchedlogg = rev-range --revision @{-1} --end-revision HEAD --keep-last touchedlogg
	bltouchedloggv = rev-range --revision @{-1} --end-revision HEAD --keep-last touchedloggv
	bltouchedlgg = rev-range --revision @{-1} --end-revision HEAD --keep-last touchedlgg
	bltouchedlcg = rev-range --revision @{-1} --end-revision HEAD --keep-last touchedlcg
	bltouchedlclg = rev-range --revision @{-1} --end-revision HEAD --keep-last touchedlclg
	blwherelastlog = rev-range --revision @{-1} --end-revision HEAD --keep-last wherelastlog
	blwherelastlogv = rev-range --revision @{-1} --end-revision HEAD --keep-last wherelastlogv
	blwherelastshow = rev-range --revision @{-1} --end-revision HEAD --keep-last wherelastshow
	blwherelastlogg = rev-range --revision @{-1} --end-revision HEAD --keep-last wherelastlogg
	blwherelastloggv = rev-range --revision @{-1} --end-revision HEAD --keep-last wherelastloggv
	blwherelastshowg = rev-range --revision @{-1} --end-revision HEAD --keep-last wherelastshowg
	blwhereintroducedlog = rev-range --revision @{-1} --end-revision HEAD --keep-last whereintroducedlog
	blwhereintroducedlogv = rev-range --revision @{-1} --end-revision HEAD --keep-last whereintroducedlogv
	blwhereintroducedshow = rev-range --revision @{-1} --end-revision HEAD --keep-last whereintroducedshow
	blwhereintroducedlogg = rev-range --revision @{-1} --end-revision HEAD --keep-last whereintroducedlogg
	blwhereintroducedloggv = rev-range --revision @{-1} --end-revision HEAD --keep-last whereintroducedloggv
	blwhereintroducedshowg = rev-range --revision @{-1} --end-revision HEAD --keep-last whereintroducedshowg
	bllc = rev-range --revision @{-1} --end-revision HEAD --one-more-command log lc
	bllcf = rev-range --revision @{-1} --end-revision HEAD --one-more-command log lcf --reverse
	bllcl = rev-range --revision @{-1} --end-revision HEAD lcl --reverse
	bllclf = rev-range --revision @{-1} --end-revision HEAD lclf --reverse
	bllcmine = rev-range --revision @{-1} --end-revision HEAD --one-more-command log lcmine --reverse
	bllcteam = rev-range --revision @{-1} --end-revision HEAD --one-more-command log lcteam --reverse
	bllcby = dashdash-default-command : rev-range --revision @{-1} --end-revision HEAD --one-more-command log others-command lc --reverse :
	bllcfmine = rev-range --revision @{-1} --end-revision HEAD --one-more-command log lcfmine --reverse
	bllcfteam = rev-range --revision @{-1} --end-revision HEAD --one-more-command log lcfteam --reverse
	bllcfby = rev-range --revision @{-1} --end-revision HEAD --one-more-command log lcfby --reverse
	blshow = rev-range --revision @{-1} --end-revision HEAD --one-more-command log show
	blshoww = rev-range --revision @{-1} --end-revision HEAD --one-more-command log showw
	blshowc = rev-range --revision @{-1} --end-revision HEAD --one-more-command log showc
	blshowa = rev-range --revision @{-1} --end-revision HEAD --one-more-command log showa
	blshowfiles = rev-range --revision @{-1} --end-revision HEAD --with-range ... showfiles
	blshowselected = rev-range --revision @{-1} --end-revision HEAD --one-more-command log showselected
	blshowlselected = rev-range --revision @{-1} --end-revision HEAD --one-more-command log showlselected
	bllog = rev-range --revision @{-1} --end-revision HEAD --one-more log
	bllogv = rev-range --revision @{-1} --end-revision HEAD --one-more logv
	blglog = rev-range --revision @{-1} --end-revision HEAD glog
	bllogg = rev-range --revision @{-1} --end-revision HEAD --one-more logg
	bllgg = rev-range --revision @{-1} --end-revision HEAD --one-more lgg
	bll = rev-range --revision @{-1} --end-revision HEAD l
	bllmine = rev-range --revision @{-1} --end-revision HEAD lmine
	bllteam = rev-range --revision @{-1} --end-revision HEAD lteam
	bllby = dashdash-default-command : rev-range --revision @{-1} --end-revision HEAD others-command l :
	bllg = rev-range --revision @{-1} --end-revision HEAD --one-more lg
	bllgn = rev-range --revision @{-1} --end-revision HEAD lg
	bllgv = rev-range --revision @{-1} --end-revision HEAD --one-more lgv
	bllh = rev-range --revision @{-1} --end-revision HEAD lh --reverse
	bllhmine = rev-range --revision @{-1} --end-revision HEAD lhmine --reverse
	bllhteam = rev-range --revision @{-1} --end-revision HEAD lhteam --reverse
	bllhby = dashdash-default-command : rev-range --revision @{-1} --end-revision HEAD others-command lh --reverse :
	bllhurl = rev-range --revision @{-1} --end-revision HEAD lhurl
	bllhourl = rev-range --revision @{-1} --end-revision HEAD lhourl --reverse
	bllhuurl = rev-range --revision @{-1} --end-revision HEAD lhuurl --reverse
	bllhourlv = rev-range --revision @{-1} --end-revision HEAD lhourlv --reverse
	bllhuurlv = rev-range --revision @{-1} --end-revision HEAD lhuurlv --reverse
	bllgmine = rev-range --revision @{-1} --end-revision HEAD --one-more lgmine
	bllgteam = rev-range --revision @{-1} --end-revision HEAD --one-more lgteam
	bllgby = dashdash-default-command : rev-range --revision @{-1} --end-revision HEAD --one-more others-command lg :
	bllogmine = rev-range --revision @{-1} --end-revision HEAD --one-more logmine
	bllogteam = rev-range --revision @{-1} --end-revision HEAD --one-more logteam
	bllogby = dashdash-default-command : rev-range --revision @{-1} --end-revision HEAD --one-more others-command log :
	blfixup = rev-range --revision @{-1} --end-revision HEAD fixupselected
	blrbfixup = rev-range --revision @{-1} --end-revision HEAD rbfixupselected
	blrbi = rev-range --revision @{-1} --no-range rebase -i
	blbase = rev-range --revision @{-1} --no-range name-rev --name-only
	blwhodid = files-command whodid blshowfiles
	blwhotouched = rev-range --revision @{-1} --end-revision HEAD whodid
	blwhatdid = rev-range --revision @{-1} --end-revision HEAD whatdid
	blactivity = rev-range --revision @{-1} --end-revision HEAD activity
	blactivitymine = rev-range --revision @{-1} --end-revision HEAD activitymine
	blactivityteam = rev-range --revision @{-1} --end-revision HEAD activityteam
	blemaillog = rev-range --revision @{-1} --end-revision HEAD email-command log
	blemaillc = rev-range --revision @{-1} --end-revision HEAD email-command lc
	blpull-request = previousbranch-command --last-checkout --keep-position pull-request --base BRANCH

	;; b2l...: Log variants that cover the differences of the current branch to the second-last checked out branch.
	b2churn = rev-range --revision @{-2} --end-revision HEAD churn
	b2ld = rev-range --revision @{-2} --end-revision HEAD --with-range ... diff
	b2ldl = rev-range --revision @{-2} --end-revision HEAD --with-range ... dl
	b2ldt = rev-range --revision @{-2} --end-revision HEAD --with-range ... difftool
	b2lma = rev-range --revision @{-2} --end-revision HEAD format-patch
	b2lfindlog = rev-range --revision @{-2} --end-revision HEAD --keep-last findlog
	b2lfindlogv = rev-range --revision @{-2} --end-revision HEAD --keep-last findlogv
	b2lfindlg = rev-range --revision @{-2} --end-revision HEAD --keep-last findlg
	b2lfindlc = rev-range --revision @{-2} --end-revision HEAD --keep-last findlc
	b2lfindlcl = rev-range --revision @{-2} --end-revision HEAD --keep-last findlcl
	b2lfindshow = rev-range --revision @{-2} --end-revision HEAD --keep-last findshow
	b2lfindlogg = rev-range --revision @{-2} --end-revision HEAD --keep-last findlogg
	b2lfindloggv = rev-range --revision @{-2} --end-revision HEAD --keep-last findloggv
	b2lfindlgg = rev-range --revision @{-2} --end-revision HEAD --keep-last findlgg
	b2lfindlcg = rev-range --revision @{-2} --end-revision HEAD --keep-last findlcg
	b2lfindlclg = rev-range --revision @{-2} --end-revision HEAD --keep-last findlclg
	b2ltouchedlog = rev-range --revision @{-2} --end-revision HEAD --keep-last touchedlog
	b2ltouchedlogv = rev-range --revision @{-2} --end-revision HEAD --keep-last touchedlogv
	b2ltouchedlg = rev-range --revision @{-2} --end-revision HEAD --keep-last touchedlg
	b2ltouchedlc = rev-range --revision @{-2} --end-revision HEAD --keep-last touchedlc
	b2ltouchedlcl = rev-range --revision @{-2} --end-revision HEAD --keep-last touchedlcl
	b2ltouchedshow = rev-range --revision @{-2} --end-revision HEAD --keep-last touchedshow
	b2ltouchedlogg = rev-range --revision @{-2} --end-revision HEAD --keep-last touchedlogg
	b2ltouchedloggv = rev-range --revision @{-2} --end-revision HEAD --keep-last touchedloggv
	b2ltouchedlgg = rev-range --revision @{-2} --end-revision HEAD --keep-last touchedlgg
	b2ltouchedlcg = rev-range --revision @{-2} --end-revision HEAD --keep-last touchedlcg
	b2ltouchedlclg = rev-range --revision @{-2} --end-revision HEAD --keep-last touchedlclg
	b2lwherelastlog = rev-range --revision @{-2} --end-revision HEAD --keep-last wherelastlog
	b2lwherelastlogv = rev-range --revision @{-2} --end-revision HEAD --keep-last wherelastlogv
	b2lwherelastshow = rev-range --revision @{-2} --end-revision HEAD --keep-last wherelastshow
	b2lwherelastlogg = rev-range --revision @{-2} --end-revision HEAD --keep-last wherelastlogg
	b2lwherelastloggv = rev-range --revision @{-2} --end-revision HEAD --keep-last wherelastloggv
	b2lwherelastshowg = rev-range --revision @{-2} --end-revision HEAD --keep-last wherelastshowg
	b2lwhereintroducedlog = rev-range --revision @{-2} --end-revision HEAD --keep-last whereintroducedlog
	b2lwhereintroducedlogv = rev-range --revision @{-2} --end-revision HEAD --keep-last whereintroducedlogv
	b2lwhereintroducedshow = rev-range --revision @{-2} --end-revision HEAD --keep-last whereintroducedshow
	b2lwhereintroducedlogg = rev-range --revision @{-2} --end-revision HEAD --keep-last whereintroducedlogg
	b2lwhereintroducedloggv = rev-range --revision @{-2} --end-revision HEAD --keep-last whereintroducedloggv
	b2lwhereintroducedshowg = rev-range --revision @{-2} --end-revision HEAD --keep-last whereintroducedshowg
	b2llc = rev-range --revision @{-2} --end-revision HEAD --one-more-command log lc
	b2llcf = rev-range --revision @{-2} --end-revision HEAD --one-more-command log lcf --reverse
	b2llcl = rev-range --revision @{-2} --end-revision HEAD lcl --reverse
	b2llclf = rev-range --revision @{-2} --end-revision HEAD lclf --reverse
	b2llcmine = rev-range --revision @{-2} --end-revision HEAD --one-more-command log lcmine --reverse
	b2llcteam = rev-range --revision @{-2} --end-revision HEAD --one-more-command log lcteam --reverse
	b2llcby = dashdash-default-command : rev-range --revision @{-2} --end-revision HEAD --one-more-command log others-command lc --reverse :
	b2llcfmine = rev-range --revision @{-2} --end-revision HEAD --one-more-command log lcfmine --reverse
	b2llcfteam = rev-range --revision @{-2} --end-revision HEAD --one-more-command log lcfteam --reverse
	b2llcfby = rev-range --revision @{-2} --end-revision HEAD --one-more-command log lcfby --reverse
	b2lshow = rev-range --revision @{-2} --end-revision HEAD --one-more-command log show
	b2lshoww = rev-range --revision @{-2} --end-revision HEAD --one-more-command log showw
	b2lshowc = rev-range --revision @{-2} --end-revision HEAD --one-more-command log showc
	b2lshowa = rev-range --revision @{-2} --end-revision HEAD --one-more-command log showa
	b2lshowfiles = rev-range --revision @{-2} --end-revision HEAD --with-range ... showfiles
	b2lshowselected = rev-range --revision @{-2} --end-revision HEAD --one-more-command log showselected
	b2lshowlselected = rev-range --revision @{-2} --end-revision HEAD --one-more-command log showlselected
	b2llog = rev-range --revision @{-2} --end-revision HEAD --one-more log
	b2llogv = rev-range --revision @{-2} --end-revision HEAD --one-more logv
	b2lglog = rev-range --revision @{-2} --end-revision HEAD glog
	b2llogg = rev-range --revision @{-2} --end-revision HEAD --one-more logg
	b2llgg = rev-range --revision @{-2} --end-revision HEAD --one-more lgg
	b2ll = rev-range --revision @{-2} --end-revision HEAD l
	b2llmine = rev-range --revision @{-2} --end-revision HEAD lmine
	b2llteam = rev-range --revision @{-2} --end-revision HEAD lteam
	b2llby = dashdash-default-command : rev-range --revision @{-2} --end-revision HEAD others-command l :
	b2llg = rev-range --revision @{-2} --end-revision HEAD --one-more lg
	b2llgn = rev-range --revision @{-2} --end-revision HEAD lg
	b2llgv = rev-range --revision @{-2} --end-revision HEAD --one-more lgv
	b2llh = rev-range --revision @{-2} --end-revision HEAD lh --reverse
	b2llhmine = rev-range --revision @{-2} --end-revision HEAD lhmine --reverse
	b2llhteam = rev-range --revision @{-2} --end-revision HEAD lhteam --reverse
	b2llhby = dashdash-default-command : rev-range --revision @{-2} --end-revision HEAD others-command lh --reverse :
	b2llhurl = rev-range --revision @{-2} --end-revision HEAD lhurl
	b2llhourl = rev-range --revision @{-2} --end-revision HEAD lhourl --reverse
	b2llhuurl = rev-range --revision @{-2} --end-revision HEAD lhuurl --reverse
	b2llhourlv = rev-range --revision @{-2} --end-revision HEAD lhourlv --reverse
	b2llhuurlv = rev-range --revision @{-2} --end-revision HEAD lhuurlv --reverse
	b2llgmine = rev-range --revision @{-2} --end-revision HEAD --one-more lgmine
	b2llgteam = rev-range --revision @{-2} --end-revision HEAD --one-more lgteam
	b2llgby = dashdash-default-command : rev-range --revision @{-2} --end-revision HEAD --one-more others-command lg :
	b2llogmine = rev-range --revision @{-2} --end-revision HEAD --one-more logmine
	b2llogteam = rev-range --revision @{-2} --end-revision HEAD --one-more logteam
	b2llogby = dashdash-default-command : rev-range --revision @{-2} --end-revision HEAD --one-more others-command log :
	b2lfixup = rev-range --revision @{-2} --end-revision HEAD fixupselected
	b2lrbfixup = rev-range --revision @{-2} --end-revision HEAD rbfixupselected
	b2lrbi = rev-range --revision @{-2} --no-range rebase -i
	b2lbase = rev-range --revision @{-2} --no-range name-rev --name-only
	b2lwhodid = files-command whodid b2lshowfiles
	b2lwhotouched = rev-range --revision @{-2} --end-revision HEAD whodid
	b2lwhatdid = rev-range --revision @{-2} --end-revision HEAD whatdid
	b2lactivity = rev-range --revision @{-2} --end-revision HEAD activity
	b2lactivitymine = rev-range --revision @{-2} --end-revision HEAD activitymine
	b2lactivityteam = rev-range --revision @{-2} --end-revision HEAD activityteam
	b2lemaillog = rev-range --revision @{-2} --end-revision HEAD email-command log
	b2lemaillc = rev-range --revision @{-2} --end-revision HEAD email-command lc
	b2lpull-request = previousbranch-command --last-checkout --branch-number 2 --keep-position pull-request --base BRANCH

	;; bp...: Log variants that cover the differences of the current branch to where the tip of the branch was previously. Useful to see the changes that were just pulled.
	bpchurn = rev-range --revision @{1} --end-revision HEAD churn
	bpd = rev-range --revision @{1} --end-revision HEAD --with-range ... diff
	bpdl = rev-range --revision @{1} --end-revision HEAD --with-range ... dl
	bpdt = rev-range --revision @{1} --end-revision HEAD --with-range ... difftool
	bpma = rev-range --revision @{1} --end-revision HEAD format-patch
	bpfindlog = rev-range --revision @{1} --end-revision HEAD --keep-last findlog
	bpfindlogv = rev-range --revision @{1} --end-revision HEAD --keep-last findlogv
	bpfindlg = rev-range --revision @{1} --end-revision HEAD --keep-last findlg
	bpfindlc = rev-range --revision @{1} --end-revision HEAD --keep-last findlc
	bpfindlcl = rev-range --revision @{1} --end-revision HEAD --keep-last findlcl
	bpfindshow = rev-range --revision @{1} --end-revision HEAD --keep-last findshow
	bpfindlogg = rev-range --revision @{1} --end-revision HEAD --keep-last findlogg
	bpfindloggv = rev-range --revision @{1} --end-revision HEAD --keep-last findloggv
	bpfindlgg = rev-range --revision @{1} --end-revision HEAD --keep-last findlgg
	bpfindlcg = rev-range --revision @{1} --end-revision HEAD --keep-last findlcg
	bpfindlclg = rev-range --revision @{1} --end-revision HEAD --keep-last findlclg
	bptouchedlog = rev-range --revision @{1} --end-revision HEAD --keep-last touchedlog
	bptouchedlogv = rev-range --revision @{1} --end-revision HEAD --keep-last touchedlogv
	bptouchedlg = rev-range --revision @{1} --end-revision HEAD --keep-last touchedlg
	bptouchedlc = rev-range --revision @{1} --end-revision HEAD --keep-last touchedlc
	bptouchedlcl = rev-range --revision @{1} --end-revision HEAD --keep-last touchedlcl
	bptouchedshow = rev-range --revision @{1} --end-revision HEAD --keep-last touchedshow
	bptouchedlogg = rev-range --revision @{1} --end-revision HEAD --keep-last touchedlogg
	bptouchedloggv = rev-range --revision @{1} --end-revision HEAD --keep-last touchedloggv
	bptouchedlgg = rev-range --revision @{1} --end-revision HEAD --keep-last touchedlgg
	bptouchedlcg = rev-range --revision @{1} --end-revision HEAD --keep-last touchedlcg
	bptouchedlclg = rev-range --revision @{1} --end-revision HEAD --keep-last touchedlclg
	bpwherelastlog = rev-range --revision @{1} --end-revision HEAD --keep-last wherelastlog
	bpwherelastlogv = rev-range --revision @{1} --end-revision HEAD --keep-last wherelastlogv
	bpwherelastshow = rev-range --revision @{1} --end-revision HEAD --keep-last wherelastshow
	bpwherelastlogg = rev-range --revision @{1} --end-revision HEAD --keep-last wherelastlogg
	bpwherelastloggv = rev-range --revision @{1} --end-revision HEAD --keep-last wherelastloggv
	bpwherelastshowg = rev-range --revision @{1} --end-revision HEAD --keep-last wherelastshowg
	bpwhereintroducedlog = rev-range --revision @{1} --end-revision HEAD --keep-last whereintroducedlog
	bpwhereintroducedlogv = rev-range --revision @{1} --end-revision HEAD --keep-last whereintroducedlogv
	bpwhereintroducedshow = rev-range --revision @{1} --end-revision HEAD --keep-last whereintroducedshow
	bpwhereintroducedlogg = rev-range --revision @{1} --end-revision HEAD --keep-last whereintroducedlogg
	bpwhereintroducedloggv = rev-range --revision @{1} --end-revision HEAD --keep-last whereintroducedloggv
	bpwhereintroducedshowg = rev-range --revision @{1} --end-revision HEAD --keep-last whereintroducedshowg
	bplc = rev-range --revision @{1} --end-revision HEAD --one-more-command log lc
	bplcf = rev-range --revision @{1} --end-revision HEAD --one-more-command log lcf --reverse
	bplcl = rev-range --revision @{1} --end-revision HEAD lcl --reverse
	bplclf = rev-range --revision @{1} --end-revision HEAD lclf --reverse
	bplcmine = rev-range --revision @{1} --end-revision HEAD --one-more-command log lcmine --reverse
	bplcteam = rev-range --revision @{1} --end-revision HEAD --one-more-command log lcteam --reverse
	bplcby = dashdash-default-command : rev-range --revision @{1} --end-revision HEAD --one-more-command log others-command lc --reverse :
	bplcfmine = rev-range --revision @{1} --end-revision HEAD --one-more-command log lcfmine --reverse
	bplcfteam = rev-range --revision @{1} --end-revision HEAD --one-more-command log lcfteam --reverse
	bplcfby = rev-range --revision @{1} --end-revision HEAD --one-more-command log lcfby --reverse
	bpshow = rev-range --revision @{1} --end-revision HEAD --one-more-command log show
	bpshoww = rev-range --revision @{1} --end-revision HEAD --one-more-command log showw
	bpshowc = rev-range --revision @{1} --end-revision HEAD --one-more-command log showc
	bpshowa = rev-range --revision @{1} --end-revision HEAD --one-more-command log showa
	bpshowfiles = rev-range --revision @{1} --end-revision HEAD --with-range ... showfiles
	bpshowselected = rev-range --revision @{1} --end-revision HEAD --one-more-command log showselected
	bpshowlselected = rev-range --revision @{1} --end-revision HEAD --one-more-command log showlselected
	bplog = rev-range --revision @{1} --end-revision HEAD --one-more log
	bplogv = rev-range --revision @{1} --end-revision HEAD --one-more logv
	bpglog = rev-range --revision @{1} --end-revision HEAD glog
	bplogg = rev-range --revision @{1} --end-revision HEAD --one-more logg
	bplgg = rev-range --revision @{1} --end-revision HEAD --one-more lgg
	bpl = rev-range --revision @{1} --end-revision HEAD l
	bplmine = rev-range --revision @{1} --end-revision HEAD lmine
	bplteam = rev-range --revision @{1} --end-revision HEAD lteam
	bplby = dashdash-default-command : rev-range --revision @{1} --end-revision HEAD others-command l :
	bplg = rev-range --revision @{1} --end-revision HEAD --one-more lg
	bplgn = rev-range --revision @{1} --end-revision HEAD lg
	bplgv = rev-range --revision @{1} --end-revision HEAD --one-more lgv
	bplh = rev-range --revision @{1} --end-revision HEAD lh --reverse
	bplhmine = rev-range --revision @{1} --end-revision HEAD lhmine --reverse
	bplhteam = rev-range --revision @{1} --end-revision HEAD lhteam --reverse
	bplhby = dashdash-default-command : rev-range --revision @{1} --end-revision HEAD others-command lh --reverse :
	bplhurl = rev-range --revision @{1} --end-revision HEAD lhurl
	bplhourl = rev-range --revision @{1} --end-revision HEAD lhourl --reverse
	bplhuurl = rev-range --revision @{1} --end-revision HEAD lhuurl --reverse
	bplhourlv = rev-range --revision @{1} --end-revision HEAD lhourlv --reverse
	bplhuurlv = rev-range --revision @{1} --end-revision HEAD lhuurlv --reverse
	bplgmine = rev-range --revision @{1} --end-revision HEAD --one-more lgmine
	bplgteam = rev-range --revision @{1} --end-revision HEAD --one-more lgteam
	bplgby = dashdash-default-command : rev-range --revision @{1} --end-revision HEAD --one-more others-command lg :
	bplogmine = rev-range --revision @{1} --end-revision HEAD --one-more logmine
	bplogteam = rev-range --revision @{1} --end-revision HEAD --one-more logteam
	bplogby = dashdash-default-command : rev-range --revision @{1} --end-revision HEAD --one-more others-command log :
	bpfixup = rev-range --revision @{1} --end-revision HEAD fixupselected
	bprbfixup = rev-range --revision @{1} --end-revision HEAD rbfixupselected
	bprbi = rev-range --revision @{1} --no-range --one-more-command ^ rebase -i
	bpbase = rev-range --revision @{1} --no-range name-rev --name-only
	bpwhodid = files-command whodid bpshowfiles
	bpwhotouched = rev-range --revision @{1} --end-revision HEAD whodid
	bpwhatdid = rev-range --revision @{1} --end-revision HEAD whatdid
	bpactivity = rev-range --revision @{1} --end-revision HEAD activity
	bpactivitymine = rev-range --revision @{1} --end-revision HEAD activitymine
	bpactivityteam = rev-range --revision @{1} --end-revision HEAD activityteam
	bpemaillog = rev-range --revision @{1} --end-revision HEAD email-command log
	bpemaillc = rev-range --revision @{1} --end-revision HEAD email-command lc
	bppull-request = previousbranch-command --previous --keep-position pull-request --base BRANCH

	;; b2p...: Log variants that cover the differences of the current branch to where the tip of the branch was second-last.
	b2pchurn = rev-range --revision @{2} --end-revision HEAD churn
	b2pd = rev-range --revision @{2} --end-revision HEAD --with-range ... diff
	b2pdl = rev-range --revision @{2} --end-revision HEAD --with-range ... dl
	b2pdt = rev-range --revision @{2} --end-revision HEAD --with-range ... difftool
	b2pma = rev-range --revision @{2} --end-revision HEAD format-patch
	b2pfindlog = rev-range --revision @{2} --end-revision HEAD --keep-last findlog
	b2pfindlogv = rev-range --revision @{2} --end-revision HEAD --keep-last findlogv
	b2pfindlg = rev-range --revision @{2} --end-revision HEAD --keep-last findlg
	b2pfindlc = rev-range --revision @{2} --end-revision HEAD --keep-last findlc
	b2pfindlcl = rev-range --revision @{2} --end-revision HEAD --keep-last findlcl
	b2pfindshow = rev-range --revision @{2} --end-revision HEAD --keep-last findshow
	b2pfindlogg = rev-range --revision @{2} --end-revision HEAD --keep-last findlogg
	b2pfindloggv = rev-range --revision @{2} --end-revision HEAD --keep-last findloggv
	b2pfindlgg = rev-range --revision @{2} --end-revision HEAD --keep-last findlgg
	b2pfindlcg = rev-range --revision @{2} --end-revision HEAD --keep-last findlcg
	b2pfindlclg = rev-range --revision @{2} --end-revision HEAD --keep-last findlclg
	b2ptouchedlog = rev-range --revision @{2} --end-revision HEAD --keep-last touchedlog
	b2ptouchedlogv = rev-range --revision @{2} --end-revision HEAD --keep-last touchedlogv
	b2ptouchedlg = rev-range --revision @{2} --end-revision HEAD --keep-last touchedlg
	b2ptouchedlc = rev-range --revision @{2} --end-revision HEAD --keep-last touchedlc
	b2ptouchedlcl = rev-range --revision @{2} --end-revision HEAD --keep-last touchedlcl
	b2ptouchedshow = rev-range --revision @{2} --end-revision HEAD --keep-last touchedshow
	b2ptouchedlogg = rev-range --revision @{2} --end-revision HEAD --keep-last touchedlogg
	b2ptouchedloggv = rev-range --revision @{2} --end-revision HEAD --keep-last touchedloggv
	b2ptouchedlgg = rev-range --revision @{2} --end-revision HEAD --keep-last touchedlgg
	b2ptouchedlcg = rev-range --revision @{2} --end-revision HEAD --keep-last touchedlcg
	b2ptouchedlclg = rev-range --revision @{2} --end-revision HEAD --keep-last touchedlclg
	b2pwherelastlog = rev-range --revision @{2} --end-revision HEAD --keep-last wherelastlog
	b2pwherelastlogv = rev-range --revision @{2} --end-revision HEAD --keep-last wherelastlogv
	b2pwherelastshow = rev-range --revision @{2} --end-revision HEAD --keep-last wherelastshow
	b2pwherelastlogg = rev-range --revision @{2} --end-revision HEAD --keep-last wherelastlogg
	b2pwherelastloggv = rev-range --revision @{2} --end-revision HEAD --keep-last wherelastloggv
	b2pwherelastshowg = rev-range --revision @{2} --end-revision HEAD --keep-last wherelastshowg
	b2pwhereintroducedlog = rev-range --revision @{2} --end-revision HEAD --keep-last whereintroducedlog
	b2pwhereintroducedlogv = rev-range --revision @{2} --end-revision HEAD --keep-last whereintroducedlogv
	b2pwhereintroducedshow = rev-range --revision @{2} --end-revision HEAD --keep-last whereintroducedshow
	b2pwhereintroducedlogg = rev-range --revision @{2} --end-revision HEAD --keep-last whereintroducedlogg
	b2pwhereintroducedloggv = rev-range --revision @{2} --end-revision HEAD --keep-last whereintroducedloggv
	b2pwhereintroducedshowg = rev-range --revision @{2} --end-revision HEAD --keep-last whereintroducedshowg
	b2plc = rev-range --revision @{2} --end-revision HEAD --one-more-command log lc
	b2plcf = rev-range --revision @{2} --end-revision HEAD --one-more-command log lcf --reverse
	b2plcl = rev-range --revision @{2} --end-revision HEAD lcl --reverse
	b2plclf = rev-range --revision @{2} --end-revision HEAD lclf --reverse
	b2plcmine = rev-range --revision @{2} --end-revision HEAD --one-more-command log lcmine --reverse
	b2plcteam = rev-range --revision @{2} --end-revision HEAD --one-more-command log lcteam --reverse
	b2plcby = dashdash-default-command : rev-range --revision @{2} --end-revision HEAD --one-more-command log others-command lc --reverse :
	b2plcfmine = rev-range --revision @{2} --end-revision HEAD --one-more-command log lcfmine --reverse
	b2plcfteam = rev-range --revision @{2} --end-revision HEAD --one-more-command log lcfteam --reverse
	b2plcfby = rev-range --revision @{2} --end-revision HEAD --one-more-command log lcfby --reverse
	b2pshow = rev-range --revision @{2} --end-revision HEAD --one-more-command log show
	b2pshoww = rev-range --revision @{2} --end-revision HEAD --one-more-command log showw
	b2pshowc = rev-range --revision @{2} --end-revision HEAD --one-more-command log showc
	b2pshowa = rev-range --revision @{2} --end-revision HEAD --one-more-command log showa
	b2pshowfiles = rev-range --revision @{2} --end-revision HEAD --with-range ... showfiles
	b2pshowselected = rev-range --revision @{2} --end-revision HEAD --one-more-command log showselected
	b2pshowlselected = rev-range --revision @{2} --end-revision HEAD --one-more-command log showlselected
	b2plog = rev-range --revision @{2} --end-revision HEAD --one-more log
	b2plogv = rev-range --revision @{2} --end-revision HEAD --one-more logv
	b2pglog = rev-range --revision @{2} --end-revision HEAD glog
	b2plogg = rev-range --revision @{2} --end-revision HEAD --one-more logg
	b2plgg = rev-range --revision @{2} --end-revision HEAD --one-more lgg
	b2pl = rev-range --revision @{2} --end-revision HEAD l
	b2plmine = rev-range --revision @{2} --end-revision HEAD lmine
	b2plteam = rev-range --revision @{2} --end-revision HEAD lteam
	b2plby = dashdash-default-command : rev-range --revision @{2} --end-revision HEAD others-command l :
	b2plg = rev-range --revision @{2} --end-revision HEAD --one-more lg
	b2plgn = rev-range --revision @{2} --end-revision HEAD lg
	b2plgv = rev-range --revision @{2} --end-revision HEAD --one-more lgv
	b2plh = rev-range --revision @{2} --end-revision HEAD lh --reverse
	b2plhmine = rev-range --revision @{2} --end-revision HEAD lhmine --reverse
	b2plhteam = rev-range --revision @{2} --end-revision HEAD lhteam --reverse
	b2plhby = dashdash-default-command : rev-range --revision @{2} --end-revision HEAD others-command lh --reverse :
	b2plhurl = rev-range --revision @{2} --end-revision HEAD lhurl
	b2plhourl = rev-range --revision @{2} --end-revision HEAD lhourl --reverse
	b2plhuurl = rev-range --revision @{2} --end-revision HEAD lhuurl --reverse
	b2plhourlv = rev-range --revision @{2} --end-revision HEAD lhourlv --reverse
	b2plhuurlv = rev-range --revision @{2} --end-revision HEAD lhuurlv --reverse
	b2plgmine = rev-range --revision @{2} --end-revision HEAD --one-more lgmine
	b2plgteam = rev-range --revision @{2} --end-revision HEAD --one-more lgteam
	b2plgby = dashdash-default-command : rev-range --revision @{2} --end-revision HEAD --one-more others-command lg :
	b2plogmine = rev-range --revision @{2} --end-revision HEAD --one-more logmine
	b2plogteam = rev-range --revision @{2} --end-revision HEAD --one-more logteam
	b2plogby = dashdash-default-command : rev-range --revision @{2} --end-revision HEAD --one-more others-command log :
	b2pfixup = rev-range --revision @{2} --end-revision HEAD fixupselected
	b2prbfixup = rev-range --revision @{2} --end-revision HEAD rbfixupselected
	b2prbi = rev-range --revision @{2} --no-range --one-more-command ^ rebase -i
	b2pbase = rev-range --revision @{2} --no-range name-rev --name-only
	b2pwhodid = files-command whodid b2pshowfiles
	b2pwhotouched = rev-range --revision @{2} --end-revision HEAD whodid
	b2pwhatdid = rev-range --revision @{2} --end-revision HEAD whatdid
	b2pactivity = rev-range --revision @{2} --end-revision HEAD activity
	b2pactivitymine = rev-range --revision @{2} --end-revision HEAD activitymine
	b2pactivityteam = rev-range --revision @{2} --end-revision HEAD activityteam
	b2pemaillog = rev-range --revision @{2} --end-revision HEAD email-command log
	b2pemaillc = rev-range --revision @{2} --end-revision HEAD email-command lc
	b2ppull-request = previousbranch-command --previous --branch-number 2 --keep-position pull-request --base BRANCH

	;; out...: Log variants that cover the differences that already exist on the current branch, but not yet in the corresponding remote branch.
	outchurn = rev-range-outgoing '' churn
	outd = rev-range-outgoing '' --with-range ... diff
	outdl = rev-range-outgoing '' --with-range ... dl
	outdt = rev-range-outgoing '' --with-range ... difftool
	outma = rev-range-outgoing '' format-patch
	outfindlog = rev-range-outgoing '' --keep-last findlog
	outfindlogv = rev-range-outgoing '' --keep-last findlogv
	outfindlg = rev-range-outgoing '' --keep-last findlg
	outfindlc = rev-range-outgoing '' --keep-last findlc
	outfindlcl = rev-range-outgoing '' --keep-last findlcl
	outfindshow = rev-range-outgoing '' --keep-last findshow
	outfindlogg = rev-range-outgoing '' --keep-last findlogg
	outfindloggv = rev-range-outgoing '' --keep-last findloggv
	outfindlgg = rev-range-outgoing '' --keep-last findlgg
	outfindlcg = rev-range-outgoing '' --keep-last findlcg
	outfindlclg = rev-range-outgoing '' --keep-last findlclg
	outtouchedlog = rev-range-outgoing '' --keep-last touchedlog
	outtouchedlogv = rev-range-outgoing '' --keep-last touchedlogv
	outtouchedlg = rev-range-outgoing '' --keep-last touchedlg
	outtouchedlc = rev-range-outgoing '' --keep-last touchedlc
	outtouchedlcl = rev-range-outgoing '' --keep-last touchedlcl
	outtouchedshow = rev-range-outgoing '' --keep-last touchedshow
	outtouchedlogg = rev-range-outgoing '' --keep-last touchedlogg
	outtouchedloggv = rev-range-outgoing '' --keep-last touchedloggv
	outtouchedlgg = rev-range-outgoing '' --keep-last touchedlgg
	outtouchedlcg = rev-range-outgoing '' --keep-last touchedlcg
	outtouchedlclg = rev-range-outgoing '' --keep-last touchedlclg
	outwherelastlog = rev-range-outgoing '' --keep-last wherelastlog
	outwherelastlogv = rev-range-outgoing '' --keep-last wherelastlogv
	outwherelastshow = rev-range-outgoing '' --keep-last wherelastshow
	outwherelastlogg = rev-range-outgoing '' --keep-last wherelastlogg
	outwherelastloggv = rev-range-outgoing '' --keep-last wherelastloggv
	outwherelastshowg = rev-range-outgoing '' --keep-last wherelastshowg
	outwhereintroducedlog = rev-range-outgoing '' --keep-last whereintroducedlog
	outwhereintroducedlogv = rev-range-outgoing '' --keep-last whereintroducedlogv
	outwhereintroducedshow = rev-range-outgoing '' --keep-last whereintroducedshow
	outwhereintroducedlogg = rev-range-outgoing '' --keep-last whereintroducedlogg
	outwhereintroducedloggv = rev-range-outgoing '' --keep-last whereintroducedloggv
	outwhereintroducedshowg = rev-range-outgoing '' --keep-last whereintroducedshowg
	outlc = rev-range-outgoing '' --one-more-command log lc
	outlcf = rev-range-outgoing '' --one-more-command log lcf --reverse
	outlcl = rev-range-outgoing '' lcl --reverse
	outlclf = rev-range-outgoing '' lclf --reverse
	outlcmine = rev-range-outgoing '' --one-more-command log lcmine --reverse
	outlcteam = rev-range-outgoing '' --one-more-command log lcteam --reverse
	outlcby = dashdash-default-command : rev-range-outgoing '' --one-more-command log others-command lc --reverse :
	outlcfmine = rev-range-outgoing '' --one-more-command log lcfmine --reverse
	outlcfteam = rev-range-outgoing '' --one-more-command log lcfteam --reverse
	outlcfby = rev-range-outgoing '' --one-more-command log lcfby --reverse
	outshow = rev-range-outgoing '' --one-more-command log show
	outshoww = rev-range-outgoing '' --one-more-command log showw
	outshowc = rev-range-outgoing '' --one-more-command log showc
	outshowa = rev-range-outgoing '' --one-more-command log showa
	outshowfiles = rev-range-outgoing '' --with-range ... showfiles
	outshowselected = rev-range-outgoing '' --one-more-command log showselected
	outshowlselected = rev-range-outgoing '' --one-more-command log showlselected
	outlog = rev-range-outgoing '' --one-more log
	outlogv = rev-range-outgoing '' --one-more logv
	outglog = rev-range-outgoing '' glog
	outlogg = rev-range-outgoing '' --one-more logg
	outlgg = rev-range-outgoing '' --one-more lgg
	outl = rev-range-outgoing '' l
	outlmine = rev-range-outgoing '' lmine
	outlteam = rev-range-outgoing '' lteam
	outlby = dashdash-default-command : rev-range-outgoing '' others-command l :
	outlg = rev-range-outgoing '' --one-more lg
	outlgn = rev-range-outgoing '' lg
	outlgv = rev-range-outgoing '' --one-more lgv
	outlh = rev-range-outgoing '' lh --reverse
	outlhmine = rev-range-outgoing '' lhmine --reverse
	outlhteam = rev-range-outgoing '' lhteam --reverse
	outlhby = dashdash-default-command : rev-range-outgoing '' others-command lh --reverse :
	outlhurl = rev-range-outgoing '' lhurl
	outlhourl = rev-range-outgoing '' lhourl --reverse
	outlhuurl = rev-range-outgoing '' lhuurl --reverse
	outlhourlv = rev-range-outgoing '' lhourlv --reverse
	outlhuurlv = rev-range-outgoing '' lhuurlv --reverse
	outlgmine = rev-range-outgoing '' --one-more lgmine
	outlgteam = rev-range-outgoing '' --one-more lgteam
	outlgby = dashdash-default-command : rev-range-outgoing '' --one-more others-command lg :
	outlogmine = rev-range-outgoing '' --one-more logmine
	outlogteam = rev-range-outgoing '' --one-more logteam
	outlogby = dashdash-default-command : rev-range-outgoing '' --one-more others-command log :
	outfixup = rev-range-outgoing '' fixupselected
	outrbfixup = rev-range-outgoing '' rbfixupselected
	outrbi = trbi
	outbase = tracks
	outwhodid = files-command whodid outshowfiles
	outwhotouched = rev-range-outgoing '' whodid
	outwhatdid = rev-range-outgoing '' whatdid
	outactivity = rev-range-outgoing '' activity
	outactivitymine = rev-range-outgoing '' activitymine
	outactivityteam = rev-range-outgoing '' activityteam
	outemaillog = rev-range-outgoing '' email-command log
	outemaillc = rev-range-outgoing '' email-command lc
	; outpull-request likely does not cover a branch

	;; in...: Log variants that cover the differences that already exist in remote on the current branch, but not yet in the local branch.
	inchurn = rev-range-incoming '' churn
	ind = rev-range-incoming '' --with-range ... diff
	indl = rev-range-incoming '' --with-range ... dl
	indt = rev-range-incoming '' --with-range ... difftool
	inma = rev-range-incoming '' format-patch
	infindlog = rev-range-incoming '' --keep-last findlog
	infindlogv = rev-range-incoming '' --keep-last findlogv
	infindlg = rev-range-incoming '' --keep-last findlg
	infindlc = rev-range-incoming '' --keep-last findlc
	infindlcl = rev-range-incoming '' --keep-last findlcl
	infindshow = rev-range-incoming '' --keep-last findshow
	infindlogg = rev-range-incoming '' --keep-last findlogg
	infindloggv = rev-range-incoming '' --keep-last findloggv
	infindlgg = rev-range-incoming '' --keep-last findlgg
	infindlcg = rev-range-incoming '' --keep-last findlcg
	infindlclg = rev-range-incoming '' --keep-last findlclg
	intouchedlog = rev-range-incoming '' --keep-last touchedlog
	intouchedlogv = rev-range-incoming '' --keep-last touchedlogv
	intouchedlg = rev-range-incoming '' --keep-last touchedlg
	intouchedlc = rev-range-incoming '' --keep-last touchedlc
	intouchedlcl = rev-range-incoming '' --keep-last touchedlcl
	intouchedshow = rev-range-incoming '' --keep-last touchedshow
	intouchedlogg = rev-range-incoming '' --keep-last touchedlogg
	intouchedloggv = rev-range-incoming '' --keep-last touchedloggv
	intouchedlgg = rev-range-incoming '' --keep-last touchedlgg
	intouchedlcg = rev-range-incoming '' --keep-last touchedlcg
	intouchedlclg = rev-range-incoming '' --keep-last touchedlclg
	inwherelastlog = rev-range-incoming '' --keep-last wherelastlog
	inwherelastlogv = rev-range-incoming '' --keep-last wherelastlogv
	inwherelastshow = rev-range-incoming '' --keep-last wherelastshow
	inwherelastlogg = rev-range-incoming '' --keep-last wherelastlogg
	inwherelastloggv = rev-range-incoming '' --keep-last wherelastloggv
	inwherelastshowg = rev-range-incoming '' --keep-last wherelastshowg
	inwhereintroducedlog = rev-range-incoming '' --keep-last whereintroducedlog
	inwhereintroducedlogv = rev-range-incoming '' --keep-last whereintroducedlogv
	inwhereintroducedshow = rev-range-incoming '' --keep-last whereintroducedshow
	inwhereintroducedlogg = rev-range-incoming '' --keep-last whereintroducedlogg
	inwhereintroducedloggv = rev-range-incoming '' --keep-last whereintroducedloggv
	inwhereintroducedshowg = rev-range-incoming '' --keep-last whereintroducedshowg
	inlc = rev-range-incoming '' --one-more-command log lc
	inlcf = rev-range-incoming '' --one-more-command log lcf --reverse
	inlcl = rev-range-incoming '' lcl --reverse
	inlclf = rev-range-incoming '' lclf --reverse
	inlcmine = rev-range-incoming '' --one-more-command log lcmine --reverse
	inlcteam = rev-range-incoming '' --one-more-command log lcteam --reverse
	inlcby = dashdash-default-command : rev-range-incoming '' --one-more-command log others-command lc --reverse :
	inlcfmine = rev-range-incoming '' --one-more-command log lcfmine --reverse
	inlcfteam = rev-range-incoming '' --one-more-command log lcfteam --reverse
	inlcfby = rev-range-incoming '' --one-more-command log lcfby --reverse
	inshow = rev-range-incoming '' --one-more-command log show
	inshoww = rev-range-incoming '' --one-more-command log showw
	inshowc = rev-range-incoming '' --one-more-command log showc
	inshowa = rev-range-incoming '' --one-more-command log showa
	inshowfiles = rev-range-incoming '' --with-range ... showfiles
	inshowselected = rev-range-incoming '' --one-more-command log showselected
	inshowlselected = rev-range-incoming '' --one-more-command log showlselected
	inlog = rev-range-incoming '' --one-more log
	inlogv = rev-range-incoming '' --one-more logv
	inglog = rev-range-incoming '' glog
	inlogg = rev-range-incoming '' --one-more logg
	inlgg = rev-range-incoming '' --one-more lgg
	inl = rev-range-incoming '' l
	inlmine = rev-range-incoming '' lmine
	inlteam = rev-range-incoming '' lteam
	inlby = dashdash-default-command : rev-range-incoming '' others-command l :
	inlg = rev-range-incoming '' --one-more lg
	inlgn = rev-range-incoming '' lg
	inlgv = rev-range-incoming '' --one-more lgv
	inlh = rev-range-incoming '' lh --reverse
	inlhmine = rev-range-incoming '' lhmine --reverse
	inlhteam = rev-range-incoming '' lhteam --reverse
	inlhby = dashdash-default-command : rev-range-incoming '' others-command lh --reverse :
	inlhurl = rev-range-incoming '' lhurl
	inlhourl = rev-range-incoming '' lhourl --reverse
	inlhuurl = rev-range-incoming '' lhuurl --reverse
	inlhourlv = rev-range-incoming '' lhourlv --reverse
	inlhuurlv = rev-range-incoming '' lhuurlv --reverse
	inlgmine = rev-range-incoming '' --one-more lgmine
	inlgteam = rev-range-incoming '' --one-more lgteam
	inlgby = dashdash-default-command : rev-range-incoming '' --one-more others-command lg :
	inlogmine = rev-range-incoming '' --one-more logmine
	inlogteam = rev-range-incoming '' --one-more logteam
	inlogby = dashdash-default-command : rev-range-incoming '' --one-more others-command log :
	; inrbfixup doesn't make sense; you cannot rebase stuff in a remote branch.
	; inrbi doesn't make sense; you cannot rebase stuff in a remote branch.
	inbase = tracks
	inwhodid = files-command whodid inshowfiles
	inwhotouched = rev-range-incoming '' whodid
	inwhatdid = rev-range-incoming '' whatdid
	inactivity = rev-range-incoming '' activity
	inactivitymine = rev-range-incoming '' activitymine
	inactivityteam = rev-range-incoming '' activityteam
	inemaillog = rev-range-incoming '' email-command log
	inemaillc = rev-range-incoming '' email-command lc
	; inpull-request likely does not cover a branch

	;; oout...: Log variants that cover the differences that already exist on the current branch, but not yet in the corresponding origin branch.
	ooutchurn = rev-range-outgoing origin churn
	ooutd = rev-range-outgoing origin --with-range ... diff
	ooutdl = rev-range-outgoing origin --with-range ... dl
	ooutdt = rev-range-outgoing origin --with-range ... difftool
	ooutma = rev-range-outgoing origin format-patch
	ooutfindlog = rev-range-outgoing origin --keep-last findlog
	ooutfindlogv = rev-range-outgoing origin --keep-last findlogv
	ooutfindlg = rev-range-outgoing origin --keep-last findlg
	ooutfindlc = rev-range-outgoing origin --keep-last findlc
	ooutfindlcl = rev-range-outgoing origin --keep-last findlcl
	ooutfindshow = rev-range-outgoing origin --keep-last findshow
	ooutfindlogg = rev-range-outgoing origin --keep-last findlogg
	ooutfindloggv = rev-range-outgoing origin --keep-last findloggv
	ooutfindlgg = rev-range-outgoing origin --keep-last findlgg
	ooutfindlcg = rev-range-outgoing origin --keep-last findlcg
	ooutfindlclg = rev-range-outgoing origin --keep-last findlclg
	oouttouchedlog = rev-range-outgoing origin --keep-last touchedlog
	oouttouchedlogv = rev-range-outgoing origin --keep-last touchedlogv
	oouttouchedlg = rev-range-outgoing origin --keep-last touchedlg
	oouttouchedlc = rev-range-outgoing origin --keep-last touchedlc
	oouttouchedlcl = rev-range-outgoing origin --keep-last touchedlcl
	oouttouchedshow = rev-range-outgoing origin --keep-last touchedshow
	oouttouchedlogg = rev-range-outgoing origin --keep-last touchedlogg
	oouttouchedloggv = rev-range-outgoing origin --keep-last touchedloggv
	oouttouchedlgg = rev-range-outgoing origin --keep-last touchedlgg
	oouttouchedlcg = rev-range-outgoing origin --keep-last touchedlcg
	oouttouchedlclg = rev-range-outgoing origin --keep-last touchedlclg
	ooutwherelastlog = rev-range-outgoing origin --keep-last wherelastlog
	ooutwherelastlogv = rev-range-outgoing origin --keep-last wherelastlogv
	ooutwherelastshow = rev-range-outgoing origin --keep-last wherelastshow
	ooutwherelastlogg = rev-range-outgoing origin --keep-last wherelastlogg
	ooutwherelastloggv = rev-range-outgoing origin --keep-last wherelastloggv
	ooutwherelastshowg = rev-range-outgoing origin --keep-last wherelastshowg
	ooutwhereintroducedlog = rev-range-outgoing origin --keep-last whereintroducedlog
	ooutwhereintroducedlogv = rev-range-outgoing origin --keep-last whereintroducedlogv
	ooutwhereintroducedshow = rev-range-outgoing origin --keep-last whereintroducedshow
	ooutwhereintroducedlogg = rev-range-outgoing origin --keep-last whereintroducedlogg
	ooutwhereintroducedloggv = rev-range-outgoing origin --keep-last whereintroducedloggv
	ooutwhereintroducedshowg = rev-range-outgoing origin --keep-last whereintroducedshowg
	ooutlc = rev-range-outgoing origin --one-more-command log lc
	ooutlcf = rev-range-outgoing origin --one-more-command log lcf --reverse
	ooutlcl = rev-range-outgoing origin lcl --reverse
	ooutlclf = rev-range-outgoing origin lclf --reverse
	ooutlcmine = rev-range-outgoing origin --one-more-command log lcmine --reverse
	ooutlcteam = rev-range-outgoing origin --one-more-command log lcteam --reverse
	ooutlcby = dashdash-default-command : rev-range-outgoing origin --one-more-command log others-command lc --reverse :
	ooutlcfmine = rev-range-outgoing origin --one-more-command log lcfmine --reverse
	ooutlcfteam = rev-range-outgoing origin --one-more-command log lcfteam --reverse
	ooutlcfby = rev-range-outgoing origin --one-more-command log lcfby --reverse
	ooutshow = rev-range-outgoing origin --one-more-command log show
	ooutshoww = rev-range-outgoing origin --one-more-command log showw
	ooutshowc = rev-range-outgoing origin --one-more-command log showc
	ooutshowa = rev-range-outgoing origin --one-more-command log showa
	ooutshowfiles = rev-range-outgoing origin --with-range ... showfiles
	ooutshowselected = rev-range-outgoing origin --one-more-command log showselected
	ooutshowlselected = rev-range-outgoing origin --one-more-command log showlselected
	ooutlog = rev-range-outgoing origin --one-more log
	ooutlogv = rev-range-outgoing origin --one-more logv
	ooutglog = rev-range-outgoing origin glog
	ooutlogg = rev-range-outgoing origin --one-more logg
	ooutlgg = rev-range-outgoing origin --one-more lgg
	ooutl = rev-range-outgoing origin l
	ooutlmine = rev-range-outgoing origin lmine
	ooutlteam = rev-range-outgoing origin lteam
	ooutlby = dashdash-default-command : rev-range-outgoing origin others-command l :
	ooutlg = rev-range-outgoing origin --one-more lg
	ooutlgn = rev-range-outgoing origin lg
	ooutlgv = rev-range-outgoing origin --one-more lgv
	ooutlh = rev-range-outgoing origin lh --reverse
	ooutlhmine = rev-range-outgoing origin lhmine --reverse
	ooutlhteam = rev-range-outgoing origin lhteam --reverse
	ooutlhby = dashdash-default-command : rev-range-outgoing origin others-command lh --reverse :
	ooutlhurl = rev-range-outgoing origin lhurl
	ooutlhourl = rev-range-outgoing origin lhourl --reverse
	ooutlhuurl = rev-range-outgoing origin lhuurl --reverse
	ooutlhourlv = rev-range-outgoing origin lhourlv --reverse
	ooutlhuurlv = rev-range-outgoing origin lhuurlv --reverse
	ooutlgmine = rev-range-outgoing origin --one-more lgmine
	ooutlgteam = rev-range-outgoing origin --one-more lgteam
	ooutlgby = dashdash-default-command : rev-range-outgoing origin --one-more others-command lg :
	ooutlogmine = rev-range-outgoing origin --one-more logmine
	ooutlogteam = rev-range-outgoing origin --one-more logteam
	ooutlogby = dashdash-default-command : rev-range-outgoing origin --one-more others-command log :
	ooutfixup = rev-range-outgoing origin fixupselected
	ooutrbfixup = rev-range-outgoing origin rbfixupselected
	ooutrbi = orbi
	; ooutbase would always print "origin/<branch>".
	ooutwhodid = files-command whodid ooutshowfiles
	ooutwhotouched = rev-range-outgoing origin whodid
	ooutwhatdid = rev-range-outgoing origin whatdid
	ooutactivity = rev-range-outgoing origin activity
	ooutactivitymine = rev-range-outgoing origin activitymine
	ooutactivityteam = rev-range-outgoing origin activityteam
	ooutemaillog = rev-range-outgoing origin email-command log
	ooutemaillc = rev-range-outgoing origin email-command lc
	; ooutpull-request would address a remote branch if at all

	;; oin...: Log variants that cover the differences that already exist in origin on the current branch, but not yet in the local branch.
	oinchurn = rev-range-incoming origin churn
	oind = rev-range-incoming origin --with-range ... diff
	oindl = rev-range-incoming origin --with-range ... dl
	oindt = rev-range-incoming origin --with-range ... difftool
	oinma = rev-range-incoming origin format-patch
	oinfindlog = rev-range-incoming origin --keep-last findlog
	oinfindlogv = rev-range-incoming origin --keep-last findlogv
	oinfindlg = rev-range-incoming origin --keep-last findlg
	oinfindlc = rev-range-incoming origin --keep-last findlc
	oinfindlcl = rev-range-incoming origin --keep-last findlcl
	oinfindshow = rev-range-incoming origin --keep-last findshow
	oinfindlogg = rev-range-incoming origin --keep-last findlogg
	oinfindloggv = rev-range-incoming origin --keep-last findloggv
	oinfindlgg = rev-range-incoming origin --keep-last findlgg
	oinfindlcg = rev-range-incoming origin --keep-last findlcg
	oinfindlclg = rev-range-incoming origin --keep-last findlclg
	ointouchedlog = rev-range-incoming origin --keep-last touchedlog
	ointouchedlogv = rev-range-incoming origin --keep-last touchedlogv
	ointouchedlg = rev-range-incoming origin --keep-last touchedlg
	ointouchedlc = rev-range-incoming origin --keep-last touchedlc
	ointouchedlcl = rev-range-incoming origin --keep-last touchedlcl
	ointouchedshow = rev-range-incoming origin --keep-last touchedshow
	ointouchedlogg = rev-range-incoming origin --keep-last touchedlogg
	ointouchedloggv = rev-range-incoming origin --keep-last touchedloggv
	ointouchedlgg = rev-range-incoming origin --keep-last touchedlgg
	ointouchedlcg = rev-range-incoming origin --keep-last touchedlcg
	ointouchedlclg = rev-range-incoming origin --keep-last touchedlclg
	oinwherelastlog = rev-range-incoming origin --keep-last wherelastlog
	oinwherelastlogv = rev-range-incoming origin --keep-last wherelastlogv
	oinwherelastshow = rev-range-incoming origin --keep-last wherelastshow
	oinwherelastlogg = rev-range-incoming origin --keep-last wherelastlogg
	oinwherelastloggv = rev-range-incoming origin --keep-last wherelastloggv
	oinwherelastshowg = rev-range-incoming origin --keep-last wherelastshowg
	oinwhereintroducedlog = rev-range-incoming origin --keep-last whereintroducedlog
	oinwhereintroducedlogv = rev-range-incoming origin --keep-last whereintroducedlogv
	oinwhereintroducedshow = rev-range-incoming origin --keep-last whereintroducedshow
	oinwhereintroducedlogg = rev-range-incoming origin --keep-last whereintroducedlogg
	oinwhereintroducedloggv = rev-range-incoming origin --keep-last whereintroducedloggv
	oinwhereintroducedshowg = rev-range-incoming origin --keep-last whereintroducedshowg
	oinlc = rev-range-incoming origin --one-more-command log lc
	oinlcf = rev-range-incoming origin --one-more-command log lcf --reverse
	oinlcl = rev-range-incoming origin lcl --reverse
	oinlclf = rev-range-incoming origin lclf --reverse
	oinlcmine = rev-range-incoming origin --one-more-command log lcmine --reverse
	oinlcteam = rev-range-incoming origin --one-more-command log lcteam --reverse
	oinlcby = dashdash-default-command : rev-range-incoming origin --one-more-command log others-command lc --reverse :
	oinlcfmine = rev-range-incoming origin --one-more-command log lcfmine --reverse
	oinlcfteam = rev-range-incoming origin --one-more-command log lcfteam --reverse
	oinlcfby = rev-range-incoming origin --one-more-command log lcfby --reverse
	oinshow = rev-range-incoming origin --one-more-command log show
	oinshoww = rev-range-incoming origin --one-more-command log showw
	oinshowc = rev-range-incoming origin --one-more-command log showc
	oinshowa = rev-range-incoming origin --one-more-command log showa
	oinshowfiles = rev-range-incoming origin --with-range ... showfiles
	oinshowselected = rev-range-incoming origin --one-more-command log showselected
	oinshowlselected = rev-range-incoming origin --one-more-command log showlselected
	oinlog = rev-range-incoming origin --one-more log
	oinlogv = rev-range-incoming origin --one-more logv
	oinglog = rev-range-incoming origin glog
	oinlogg = rev-range-incoming origin --one-more logg
	oinlgg = rev-range-incoming origin --one-more lgg
	oinl = rev-range-incoming origin l
	oinlmine = rev-range-incoming origin lmine
	oinlteam = rev-range-incoming origin lteam
	oinlby = dashdash-default-command : rev-range-incoming origin others-command l :
	oinlg = rev-range-incoming origin --one-more lg
	oinlgn = rev-range-incoming origin lg
	oinlgv = rev-range-incoming origin --one-more lgv
	oinlh = rev-range-incoming origin lh --reverse
	oinlhmine = rev-range-incoming origin lhmine --reverse
	oinlhteam = rev-range-incoming origin lhteam --reverse
	oinlhby = dashdash-default-command : rev-range-incoming origin others-command lh --reverse :
	oinlhurl = rev-range-incoming origin lhurl
	oinlhourl = rev-range-incoming origin lhourl --reverse
	oinlhuurl = rev-range-incoming origin lhuurl --reverse
	oinlhourlv = rev-range-incoming origin lhourlv --reverse
	oinlhuurlv = rev-range-incoming origin lhuurlv --reverse
	oinlgmine = rev-range-incoming origin --one-more lgmine
	oinlgteam = rev-range-incoming origin --one-more lgteam
	oinlgby = dashdash-default-command : rev-range-incoming origin --one-more others-command lg :
	oinlogmine = rev-range-incoming origin --one-more logmine
	oinlogteam = rev-range-incoming origin --one-more logteam
	oinlogby = dashdash-default-command : rev-range-incoming origin --one-more others-command log :
	; oinrbfixup doesn't make sense; you cannot rebase stuff in a remote branch.
	; oinrbi doesn't make sense; you cannot rebase stuff in a remote branch.
	; oinbase would always print "origin/<branch>".
	oinwhodid = files-command whodid oinshowfiles
	oinwhotouched = rev-range-incoming origin whodid
	oinwhatdid = rev-range-incoming origin whatdid
	oinactivity = rev-range-incoming origin activity
	oinactivitymine = rev-range-incoming origin activitymine
	oinactivityteam = rev-range-incoming origin activityteam
	oinemaillog = rev-range-incoming origin email-command log
	oinemaillc = rev-range-incoming origin email-command lc
	; oinpull-request would address a remote branch if at all

	;; uout...: Log variants that cover the differences that already exist on the current branch, but not yet in the corresponding upstream branch.
	uoutchurn = rev-range-outgoing upstream churn
	uoutd = rev-range-outgoing upstream --with-range ... diff
	uoutdl = rev-range-outgoing upstream --with-range ... dl
	uoutdt = rev-range-outgoing upstream --with-range ... difftool
	uoutma = rev-range-outgoing upstream format-patch
	uoutfindlog = rev-range-outgoing upstream --keep-last findlog
	uoutfindlogv = rev-range-outgoing upstream --keep-last findlogv
	uoutfindlg = rev-range-outgoing upstream --keep-last findlg
	uoutfindlc = rev-range-outgoing upstream --keep-last findlc
	uoutfindlcl = rev-range-outgoing upstream --keep-last findlcl
	uoutfindshow = rev-range-outgoing upstream --keep-last findshow
	uoutfindlogg = rev-range-outgoing upstream --keep-last findlogg
	uoutfindloggv = rev-range-outgoing upstream --keep-last findloggv
	uoutfindlgg = rev-range-outgoing upstream --keep-last findlgg
	uoutfindlcg = rev-range-outgoing upstream --keep-last findlcg
	uoutfindlclg = rev-range-outgoing upstream --keep-last findlclg
	uouttouchedlog = rev-range-outgoing upstream --keep-last touchedlog
	uouttouchedlogv = rev-range-outgoing upstream --keep-last touchedlogv
	uouttouchedlg = rev-range-outgoing upstream --keep-last touchedlg
	uouttouchedlc = rev-range-outgoing upstream --keep-last touchedlc
	uouttouchedlcl = rev-range-outgoing upstream --keep-last touchedlcl
	uouttouchedshow = rev-range-outgoing upstream --keep-last touchedshow
	uouttouchedlogg = rev-range-outgoing upstream --keep-last touchedlogg
	uouttouchedloggv = rev-range-outgoing upstream --keep-last touchedloggv
	uouttouchedlgg = rev-range-outgoing upstream --keep-last touchedlgg
	uouttouchedlcg = rev-range-outgoing upstream --keep-last touchedlcg
	uouttouchedlclg = rev-range-outgoing upstream --keep-last touchedlclg
	uoutwherelastlog = rev-range-outgoing upstream --keep-last wherelastlog
	uoutwherelastlogv = rev-range-outgoing upstream --keep-last wherelastlogv
	uoutwherelastshow = rev-range-outgoing upstream --keep-last wherelastshow
	uoutwherelastlogg = rev-range-outgoing upstream --keep-last wherelastlogg
	uoutwherelastloggv = rev-range-outgoing upstream --keep-last wherelastloggv
	uoutwherelastshowg = rev-range-outgoing upstream --keep-last wherelastshowg
	uoutwhereintroducedlog = rev-range-outgoing upstream --keep-last whereintroducedlog
	uoutwhereintroducedlogv = rev-range-outgoing upstream --keep-last whereintroducedlogv
	uoutwhereintroducedshow = rev-range-outgoing upstream --keep-last whereintroducedshow
	uoutwhereintroducedlogg = rev-range-outgoing upstream --keep-last whereintroducedlogg
	uoutwhereintroducedloggv = rev-range-outgoing upstream --keep-last whereintroducedloggv
	uoutwhereintroducedshowg = rev-range-outgoing upstream --keep-last whereintroducedshowg
	uoutlc = rev-range-outgoing upstream --one-more-command log lc
	uoutlcf = rev-range-outgoing upstream --one-more-command log lcf --reverse
	uoutlcl = rev-range-outgoing upstream lcl --reverse
	uoutlclf = rev-range-outgoing upstream lclf --reverse
	uoutlcmine = rev-range-outgoing upstream --one-more-command log lcmine --reverse
	uoutlcteam = rev-range-outgoing upstream --one-more-command log lcteam --reverse
	uoutlcby = dashdash-default-command : rev-range-outgoing upstream --one-more-command log others-command lc --reverse :
	uoutlcfmine = rev-range-outgoing upstream --one-more-command log lcfmine --reverse
	uoutlcfteam = rev-range-outgoing upstream --one-more-command log lcfteam --reverse
	uoutlcfby = rev-range-outgoing upstream --one-more-command log lcfby --reverse
	uoutshow = rev-range-outgoing upstream --one-more-command log show
	uoutshoww = rev-range-outgoing upstream --one-more-command log showw
	uoutshowc = rev-range-outgoing upstream --one-more-command log showc
	uoutshowa = rev-range-outgoing upstream --one-more-command log showa
	uoutshowfiles = rev-range-outgoing upstream --with-range ... showfiles
	uoutshowselected = rev-range-outgoing upstream --one-more-command log showselected
	uoutshowlselected = rev-range-outgoing upstream --one-more-command log showlselected
	uoutlog = rev-range-outgoing upstream --one-more log
	uoutlogv = rev-range-outgoing upstream --one-more logv
	uoutglog = rev-range-outgoing upstream glog
	uoutlogg = rev-range-outgoing upstream --one-more logg
	uoutlgg = rev-range-outgoing upstream --one-more lgg
	uoutl = rev-range-outgoing upstream l
	uoutlmine = rev-range-outgoing upstream lmine
	uoutlteam = rev-range-outgoing upstream lteam
	uoutlby = dashdash-default-command : rev-range-outgoing upstream others-command l :
	uoutlg = rev-range-outgoing upstream --one-more lg
	uoutlgn = rev-range-outgoing upstream lg
	uoutlgv = rev-range-outgoing upstream --one-more lgv
	uoutlh = rev-range-outgoing upstream lh --reverse
	uoutlhmine = rev-range-outgoing upstream lhmine --reverse
	uoutlhteam = rev-range-outgoing upstream lhteam --reverse
	uoutlhby = dashdash-default-command : rev-range-outgoing upstream others-command lh --reverse :
	uoutlhurl = rev-range-outgoing upstream lhurl
	uoutlhourl = rev-range-outgoing upstream lhourl --reverse
	uoutlhuurl = rev-range-outgoing upstream lhuurl --reverse
	uoutlhourlv = rev-range-outgoing upstream lhourlv --reverse
	uoutlhuurlv = rev-range-outgoing upstream lhuurlv --reverse
	uoutlgmine = rev-range-outgoing upstream --one-more lgmine
	uoutlgteam = rev-range-outgoing upstream --one-more lgteam
	uoutlgby = dashdash-default-command : rev-range-outgoing upstream --one-more others-command lg :
	uoutlogmine = rev-range-outgoing upstream --one-more logmine
	uoutlogteam = rev-range-outgoing upstream --one-more logteam
	uoutlogby = dashdash-default-command : rev-range-outgoing upstream --one-more others-command log :
	uoutfixup = rev-range-outgoing upstream fixupselected
	uoutrbfixup = rev-range-outgoing upstream rbfixupselected
	uoutrbi = urbi
	; uoutbase would always print "upstream/<branch>".
	uoutwhodid = files-command whodid uoutshowfiles
	uoutwhotouched = rev-range-outgoing upstream whodid
	uoutwhatdid = rev-range-outgoing upstream whatdid
	uoutactivity = rev-range-outgoing upstream activity
	uoutactivitymine = rev-range-outgoing upstream activitymine
	uoutactivityteam = rev-range-outgoing upstream activityteam
	uoutemaillog = rev-range-outgoing upstream email-command log
	uoutemaillc = rev-range-outgoing upstream email-command lc
	; uoutpull-request would address a remote branch if at all

	;; uin...: Log variants that cover the differences that already exist in upstream on the current branch, but not yet in the local branch.
	uinchurn = rev-range-incoming upstream churn
	uind = rev-range-incoming upstream --with-range ... diff
	uindl = rev-range-incoming upstream --with-range ... dl
	uindt = rev-range-incoming upstream --with-range ... difftool
	uinma = rev-range-incoming upstream format-patch
	uinfindlog = rev-range-incoming upstream --keep-last findlog
	uinfindlogv = rev-range-incoming upstream --keep-last findlogv
	uinfindlg = rev-range-incoming upstream --keep-last findlg
	uinfindlc = rev-range-incoming upstream --keep-last findlc
	uinfindlcl = rev-range-incoming upstream --keep-last findlcl
	uinfindshow = rev-range-incoming upstream --keep-last findshow
	uinfindlogg = rev-range-incoming upstream --keep-last findlogg
	uinfindloggv = rev-range-incoming upstream --keep-last findloggv
	uinfindlgg = rev-range-incoming upstream --keep-last findlgg
	uinfindlcg = rev-range-incoming upstream --keep-last findlcg
	uinfindlclg = rev-range-incoming upstream --keep-last findlclg
	uintouchedlog = rev-range-incoming upstream --keep-last touchedlog
	uintouchedlogv = rev-range-incoming upstream --keep-last touchedlogv
	uintouchedlg = rev-range-incoming upstream --keep-last touchedlg
	uintouchedlc = rev-range-incoming upstream --keep-last touchedlc
	uintouchedlcl = rev-range-incoming upstream --keep-last touchedlcl
	uintouchedshow = rev-range-incoming upstream --keep-last touchedshow
	uintouchedlogg = rev-range-incoming upstream --keep-last touchedlogg
	uintouchedloggv = rev-range-incoming upstream --keep-last touchedloggv
	uintouchedlgg = rev-range-incoming upstream --keep-last touchedlgg
	uintouchedlcg = rev-range-incoming upstream --keep-last touchedlcg
	uintouchedlclg = rev-range-incoming upstream --keep-last touchedlclg
	uinwherelastlog = rev-range-incoming upstream --keep-last wherelastlog
	uinwherelastlogv = rev-range-incoming upstream --keep-last wherelastlogv
	uinwherelastshow = rev-range-incoming upstream --keep-last wherelastshow
	uinwherelastlogg = rev-range-incoming upstream --keep-last wherelastlogg
	uinwherelastloggv = rev-range-incoming upstream --keep-last wherelastloggv
	uinwherelastshowg = rev-range-incoming upstream --keep-last wherelastshowg
	uinwhereintroducedlog = rev-range-incoming upstream --keep-last whereintroducedlog
	uinwhereintroducedlogv = rev-range-incoming upstream --keep-last whereintroducedlogv
	uinwhereintroducedshow = rev-range-incoming upstream --keep-last whereintroducedshow
	uinwhereintroducedlogg = rev-range-incoming upstream --keep-last whereintroducedlogg
	uinwhereintroducedloggv = rev-range-incoming upstream --keep-last whereintroducedloggv
	uinwhereintroducedshowg = rev-range-incoming upstream --keep-last whereintroducedshowg
	uinlc = rev-range-incoming upstream --one-more-command log lc
	uinlcf = rev-range-incoming upstream --one-more-command log lcf --reverse
	uinlcl = rev-range-incoming upstream lcl --reverse
	uinlclf = rev-range-incoming upstream lclf --reverse
	uinlcmine = rev-range-incoming upstream --one-more-command log lcmine --reverse
	uinlcteam = rev-range-incoming upstream --one-more-command log lcteam --reverse
	uinlcby = dashdash-default-command : rev-range-incoming upstream --one-more-command log others-command lc --reverse :
	uinlcfmine = rev-range-incoming upstream --one-more-command log lcfmine --reverse
	uinlcfteam = rev-range-incoming upstream --one-more-command log lcfteam --reverse
	uinlcfby = rev-range-incoming upstream --one-more-command log lcfby --reverse
	uinshow = rev-range-incoming upstream --one-more-command log show
	uinshoww = rev-range-incoming upstream --one-more-command log showw
	uinshowc = rev-range-incoming upstream --one-more-command log showc
	uinshowa = rev-range-incoming upstream --one-more-command log showa
	uinshowfiles = rev-range-incoming upstream --with-range ... showfiles
	uinshowselected = rev-range-incoming upstream --one-more-command log showselected
	uinshowlselected = rev-range-incoming upstream --one-more-command log showlselected
	uinlog = rev-range-incoming upstream --one-more log
	uinlogv = rev-range-incoming upstream --one-more logv
	uinglog = rev-range-incoming upstream glog
	uinlogg = rev-range-incoming upstream --one-more logg
	uinlgg = rev-range-incoming upstream --one-more lgg
	uinl = rev-range-incoming upstream l
	uinlmine = rev-range-incoming upstream lmine
	uinlteam = rev-range-incoming upstream lteam
	uinlby = dashdash-default-command : rev-range-incoming upstream others-command l :
	uinlg = rev-range-incoming upstream --one-more lg
	uinlgn = rev-range-incoming upstream lg
	uinlgv = rev-range-incoming upstream --one-more lgv
	uinlh = rev-range-incoming upstream lh --reverse
	uinlhmine = rev-range-incoming upstream lhmine --reverse
	uinlhteam = rev-range-incoming upstream lhteam --reverse
	uinlhby = dashdash-default-command : rev-range-incoming upstream others-command lh --reverse :
	uinlhurl = rev-range-incoming upstream lhurl
	uinlhourl = rev-range-incoming upstream lhourl --reverse
	uinlhuurl = rev-range-incoming upstream lhuurl --reverse
	uinlhourlv = rev-range-incoming upstream lhourlv --reverse
	uinlhuurlv = rev-range-incoming upstream lhuurlv --reverse
	uinlgmine = rev-range-incoming upstream --one-more lgmine
	uinlgteam = rev-range-incoming upstream --one-more lgteam
	uinlgby = dashdash-default-command : rev-range-incoming upstream --one-more others-command lg :
	uinlogmine = rev-range-incoming upstream --one-more logmine
	uinlogteam = rev-range-incoming upstream --one-more logteam
	uinlogby = dashdash-default-command : rev-range-incoming upstream --one-more others-command log :
	; uinrbfixup doesn't make sense; you cannot rebase stuff in a remote branch.
	; uinrbi doesn't make sense; you cannot rebase stuff in a remote branch.
	; uinbase would always print "upstream/<branch>".
	uinwhodid = files-command whodid uinshowfiles
	uinwhotouched = rev-range-incoming upstream whodid
	uinwhatdid = rev-range-incoming upstream whatdid
	uinactivity = rev-range-incoming upstream activity
	uinactivitymine = rev-range-incoming upstream activitymine
	uinactivityteam = rev-range-incoming upstream activityteam
	uinemaillog = rev-range-incoming upstream email-command log
	uinemaillc = rev-range-incoming upstream email-command lc
	; uinpull-request would address a remote branch if at all

	;; localbr...: Log variants that cover all local branches (like br... ending with a tag or reference anywhere in the history (also by remotes))
	localbrchurn = localbrrefdo git rev-range-this-branch --start-rev {} --any churn
	localbrd = localbrrefdo git rev-range-this-branch --start-rev {} --any --with-range ... diff
	localbrdl = localbrrefdo git rev-range-this-branch --start-rev {} --any --with-range ... dl
	localbrdt = localbrrefdo git rev-range-this-branch --start-rev {} --any --with-range ... difftool
	localbrma = localbrrefdo git rev-range-this-branch --start-rev {} --any format-patch
	localbrfindlog = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last findlog
	localbrfindlogv = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last findlogv
	localbrfindlg = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last findlg
	localbrfindlc = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last findlc
	localbrfindlcl = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last findlcl
	localbrfindshow = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last findshow
	localbrfindlogg = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last findlogg
	localbrfindloggv = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last findloggv
	localbrfindlgg = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last findlgg
	localbrfindlcg = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last findlcg
	localbrfindlclg = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last findlclg
	localbrtouchedlog = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last touchedlog
	localbrtouchedlogv = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last touchedlogv
	localbrtouchedlg = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last touchedlg
	localbrtouchedlc = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last touchedlc
	localbrtouchedlcl = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last touchedlcl
	localbrtouchedshow = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last touchedshow
	localbrtouchedlogg = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last touchedlogg
	localbrtouchedloggv = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last touchedloggv
	localbrtouchedlgg = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last touchedlgg
	localbrtouchedlcg = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last touchedlcg
	localbrtouchedlclg = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last touchedlclg
	localbrwherelastlog = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last wherelastlog
	localbrwherelastlogv = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last wherelastlogv
	localbrwherelastshow = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last wherelastshow
	localbrwherelastlogg = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last wherelastlogg
	localbrwherelastloggv = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last wherelastloggv
	localbrwherelastshowg = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last wherelastshowg
	localbrwhereintroducedlog = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last whereintroducedlog
	localbrwhereintroducedlogv = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last whereintroducedlogv
	localbrwhereintroducedshow = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last whereintroducedshow
	localbrwhereintroducedlogg = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last whereintroducedlogg
	localbrwhereintroducedloggv = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last whereintroducedloggv
	localbrwhereintroducedshowg = localbrrefdo git rev-range-this-branch --start-rev {} --any --keep-last whereintroducedshowg
	localbrlc = localbrrefdo git rev-range-this-branch --start-rev {} --any lc --color=always
	localbrlcf = localbrrefdo git rev-range-this-branch --start-rev {} --any lcf --reverse --color=always
	localbrlcl = localbrrefdo git rev-range-this-branch --start-rev {} --any lcl --reverse --color=always
	localbrlclf = localbrrefdo git rev-range-this-branch --start-rev {} --any lclf --reverse --color=always
	localbrlcmine = localbrrefdo git rev-range-this-branch --start-rev {} --any lcmine --reverse --color=always
	localbrlcteam = localbrrefdo git rev-range-this-branch --start-rev {} --any lcteam --reverse --color=always
	localbrlcby = localbrrefdo git dashdash-default-command : rev-range-this-branch --start-rev {} --any others-command lc --reverse --color=always :
	localbrlcfmine = localbrrefdo git rev-range-this-branch --start-rev {} --any lcfmine --reverse --color=always
	localbrlcfteam = localbrrefdo git rev-range-this-branch --start-rev {} --any lcfteam --reverse --color=always
	localbrlcfby = localbrrefdo git rev-range-this-branch --start-rev {} --any lcfby --reverse --color=always
	localbrshow = localbrrefdo git rev-range-this-branch --start-rev {} --any show --color=always
	localbrshoww = localbrrefdo git rev-range-this-branch --start-rev {} --any showw --color=always
	localbrshowc = localbrrefdo git rev-range-this-branch --start-rev {} --any showc --color=always
	localbrshowa = localbrrefdo git rev-range-this-branch --start-rev {} --any showa --color=always
	localbrshowfiles = localbrrefdo git rev-range-this-branch --start-rev {} --any --with-range ... showfiles --color=always
	localbrshowselected = localbrrefdo git rev-range-this-branch --start-rev {} --any show --color=alwaysselected
	localbrshowlselected = localbrrefdo git rev-range-this-branch --start-rev {} --any show --color=alwayslselected
	localbrlog = localbrrefdo git rev-range-this-branch --start-rev {} --any log --color=always
	localbrlogv = localbrrefdo git rev-range-this-branch --start-rev {} --any logv --color=always
	localbrglog = localbrrefdo git rev-range-this-branch --start-rev {} --any glog
	localbrlogg = localbrrefdo git rev-range-this-branch --start-rev {} --any logg
	localbrlgg = localbrrefdo git rev-range-this-branch --start-rev {} --any lgg
	localbrl = localbrrefdo git rev-range-this-branch --start-rev {} --any l
	localbrlmine = localbrrefdo git rev-range-this-branch --start-rev {} --any lmine
	localbrlteam = localbrrefdo git rev-range-this-branch --start-rev {} --any lteam
	localbrlby = localbrrefdo git dashdash-default-command : rev-range-this-branch --start-rev {} --any others-command l :
	localbrlg = localbrrefdo git rev-range-this-branch --start-rev {} --any lg
	localbrlgn = localbrrefdo git rev-range-this-branch --start-rev {} --any lg
	localbrlgv = localbrrefdo git rev-range-this-branch --start-rev {} --any lgv
	localbrlh = localbrrefdo git rev-range-this-branch --start-rev {} --any lh --reverse
	localbrlhmine = localbrrefdo git rev-range-this-branch --start-rev {} --any lhmine --reverse
	localbrlhteam = localbrrefdo git rev-range-this-branch --start-rev {} --any lhteam --reverse
	localbrlhby = localbrrefdo git dashdash-default-command : rev-range-this-branch --start-rev {} --any others-command lh --reverse :
	localbrlhurl = localbrrefdo git rev-range-this-branch --start-rev {} --any lhurl
	localbrlhourl = localbrrefdo git rev-range-this-branch --start-rev {} --any lhourl --reverse
	localbrlhuurl = localbrrefdo git rev-range-this-branch --start-rev {} --any lhuurl --reverse
	localbrlhourlv = localbrrefdo git rev-range-this-branch --start-rev {} --any lhourlv --reverse
	localbrlhuurlv = localbrrefdo git rev-range-this-branch --start-rev {} --any lhuurlv --reverse
	localbrlgmine = localbrrefdo git rev-range-this-branch --start-rev {} --any lgmine
	localbrlgteam = localbrrefdo git rev-range-this-branch --start-rev {} --any lgteam
	localbrlgby = localbrrefdo git dashdash-default-command : rev-range-this-branch --start-rev {} --any others-command lg :
	localbrlogmine = localbrrefdo git rev-range-this-branch --start-rev {} --any logmine --color=always
	localbrlogteam = localbrrefdo git rev-range-this-branch --start-rev {} --any logteam --color=always
	localbrlogby = localbrrefdo git dashdash-default-command : rev-range-this-branch --start-rev {} --any others-command log --color=always :
	localbrfixup = localbrrefdo git rev-range-this-branch --start-rev {} --any fixupselected
	localbrrbfixup = localbrrefdo git rev-range-this-branch --start-rev {} --any rbfixupselected
	; localbrrbi would be a generic implementation of the specialized rebaselocalbr.
	localbrbase = localbrrefdo git rev-range-this-branch --start-rev {} --any --no-range name-rev --name-only
	localbrwhodid = localbrrefdo git files-command whodid brshowfiles
	localbrwhotouched = localbrrefdo git rev-range-this-branch --start-rev {} --any whodid
	localbrwhatdid = localbrrefdo git rev-range-this-branch --start-rev {} --any whatdid
	localbractivity = localbrrefdo git rev-range-this-branch --start-rev {} --any activity
	localbractivitymine = localbrrefdo git rev-range-this-branch --start-rev {} --any activitymine
	localbractivityteam = localbrrefdo git rev-range-this-branch --start-rev {} --any activityteam
	localbremaillog = localbrrefdo git rev-range-this-branch --start-rev {} --any email-command log
	localbremaillc = localbrrefdo git rev-range-this-branch --start-rev {} --any email-command lc
	; localbrpull-request would cover multiple branches


	last = last-command	; Show last commit info: Hashes and author. Use "git log1" or "git show" for more details.
	lastmine = last-command mine-command ; Show my personal last commit info: Hashes and author.
	lastteam = last-command team-command ; Show my team's last commit info: Hashes and author.
	lastby = last-command others-command ; Show that user(s)' last commit info: Hashes and author.
	changes = diff --name-status -r ; Subversion-like 'svn status' reporting.
	;; tagtype: List only those tags of the passed (annotated or lightweight) type.
	taglist-annotated = tagtype annotated
	taglist-lightweight = tagtype lightweight
	;; describe: Show the most recent tag that is reachable from a commit, in the format <annotated tag>-g<commits on top>-<commit-hash>.
	;; desc: Show current / passed revision relative to the most recent ref that is reachable from a commit, in the format <tag|ref>-g<commits on top>-<commit-hash>[-dirty].
	;; describe-version: Show (only the) most recent annotated tag (used for official versions etc.) that the current / passed revision is based on.
	contained-version = contained-command tag ; Show (only the) first annotated tag (used for official versions etc.) [that matches GREP-ARGS] that comes after the passed revision, and thus contains it.
	annotate-contained-version = annotate-contained-command version
	;; describe-tag: Show relation to the most recent, also lightweight (used for archiving) tag name for the current / passed revision.
	contained-tag = contained-command describe ; Show relation to the first tag (also lightweight, used for archiving) [that matches GREP-ARGS] that comes after the passed revision, and thus contains it.
	annotate-contained-tag = annotate-contained-command tag
	;; timestamp: Current build identifier containing the host, relation to previous tag, and build time.
	;; contains: Show in which tag(s) a commit is contained, i.e. in which versions this was shipped, or, if that fails, from which branch it can be reached.

	picks = cherrypicks -v --abbrev=7	; See which changes from the current branch (e.g. feature) are already present in the passed branch (e.g. master).
	;; conflicts: List files with merge conficts.
	;; conflictwipe: Abort the merge conflicts and MERGING / CHERRYPICKING state, e.g. when you want to wipe / change the working copy, anyway, and currently can't because of "error: you need to resolve your current index first".
	; Source: http://akahn.net/2011/10/12/working-through-git-conflicts-in-vim.html
	;; cob: Keep "base", the common ancestor in case of merge conflicts.
	;; coo: Keep "ours", the original one we had (ORIG_HEAD), or the one we're rebasing onto, in case of merge conflicts.
	;; cot: Keep "theirs", the version merged in (MERGE_HEAD), or the one from the branch we're rebasing, in case of merge conflicts.
	;; reflog: Show recorded changes to the tip of a branch, mostly to restore unreachable old commits via head@{1}.
	;; inout: Show incoming and outgoing commit logs between current / passed branch and its remote tracked branch / passed branch / corresponding remote branch of passed remote.
	io = inout

	cleanall = clean -d -x	; Remove all untracked files and directories, restoring a pristine working copy.
	;; lsprivate: Show all non-ignored files not under version control.
	;lsprivate = clean --dry-run ; Show all non-ignored files not under version control.
	;; rmprivate: Remove all non-ignored files not under version control.

	;; staged: Test whether / list staged files in index.
	;; editstage: Directly edit file(s) in the index without modifying the corresponding files in the working copy.
	ei = editstage
	;; editstageselected: Interactively select (from staged files or passed list of files) files (or directly pass N, M, ... selections) to directly edit in the index by number.
	eis = editstageselected
	;; invertstage: Swap staged and unstaged (just updated; pass -A|--all to also include untracked files) changes.
	ii = invertstage
	undelete = checkout HEAD -- ; Undo "git rm <file>"; puts the file back into working copy.
	unstage = reset HEAD --	; Undo "git add <file>"; removes the file from the index, so that it isn't committed. (Alternatively, you can commit a few files via "git commit <file>" directly, bypassing the index.)
	unstagehunk = reset --patch HEAD --	; Interactively cherry-pick and remove individual hunks from the index.
	;; unstageselected ; Interactively select (from staged files or passed list of files) files (or directly pass N, M, ... selections) to remove from the index by number.
	unstageselectedhunk = unstageselected --patch ; Interactively select (from staged files or passed list of files) files (or directly pass N, M, ... selections) to remove individual hunks of from the index by number.
	uncommit = reset --soft HEAD^ ; Cancel the last commit; keep working copy and index.
	peel = reset --mixed HEAD^ ; Cancel the last commit also from index; keep only the working copy. With this, you can split a single commit during rebase.
	wipecommit = autostash git wipe HEAD^	; Completely remove the last commit, also from working copy and index. Ensures that the current branch isn't dirty.
	;; wipe: Reset HEAD, working copy and index [to <branch>] [<paths>...]. Ensures that the current branch isn't dirty.
	;; hardreset = reset --hard ; Reset HEAD, working copy and index to <branch>. Destructive without safety check (but needs a passed <branch>)!
	;; reset-to-tracked: Reset my current branch to the HEAD of the tracked branch. Use this when the local branch has been pointed elsewhere (e.g. due to an attempted rebase), and you want to restore the original state. The working copy is left intact.
	reset-back = reset ORIG_HEAD	; Undo a previous git reset; allows you to go back into the future after moving the HEAD to the past.
	track = branch --set-upstream-to	; Change the remote the current branch is tracking.
	;; tracks: Show which remote branch is tracked by the current branch.
	;
	;; pushall: Push all branches, tags, and notes (if exist).
	;; up: Pull and rebase the current branch from passed <remote>. (By default, pull prefers merges over rebasing). Handles a dirty working copy by temporarily stashing it. Shows a log of pulled changes.
	pull = pull --ff-only	; Get and fast-forward changes; don't merge or rebase. Let's do that explicitly via the corresponding commands.
	;; rtrack: Make the current branch track in the passed <remote> the passed <branch> / eponymous branch.
	rb = rebase
	; For merging, you switch to the target branch (e.g. master), then merge the source branch.
	; For rebasing, you stay in your working branch and rebase to master.
	; Therefore, the meaning of "ours" and "theirs" is somewhat unintuitive:
	; - what we have on the checked out master branch is 'ours',
	; - what we had (and is being merged or replayed) in our working branch is 'theirs'.
	; Possible actions:
	; 	a) Remove commits by deleting lines. Like the revert command, but off the
	; 	   record: it will be as if the commit never existed.
	; 	b) Reorder commits by reordering lines.
	; Replace pick with:
	;	d) "edit" to mark a commit for amending.
	;	e) "reword" to change the log message.
	;	f) "squash" to merge a commit with the previous one.
	;	g) "fixup" to merge a commit with the previous one and discard the log message.
	; During a rebase:
	; 	1. Resolve the conflicted files; "git conflicts" tells them (again)
	; 	   To completely override upstream's changes, we have to use "theirs" (from the branch being rebased, i.e. git cot), not "ours"; this is unintuitive!
	; 	2. git add # after the conflicts have been resolved
	; 	3. git rbc
	; It may help to have both our and their changes separately:
	; 	git lc master
	; 	git lc
	rbi = rebase -i
	; brrbi et al: see above
	rbc = rebase --continue	; Commit (after adding resolved conflicts) and continue with any subsequent commits to be cherry-picked.
	;; rbcu: addu + rbc: Stage modified files (i.e. those with resolved conflicts) and continue rebasing.
	rbs = rebase --skip	; Restart the rebasing process by skipping the current patch.
	rbq = rebase --abort	; Cancel the operation and return to the pre-sequence state.
	rbe = rebase --edit-todo	; Edit the todo list during an interactive rebase.
	rbu = reset @{1}
	;; git rebase HEAD <feature> && git rebase HEAD @{-2}: Rebase <feature> to current branch and merge back to current
	;; git rebase master --onto <newbase> <=> git bmrbi --onto <newbase>:	Rebase the changes in the current branch (with regards to master) to appear as if they were committed onto <newbase>. Can be used to move a set of commits to another base commit.
	;; git rebase HEAD^ --onto <newbase>:	Rebase the last commit to appear as if they were committed onto <newbase>.
	;; git rebaselocalbr: Rebase all / the last committed N local branches (except for the current branch and master (and base branch if defined)) to the updated passed (or configured in branch.<name>.remote and branch.<name>.merge) upstream head.
	;; git merge --squash: Create a single commit on top of the current branch whose effect is the same as merging the other branch. Shorter form of interactive rebasing where you choose squash for all following commits.
	; merging
	;; checkout --ours:   (or git coo) will keep the original one we had (ORIG_HEAD) in case of merge conflict
	;; checkout --theirs: (or git cot) will keep the version merged in (MERGE_HEAD) in case of merge conflict
	;;; mergedryrun: Test whether a merge will do through or cause conflicts without actually doing the merge.
	;; mergeto: Merge the current branch to <target-branch>.
	mergelb = merge @{-1}
	mergedrlb = mergedryrun @{-1}
	mergem = master-command mergeto
	mergen = base-command mergeto
	;; mergelocalbr: Merge all / the last committed N local branches (except for the current branch and master (and base branch if defined)).
	;; mergelocalbrc: Merge all / the last committed N local branches (except for the current branch and master (and base branch if defined)) ordered by date of first commit.
	mt = mergetool
	;; merge-base: Identify branch point (common ancestor).
	; The fast-forward command does the second part of git pull, it merges the
	; remote tracking branch. Use this when you've already fetched the changes
	; (to avoid the superfluous network exchange), and you get the message "Your
	; branch is behind 'origin/tracked-branch', and can be fast-forwarded."
	; after switching to a branch.
	; The --ff is the default, but specify it in case it has been overridden by
	; local config.
	fast-forward = -c merge.defaultToUpstream=true merge --ff
	ff = -c merge.defaultToUpstream=true merge --ff
	fflb = ff @{-1}
	;; mergesummary: Show enriched log (for passed remote) of the passed merge commit, including URLs to the merge commit, the merged changes, full commit message, and changed files.
	omergesummary = mergesummary origin
	umergesummary = mergesummary upstream

	noff = merge --no-ff
	nofflb =noff @{-1}
	;; reintegrate: Merge / rebase <branch> to the current branch, then delete it from the local repository as well as a tracked remote (if it exists there).
	;; reintegratelb: Merge / rebase the last checked-out branch to the current branch, then delete it from the local repository as well as a tracked remote (if it exists there).
	;; reintegrateto: Merge / rebase the current branch to the passed <branch>, then delete it from the local repository as well as a tracked remote (if it exists there).
	;; reintegratetolb: Merge / rebase the current branch to the last checked-out branch, then delete it from the local repository as well as a tracked remote (if it exists there).
	reintegratetom = master-command --keep-position reintegrateto --branch MASTER
	reintegrateton = base-command --keep-position reintegrateto --branch BASE

	fl = git-rev-fetch-command l --reverse ; l of fetched commits
	flc = git-rev-fetch-command lc --reverse ; lc of fetched commits
	flg = git-rev-fetch-command lg --reverse ; lg of fetched commits
	flog = git-rev-fetch-command log --reverse ; log of fetched commits
	fetched = diff --stat ..FETCH_HEAD	; Summary of all fetched commits.
	;; remote show <repo>: Remote repository info, including tracked remote branches.
	fetchall = remote update	; Fetch all configured remotes (except when remote.<name>.skipDefaultUpdate is configured).
	;; fetchdate: Show when (any) remote was last fetched.
	;; pushdate: Show when the current branch was last synchronized (pushed or pulled) with the tracked remote branch / passed remote.
	opushdate = pushdate origin
	upushdate = pushdate upstream
	;; updatedate: Show when the last update of the local repository (fetch or push) happened.
	;; uptodate: Check remote whether the current branch is on the same commit as the tracked remote branch / passed remote (or whether a fetch / push is needed).
	ouptodate = uptodate origin
	uuptodate = uptodate upstream

	tco = rev-tracked-command checkout ; checkout tracked branch HEAD
	tdiff = rev-tracked-command diff ; diff with tracked branch
	tdifftool = rev-tracked-command difftool
	tl = rev-tracked-command l ; l of tracked branch
	tlc = rev-tracked-command lc ; lc of tracked branch
	tlg = rev-tracked-command lg ; lg of tracked branch
	tlog = rev-tracked-command log ; log of tracked branch
	treset = reset-to-tracked --must-be-origin	; Reset my current branch (and working tree with --hard) to the HEAD of tracked branch of origin. Use this when the local branch has been pointed elsewhere (e.g. due to an attempted rebase), and you want to restore the original state. The working copy is left intact.
	tmerge = rev-tracked-command merge ; Merge changes in tracked branch with my local repo.
	tmergedr = rev-tracked-command mergedryrun ; Test merge of changes in tracked branch with my local repo.
	trb = rev-tracked-command rebase ; Rebase my commits on top of the tracked branch.
	trbi = rev-tracked-command rebase -i

	obrowse = browse origin
	oexists = existsremote origin
	obr = rbr origin ; List all branches in my GitHub clone [matching <pattern>].
	obra = bra --remote origin
	oco = rco origin ; Checkout local branch from origin.
	ocolatest = rcolatest origin ; Checkout local branch from latest (by sort order) branch in my GitHub clone [matching pattern].
	ocolatestc = rcolatestc origin ; Checkout local branch from my GitHub clone's branch [matching pattern] that was created last (except the current branch and master (and base branch if defined)).
	;; ocreatelocalbr: Create (and track) local branches for all branches in origin (matching PATTERN).
	;; oprune: Remove old local branches that do not exist in origin any more.
	omdiff = master-command -1 MASTER..origin/MASTER diff ; Show differences introduced in my GitHub clone relative to master.
	omdifftool = master-command -1 MASTER..origin/MASTER difftool
	ondiff = base-command -1 BASE..origin/BASE diff ; Show differences introduced in my GitHub clone relative to the base branch.
	ondifftool = base-command -1 BASE..origin/BASE difftool
	odiff = rev-remote-command origin diff ; Show differences to my GitHub clone.
	odifftool = rev-remote-command origin difftool ; Show differences to my GitHub clone.
	ol = rev-remote-command origin l; l of origin
	olc = rev-remote-command origin lc; lc of origin
	olg = rev-remote-command origin lg; lg of origin
	olog = rev-remote-command origin log; Log of my GitHub clone.
	oio = inout origin
	omio = master-command -2 MASTER origin/MASTER inout
	onio = base-command -2 BASE origin/BASE inout
	omrb = master-command -2 MASTER origin/MASTER remaster ; Remaster my commits on top of the latest master of my GitHub clone.
	onrb = base-command -2 BASE origin/BASE rebase ; Rebase my commits on top of the latest base branch of my GitHub clone.
	ofetch = fetch origin ; Get changes done to my GitHub clone through another Git repository, e.g. from another system. Use this, followed by git owipe, when origin has been reset (e.g. to an updated upstream).
	opull = pull --ff-only origin ; Get and fast-forward changes done to my GitHub clone through another Git repository, e.g. from another system. This allows to either merge or rebase (recommended) when local commits have been done to an outdated local branch.
	oup = up origin
	omerge = rev-remote-command origin merge ; Merge changes done to my GitHub clone through another Git repository with my local repo.
	omergedr = rev-remote-command origin mergedryrun ; Test merge of changes done to my GitHub clone through another Git repository with my local repo.
	orb = rev-remote-command origin rebase ; Rebase my commits on top of the corresponding branch in my GitHub clone (or passed <branch>).
	orbi = rev-remote-command origin rebase -i
	opa = pushall origin	; Push all branches, tags, and notes (if exist) to origin.
	opush = push origin ; Re-publish of current / passed <branch> to the tracking GitHub clone to get them pulled into upstream.
	opublish = rpublish origin ; Initial publish of current / passed <branch> to my GitHub clone to get them pulled into upstream.
	; ... and set upstream tracking reference so that future pushes can omit the branch name (when push.default=tracking).
	; Instead, I could probably also setup automatic tracking, but:
	; - would lose the warning when trying to opush a branch that I haven't
	;   published yet.
	; - would default to pushing to foreign branches from someone (which I'm
	;   not allowed), instead of being forced to publish to my own GitHub
	;   clone.
	;
	;   git config branch.autosetupmerge true
	; tells git-branch and git-checkout to setup new branches so that git-pull(1)
	; will appropriately merge from that remote branch.  Recommended.  Without this,
	; you will have to add --track to your branch command or manually merge remote
	; tracking branches with "fetch" and then "merge".
	odeletebr = push origin --delete ; Delete remote <branch> in my GitHub clone. Older git must use "push origin :BRANCHNAME"
	oldeletebr = rldeletebr origin ; Delete <branch> from the local repository as well as origin.
	oldeletelb = rldeletebr origin @{-1} ; Delete the last checked-out branch from the local repository as well as origin.
	olrenamebr = rlrenamebr origin ; Rename current / <oldbranch> to <newbranch> in both local repository and origin.
	oreset = rev-remote-command origin reset ; Reset my current branch to the HEAD of the corresponding / passed branch of origin. The working copy is left intact, so you can effectively rebase any outstanding differences with a follow-up commit.
	ohardreset = rev-remote-command origin reset --hard ; Reset my current branch to the HEAD of the corresponding / passed branch of upstream.
	otrack = rtrack origin	; Make the current branch track the eponymous branch in origin.
	oremotebr = remotebr origin	; Print corresponding origin/branch for the current / passed branch(es) (or return error).
	oreset = rev-remote-command origin reset ; Reset my current branch to the HEAD of the corresponding / passed branch in origin.
	owipe = rev-remote-command origin wipe ; Reset my current branch to the HEAD of the corresponding / passed branch of origin. Use this after an ureset done in another repository. Ensures that the current branch isn't dirty.

	; How to add the upstream repository to my own repository:
	;	git remote add upstream http://repo.or.cz/r/vcscommand.vim.git
	; Note: HTTPS is the default, but I've seen failures behind the corporate
	; firewall. On there other hand, I got a 403 when using HTTP.
	ubrowse = browse upstream
	uexists = existsremote upstream
	ubr = rbr upstream ; List all branches in upstream [matching <pattern>].
	ubra = bra --remote upstream
	upicks = rev-remote-command upstream cherrypicks -v --abbrev=7 ; See which changes from the current branch are already present upstream.
	uco = rco upstream ; Checkout local branch from upstream.
	ucolatest = rcolatest upstream ; Checkout local branch from latest (by sort order) upstream [matching pattern].
	ucolatestc = rcolatestc upstream ; Checkout local branch from the upstream branch [matching pattern] that was created last (except the current branch and master (and base branch if defined)).
	ucom = master-command -1 upstream/MASTER checkout ; Use with -b <newbranch> to start a patch based on the current upstream.
	ucon = base-command -1 upstream/BASE checkout ; Use with -b <newbranch> to start a patch based on the current upstream's base branch.
	;; uprune: Remove old local branches that do not exist in upstream any more.
	umdiff = master-command -1 MASTER..upstream/MASTER diff ; Show differences introduced in upstream relative to master; useful to review upstream changes before pulling them in.
	umdifftool = master-command -1 MASTER..upstream/MASTER difftool
	undiff = base-command -1 BASE..upstream/BASE diff ; Show differences introduced in upstream relative to the base branch; useful to review upstream changes before pulling them in.
	undifftool = base-command -1 BASE..upstream/BASE difftool
	udiff = rev-remote-command upstream diff ; Show differences to upstream.
	udifftool = rev-remote-command upstream difftool
	ul = rev-remote-command upstream l ; l of upstream
	ulc = rev-remote-command upstream lc ;: lc of upstream
	ulg = rev-remote-command upstream lg ;: lg of upstream
	ulog = rev-remote-command upstream log ; Log of upstream.
	umlog = master-command --keep-position rev-branch-remotebr-command upstream MASTER log ; Show log of changes introduced in upstream relative to master; useful to review upstream changes before pulling them in.
	unlog = base-command --keep-position rev-branch-remotebr-command upstream BASE log ; Show log of changes introduced in upstream relative to base; useful to review upstream changes before pulling them in.
	umlg = master-command --keep-position rev-branch-remotebr-command upstream MASTER lg ; Show one-line log of changes introduced in upstream relative to master; useful to review upstream changes before pulling them in.
	unlg = base-command --keep-position rev-branch-remotebr-command upstream BASE lg ; Show one-line log of changes introduced in upstream relative to base; useful to review upstream changes before pulling them in.
	umlc = master-command --keep-position rev-branch-remotebr-command upstream MASTER lc ; Show log and diff of changes introduced in upstream relative to master; useful to review upstream changes before pulling them in.
	unlc = base-command --keep-position rev-branch-remotebr-command upstream BASE lc ; Show log and diff of changes introduced in upstream relative to base; useful to review upstream changes before pulling them in.
	uio = inout upstream
	umio = master-command -2 MASTER upstream/MASTER inout
	unio = base-command -2 BASE upstream/BASE inout
	umrb = master-command -1 upstream/MASTER rebase ; Rebase my commits on top of the latest main upstream branch. "co mybranch" first, clone it via "git co -b mybranch-old; git opublish" if you want to keep the old one, or just use "umrb mybranch". You can also do this after the rebase, but before pushing: "git tco -b mybranch-old; git opublish; git co mybranch". Persist with "git opush -f"; undo with "git treset --hard".
	unrb = base-command -1 upstream/BASE rebase ; Rebase my commits on top of the latest base upstream branch.
	ufetch = fetch upstream	; Get upstream changes.
	;; upull: Get and fast-forward upstream changes. (With proper use of other branches for patches, there should not be a need to merge upstream.) Use for direct checkouts of upstream, without my own origin. Else, prefer ucatchup.
	;; upush: push upstream ; Directly push current / passed <branch> to upstream.
	upublish = rpublish upstream ; Initial publish of current / passed <branch> directly to upstream (without using an origin clone (for now)).
	;; uopush: push upstream + origin; Directly push current / passed <branch> to upstream and (if successful) push it to the tracking GitHub clone, too.
	;; uup: up upstream
	umerge = rev-remote-command upstream merge ; Merge upstream changes with my local repo.
	umergedr = rev-remote-command upstream mergedryrun ; Test merge of upstream changes with my local repo.
	urb = rev-remote-command upstream rebase ; Rebase my commits on top of the corresponding branch in upstream (or passed <branch>).
	urbi = rev-remote-command upstream rebase -i
	;; urebaselocalbr: Rebase all / the last committed N local branches (except for the current branch and master (and base branch if defined)) to the updated upstream head. After that, merge again via git uwipem && git mergelocalbrc; then use git opush -f --all to send the rebased branches to origin.
	; To make pull default to rebase instead of merge, can use these:
	; # make "git pull" on master always use rebase
	; $ git config branch.master.rebase true
	; You can also set up a global option to set the last property for every
	; new tracked branch:
	; # setup rebase for every tracking branch
	; $ git config --global branch.autosetuprebase always
	; Source: http://mislav.uniqpath.com/2010/07/git-tips/
	;; ufetchup-localbr: Fetch all upstream changes and then rebase all / the last committed N local branches (using a separate worktree we're not on master, suppressing standard fetch / rebase information and messages when there are no changes in upstream).
	udeletebr = push upstream --delete ; Delete remote <branch> in upstream. Older git must use "push origin :BRANCHNAME"
	uldeletebr = rldeletebr upstream ; Delete <branch> from the local repository as well as upstream.
	ulrenamebr = rlrenamebr upstream ; Rename current / <oldbranch> to <newbranch> in both local repository and upstream.

	;; oadd: Add origin repository and fetch it. Offers to rename original origin to upstream.
	uadd = remote add -f upstream	; Add upstream repository and fetch it.
	radd = remote add -f	; Add remote repository and fetch it.
	; other foreign repositories
	; To import someone's repository and work on it, do this:
	;   # Import.
	;   git remote add -f <someone> https://github.com/<someone>/<project>.git
	;   # The -f already did: git fetch <someone>
	;   # What has changed in his branch?
	;   git diff upstream/master..<someone>/<branch>
	;   git co -b <branch> <someone>/<branch>
	;   # Do changes ...
	;   # Publish to your GitHub clone to make the changes accessible to someone.
	;   git opublish <branch>
	uremotebr = remotebr upstream	; Print corresponding upstream/branch for the current / passed branch(es) (or return error).
	ureset = rev-remote-command upstream reset ; Reset my current branch to the HEAD of the corresponding / passed branch of upstream. Use this after my pull requests have been accepted into upstream (but cherry-picked, in a different order, or intermingled with other requests, so that the commit history deviates from mine), but there are still pending changes. The working copy is left intact, so you can effectively rebase any outstanding differences with a follow-up commit.
	uhardreset = rev-remote-command upstream reset --hard ; Reset my current branch to the HEAD of the corresponding / passed branch of upstream.
	uwipe = rev-remote-command upstream wipe ; Reset my current branch to the HEAD of the corresponding / passed branch of upstream. Ensures that the current branch isn't dirty.
	;; uwipem: Switch to my master branch and reset it to the HEAD of the upstream/master.
	;; uwipen: Switch to my base branch and reset it to the HEAD of the upstream/base.
	;; urestore: Reset my current branch to the HEAD of the current / passed branch of upstream, and push this to my GitHub clone. Use this after my pull requests have been accepted into upstream (but cherry-picked, in a different order, or intermingled with other requests, so that the commit history deviates from mine). Ensures that the current branch isn't dirty.
	;; ucatchup: uup + urestore; Pull and rebase upstream changes (onto potentially dirty working copy), and push this to my GitHub clone. Use this when you directly follow upstream, and want to update your repo to its most recent version.
	;; ucatchup-hushed: Variant of ucatchup that suppresses standard fetch / rebase information and messages when there are no changes in upstream. Useful when updating many repositories e.g. with git-wcdo.
	;; ufetchup: ufetch + uup + urestore; Fetch all upstream changes, then pull and rebase (onto potentially dirty working copy), and push this to my GitHub clone. Use this when you directly follow all concurrent activity in upstream, and want to update your repo to its most recent version.
	;; ufetchup-hushed: Variant of ufetchup that suppresses standard fetch / rebase information and messages when there are no changes in upstream. Useful when updating many repositories e.g. with git-wcdo.
	;; ufetchup-branch: Variant of ufetchup-hushed that fetches all upstream changes and always pulls the passed branch (using a separate worktree if the branch isn't the current one, suppressing standard fetch / rebase information and messages when there are no changes in upstream) and then pushes this branch to my GitHub clone. Useful when updating many repositories e.g. with git-wcdo.
	ufetchupm = master-command ufetchup-branch	; Fetch all upstream changes and then rebase the master branch (using a separate worktree if a different is checked out, suppressing standard fetch / rebase information and messages when there are no changes in upstream) and then push this to my GitHub clone.

	; How to create a new GitHub repository:
	; 1. git init myproject
	; 2. On GitHub, create a new repository.
	; 3. git remote add origin git@github.com:inkarkat/myproject.git
	; 4. git push -u origin master
	;
	; with the hub extension:
	; 2. [git cd]
	; 3. git create -d "description"
	; 4. git opublish
	;
	; How to fork a non-GitHub repository:
	; 1. git clone --origin=upstream http://repo.or.cz/r/vcscommand.vim.git
	; 2. On GitHub, create a new repository.
	; 3. cd vcscommand.git
	; 4. git remote add origin git@github.com:inkarkat/vcscommand.vim.git
	; 5. git push -u origin master

	;; writebackup-import: Import a directory hierarchy into Git, using existing backup files with a current date file extension as history.
	;; writebackup-ingo-import: Import a directory hierarchy into Git, extracting the commit messages from ingo's custom changelog file header from existing backup files with a current date file extension as history.
	;; remotes: Show remotes with URLs.
	;; remoteurl: Show URL of <name> (as HTTPS, even if SSH access is configured). ("hub browse -u" apparently only can do this for origin.)
	ourl = remoteurl origin
	uurl = remoteurl upstream
	;; existsremote: Check whether the passed remote has been configured in the working copy.
	;; existsremoteurl: Check whether the passed remote name / URL offers a remote repository.

	; Submodule handling; taken from http://git-scm.com/book/en/v2/Git-Tools-Submodules
	;; subdiff: Show diff of repository and any submodules, too.
	subpush = push --recurse-submodules=on-demand	; Goes into each submodule and manually pushes to the remotes to make sure they're externally available.
	subupdate = submodule update --remote --merge	; Update and merge our changes with upstream changes to the submodule.


	;; Git Flow
	feat = flow feature
	rel = flow release
	bug = flow bugfix
	hf = flow hotfix


	;; cr: Show GitHub issues and pull requests (separately).
	;; crrecent: Show recently (default 2 weeks) updated GitHub issues and pull requests (separately), including the relative creation date.
	;; crstatus: Show number of issues and pull requests.
	myissues = me-in-github-command --assignee= issue
	issuesfromme = me-in-github-command --creator= issue
	issuesaboutme = me-in-github-command --mentioned= issue
	mycrs = me-in-github-command --assignee= cr
	crsfromme = me-in-github-command --creator= cr
	crsaboutme = me-in-github-command --mentioned= cr
	myprs = me-in-github-command --assignee= pr
	prsfromme = me-in-github-command --creator= pr
	prsaboutme = me-in-github-command --mentioned= pr
	;; reviews: Show pull requests with open reviews.
	myreviews = me-in-github-command --reviewer= reviews
	reviewsofprsfromme = me-in-github-command --creator= reviews
	reviewsofmyprs = me-in-github-command --assignee= reviews
	;; prtitle: Obtain corresponding GitHub pull request(s) that have <commit>(s) as the branch's HEAD, and print its title(s; on separate lines, with a summary header listing the PR numbers followed by an empty line) then.
