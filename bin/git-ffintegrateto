#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--push] [--push-branch [--force]] [--no-merge] [--no-delete] [--rebase-single|--rebase|--ff|--ff-only|--no-ff|<merge-args> ...] [--no-submodule-update] [-y|--yes] -b|--branch <branch> | [--] <branch> [...] [-?|-h|--help]'
    echo
    printf 'Usage: GIT_REINTEGRATE_CHECK_COMMAND=CMD %q %s\n' "$(basename "$1")" '[...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '[...] --no-checks | -c|--command "CHECK-COMMANDLINE" [-c ...] | --exec SIMPLECOMMAND [...] ; [...]'
    printf 'Usage: echo CHECK-COMMANDLINES | %q %s\n' "$(basename "$1")" '[...] [--bare|[--initial-status NUM] [--trailing-prompt|--no-trailing-prompt] [--no-output-no-prompt] [--no-output-no-error] [--emulate-prompt]] [--no-success-no-count|--no-count-on N] [--exit-on-success|--exit-on-failure|--exit-on NUM] [--worst-status] [--comment COMMENT] [--summarize-failed ERROR-TEXT [--summarize-failed-separator SEP]] -'
    printf 'Usage: %q %s - <<EOF\n  CHECK-COMMANDLINE\n...\nEOF\n' "$(basename "$1")" '[...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Merge / rebase the current branch to the passed <branch> via a reverse
integration; i.e. the passed <branch> is merged / rebased to the current branch
first so that the reintegration is a simple fast-forward.

Runs CHECK-COMMAND(s), and if all succeed (for -c|--commands|--exec, for stdin:
only with --worst-status, else if the last succeeds) then do the fast-forward
and delete the current branch from the local repository as well as a tracked
remote (if it exists there).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --push		Push <branch> (to a writable upstream, tracked remote,
			origin) before deleting the reintegrated current branch.
			GitHub needs this to detect that the branch has been
			merged.
    --push-branch	Push the current branch (to the tracked remote) after
			merging in / rebasing to <branch>. Most useful in
			combination with --no-merge to prevent the deletion
			following the reintegration.
    --no-merge		Stop short of the actual fast-forward reintegration;
			just merge / rebase the passed <branch> to the current
			branch and run checks.

    --no-delete		Don't delete the reintegrated current branch from local
			repository and tracked remote.
    --rebase-single	Rebase only if the current branch is a single non-merge
			commit, else merge.
    --no-submodule-update
			Don't automatically check out resulting submodule
			versions.
    --no-checks		Don't run any default \$GIT_REINTEGRATE_CHECK_COMMAND.
    --yes		Don't query for confirmation of remote mutations.
    --bare		    Do not print a status line before and after
			    launching the COMMAND.
    --emulate-prompt	    Customizations of the prompt emulation around
    --initial-status NUM    COMMAND; cp. runWithPrompt
    --trailing-prompt
    --no-trailing-prompt
    --no-output-no-prompt
    --no-output-no-error
    --no-success-no-count   Stop on condition / summarize at end; cp. runWith
    --no-count-on N
    --exit-on-success
    --exit-on-failure	    (This also works with --bare.)
    --exit-on NUM
    --worst-status
    --comment COMMENT
    --summarize-failed ERROR-TEXT
    --summarize-failed-separator SEP
HELPTEXT
}

sourceBranch="$(git-brname --real-branch-only)" || exit $?
targetBranch=
case "$1" in
    -*)	;;
    ?*)	if git-existsbr "$1"; then
	    targetBranch="$1"
	    shift
	fi
	;;
esac

isContinue=
isDelete=t
isMerge=t
isPush=
isPushBranch=
if [ "$HUB" ]; then
    # Need to push to remote first so that GitHub recognizes that the branch has
    # been merged. If the branch is first deleted, GitHub marks a corresponding
    # pull request as "closed".
    isPush=t
fi
hasMergeResolutionArg=
isRebase=
isRebaseSingle=
targetBranch=
typeset -a fastForwardArgs=()
typeset -a mergeArgs=()
isBare=
isDisableChecks=
isCheckFromStdin=
typeset -a checkCommandArgs=()
typeset -a checkCommands=()
typeset -a bashArgs=()
runWithCommand=runWithPrompt
typeset -a runWithPromptArgs=()
typeset -a continueArgs=()
typeset -a gitRemoteMutateArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--continue)	shift; isContinue=t;;
	--no-delete)	continueArgs+=("$1"); shift; isDelete=;;
	--no-merge)	continueArgs+=("$1"); shift; isMerge=;;
	--push)		continueArgs+=("$1"); shift; isPush=t;;
	--push-branch)	continueArgs+=("$1"); shift; isPushBranch=t;;
	--branch|-b)    shift
			if [ "$targetBranch" ]; then
			    echo >&2 'ERROR: <branch> can only be passed once.'
			    exit 2
			fi
			targetBranch="${1:?}"
			shift
			;;
	--rebase)	shift; hasMergeResolutionArg=t; isRebase=t;;
	--rebase-single)
			shift; hasMergeResolutionArg=t; isRebaseSingle=t;;
	--ff|--no-ff|--ff-only)
			hasMergeResolutionArg=t; fastForwardArgs=("$1"); shift;;
	--yes|-y)	gitRemoteMutateArgs+=("$1"); shift;;
	--no-checks)	checkCommandArgs+=("$1"); shift; isDisableChecks=t;;
	--command|-c)	checkCommandArgs+=("$1" "$2"); shift; checkCommands+=(${checkCommands:+&&} "$1"); shift;;
	--exec)		checkCommandArgs+=("$1"); shift
			cmd=
			while [ $# -gt 0 -a "$1" != ';' ]
			do
			    printf -v quotedArg '%q' "$1"
			    cmd="${cmd}${cmd:+ }${quotedArg}"
			    checkCommandArgs+=("$1"); shift
			done
			if [ $# -eq 0 ]; then
			    echo 'ERROR: --exec command must be concluded with ;!'; echo; printUsage "$0"
			    exit 2
			fi >&2
			checkCommandArgs+=("$1"); shift
			checkCommands+=(${checkCommands:+&&} "$cmd")
			;;
	--bare)		shift; isBare=t; runWithCommand=runWith;;
	--exit-on-failure)
			bashArgs+=(-e); runWithPromptArgs+=("$1"); shift;;
	--trailing-prompt|--no-trailing-prompt|--no-output-no-prompt|--no-output-no-error|--no-success-no-count|--exit-on-success|--emulate-prompt|--worst-status)
			runWithPromptArgs+=("$1"); shift;;
	--initial-status|--no-count-on|--exit-on|--comment|--summarize-failed|--summarize-failed-separator)
			runWithPromptArgs+=("$1" "$2"); shift; shift;;

	-[sXm])		mergeArgs+=("$1" "$2"); shift; shift;;
	--@(strategy|strategy-option|gpg-sign)=*)	mergeArgs+=("$1"); shift;;
	--@(strategy|strategy-option|gpg-sign))		mergeArgs+=("$1" "$2"); shift; shift;;
	--no-submodule-update)				mergeArgs+=("$1"); shift;;

	--)		mergeArgs+=("$1"); shift; break;;
	--*)		mergeArgs+=("$1"); shift;;
	-)		shift; isCheckFromStdin=t; break;;
	-*)		mergeArgs+=("$1"); shift;;
	*)		break;;
    esac
done
if [ -z "$targetBranch" ]; then
    echo 'ERROR: Missing <branch>.'
    exit 2
elif [ "$targetBranch" = "$sourceBranch" ]; then
    printf 'ERROR: Cannot eintegrate %s onto itself; check out a different branch first.\n' "$targetBranch"
    exit 2
fi >&2

if [ "${!#}" = '-' ]; then
    isCheckFromStdin=t
    set -- "${@:1:$(($#-1))}"
fi
if [ "$isCheckFromStdin" ]; then
    if [ ${#checkCommands[@]} -gt 0 ]; then
	echo 'ERROR: Cannot combine CHECK-COMMANDLINE from stdin (-) with -c|--command|--exec.'
	echo
	printUsage "$0"
	exit 2
    fi >&2
elif [ -n "$GIT_REINTEGRATE_CHECK_COMMAND" -a ${#checkCommands[@]} -eq 0 ]; then
    checkCommands=("$GIT_REINTEGRATE_CHECK_COMMAND")
fi
[ "$isDisableChecks" ] && checkCommands=()

