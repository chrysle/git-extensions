#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--push] [--push-branch [--force]] [--no-merge] [--no-delete] [--rebase-single|--rebase|--ff|--ff-only|--no-ff|<merge-args> ...] [--no-submodule-update] [-y|--yes] -b|--branch <branch> | [--] <branch> [...] [-?|-h|--help]'
    echo
    printf 'Usage: GIT_REINTEGRATE_CHECK_COMMAND=CMD %q %s\n' "$(basename "$1")" '[...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '[...] --no-checks | -c|--command "CHECK-COMMANDLINE" [-c ...] | --exec SIMPLECOMMAND [...] ; [...]'
    printf 'Usage: echo CHECK-COMMANDLINES | %q %s\n' "$(basename "$1")" '[...] [--bare|[--initial-status NUM] [--trailing-prompt|--no-trailing-prompt] [--no-output-no-prompt] [--no-output-no-error] [--emulate-prompt]] [--no-success-no-count|--no-count-on N] [--exit-on-success|--exit-on-failure|--exit-on NUM] [--worst-status] [--comment COMMENT] [--summarize-failed ERROR-TEXT [--summarize-failed-separator SEP]] -'
    printf 'Usage: %q %s - <<EOF\n  CHECK-COMMANDLINE\n...\nEOF\n' "$(basename "$1")" '[...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Merge / rebase the current branch to the passed <branch> via a reverse
integration; i.e. the passed <branch> is merged / rebased to the current branch
first so that the reintegration is a simple fast-forward.

Runs CHECK-COMMAND(s), and if all succeed (for -c|--commands|--exec, for stdin:
only with --worst-status, else if the last succeeds) then do the fast-forward
and delete the current branch from the local repository as well as a tracked
remote (if it exists there).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --push		Push <branch> (to a writable upstream, tracked remote,
			origin) before deleting the reintegrated current branch.
			GitHub needs this to detect that the branch has been
			merged.
    --push-branch	Push the current branch (to the tracked remote) after
			merging in / rebasing to <branch>. Most useful in
			combination with --no-merge to prevent the deletion
			following the reintegration.
    --force		Force-push the current branch (when the branch has
			diverged from the tracked remote). Implied by
			--rebase|--rebase-single.
    --no-merge		Stop short of the actual fast-forward reintegration;
			just merge / rebase the passed <branch> to the current
			branch and run checks.

    --no-delete		Don't delete the reintegrated current branch from local
			repository and tracked remote.
    --rebase-single	Rebase only if the current branch is a single non-merge
			commit, else merge.
    --no-submodule-update
			Don't automatically check out resulting submodule
			versions.
    --no-checks		Don't run any default \$GIT_REINTEGRATE_CHECK_COMMAND.
    --yes		Don't query for confirmation of remote mutations.
    --bare		    Do not print a status line before and after
			    launching the COMMAND.
    --emulate-prompt	    Customizations of the prompt emulation around
    --initial-status NUM    COMMAND; cp. runWithPrompt
    --trailing-prompt
    --no-trailing-prompt
    --no-output-no-prompt
    --no-output-no-error
    --no-success-no-count   Stop on condition / summarize at end; cp. runWith
    --no-count-on N
    --exit-on-success
    --exit-on-failure	    (This also works with --bare.)
    --exit-on NUM
    --worst-status
    --comment COMMENT
    --summarize-failed ERROR-TEXT
    --summarize-failed-separator SEP
HELPTEXT
}

allArgs=("$@")
sourceBranch="$(git-brname --real-branch-only)" || exit $?
targetBranch=
case "$1" in
    -*)	;;
    ?*)	if git-existsbr "$1"; then
	    targetBranch="$1"
	    shift
	fi
	;;
esac

isContinue=
isKeepBranches=
isMerge=t
isPush=
isPushBranch=
typeset -a pushBranchForceArg=()
if [ "$HUB" ]; then
    # Need to push to remote first so that GitHub recognizes that the branch has
    # been merged. If the branch is first deleted, GitHub marks a corresponding
    # pull request as "closed".
    isPush=t
fi
hasMergeResolutionArg=
isRebase=
isRebaseSingle=
targetBranch=
typeset -a fastForwardArgs=()
typeset -a mergeArgs=()
isBare=
isDisableChecks=
isCheckFromStdin=
typeset -a checkCommandArgs=()
typeset -a checkCommands=()
typeset -a bashArgs=()
runWithCommand=runWithPrompt
typeset -a runWithPromptArgs=()
typeset -a continueArgs=()
typeset -a gitRemoteMutateArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--continue)	shift; isContinue=t;;
	--no-delete)	continueArgs+=("$1"); shift; isKeepBranches=t;;
	--no-merge)	continueArgs+=("$1"); shift; isMerge=;;
	--push)		continueArgs+=("$1"); shift; isPush=t;;
	--push-branch)	continueArgs+=("$1"); shift; isPushBranch=t;;
	--force)	pushBranchForceArg=("$1"); shift;;
	--branch|-b)    shift
			if [ "$targetBranch" ]; then
			    echo >&2 'ERROR: <branch> can only be passed once.'
			    exit 2
			fi
			targetBranch="${1:?}"
			shift
			;;
	--rebase)	shift; hasMergeResolutionArg=t; isRebase=t;;
	--rebase-single)
			shift; hasMergeResolutionArg=t; isRebaseSingle=t;;
	--ff|--no-ff|--ff-only)
			hasMergeResolutionArg=t; fastForwardArgs=("$1"); shift;;
	--yes|-y)	gitRemoteMutateArgs+=("$1"); shift;;
	--no-checks)	checkCommandArgs+=("$1"); shift; isDisableChecks=t;;
	--command|-c)	checkCommandArgs+=("$1" "$2"); shift; checkCommands+=(${checkCommands:+&&} "$1"); shift;;
	--exec)		checkCommandArgs+=("$1"); shift
			cmd=
			while [ $# -gt 0 -a "$1" != ';' ]
			do
			    printf -v quotedArg '%q' "$1"
			    cmd="${cmd}${cmd:+ }${quotedArg}"
			    checkCommandArgs+=("$1"); shift
			done
			if [ $# -eq 0 ]; then
			    echo 'ERROR: --exec command must be concluded with ;!'; echo; printUsage "$0"
			    exit 2
			fi >&2
			checkCommandArgs+=("$1"); shift
			checkCommands+=(${checkCommands:+&&} "$cmd")
			;;
	--bare)		shift; isBare=t; runWithCommand=runWith;;
	--exit-on-failure)
			bashArgs+=(-e); runWithPromptArgs+=("$1"); shift;;
	--trailing-prompt|--no-trailing-prompt|--no-output-no-prompt|--no-output-no-error|--no-success-no-count|--exit-on-success|--emulate-prompt|--worst-status)
			runWithPromptArgs+=("$1"); shift;;
	--initial-status|--no-count-on|--exit-on|--comment|--summarize-failed|--summarize-failed-separator)
			runWithPromptArgs+=("$1" "$2"); shift; shift;;

	-[sXm])		mergeArgs+=("$1" "$2"); shift; shift;;
	--@(strategy|strategy-option|gpg-sign)=*)	mergeArgs+=("$1"); shift;;
	--@(strategy|strategy-option|gpg-sign))		mergeArgs+=("$1" "$2"); shift; shift;;
	--no-submodule-update)				mergeArgs+=("$1"); shift;;

	--)		mergeArgs+=("$1"); shift; break;;
	--*)		mergeArgs+=("$1"); shift;;
	-)		shift; isCheckFromStdin=t; break;;
	-*)		mergeArgs+=("$1"); shift;;
	*)		break;;
    esac
done
if [ -z "$targetBranch" ]; then
    echo 'ERROR: Missing <branch>.'
    exit 2
elif [ "$targetBranch" = "$sourceBranch" ]; then
    printf 'ERROR: Cannot integrate %s onto itself; check out a different branch first.\n' "$targetBranch"
    exit 2
fi >&2

if [ "${!#}" = '-' ]; then
    isCheckFromStdin=t
    set -- "${@:1:$(($#-1))}"
fi
if [ "$isCheckFromStdin" ]; then
    if [ ${#checkCommands[@]} -gt 0 ]; then
	echo 'ERROR: Cannot combine CHECK-COMMANDLINE from stdin (-) with -c|--command|--exec.'
	echo
	printUsage "$0"
	exit 2
    fi >&2
elif [ -n "$GIT_REINTEGRATE_CHECK_COMMAND" -a ${#checkCommands[@]} -eq 0 ]; then
    checkCommands=("$GIT_REINTEGRATE_CHECK_COMMAND")
fi
[ "$isDisableChecks" ] && checkCommands=()

typeset -a contextShortener=(headtail --separator $'\t\t\t\t\t[...]')
confirmUseTarget()
{
    local question="Your $targetBranch branch is not up-to-date with ${targetTrackedRemote}."
    typeset -a additionalChoices=()
    if similarCommitNum=$(git-similarcommits "${targetBranch}..HEAD" "${targetBranch}..${targetTracks}" | wc -l) && [ $similarCommitNum -gt 0 ]; then
	local commitNum=$(git log --pretty=tformat:%H "${targetBranch}..HEAD" | wc -l)
	local commitNumPlural=s; [ $commitNum -eq 1 ] && commitNumPlural=
	question="Your $targetBranch branch is not up-to-date with ${targetTrackedRemote}, but $((100 * similarCommitNum / commitNum))% of the $commitNum commit$commitNumPlural on the current branch look similar to what you have on ${targetTrackedRemote}. If you're redoing a previously merged (and pushed) branch, please decline."
	additionalChoices=("Show [D]ifference between ${targetTrackedRemote} and the current branch")
    fi

    local choice; choice="$(userchoiceFromList --question "$question Integrate $targetTracks?" --no-cancel --ignore-case -- '[Y]es' '[N]o' 'Show [C]ontext' "${additionalChoices[@]}" '[S]hell')" || exit $?
    case "$choice" in
	Yes) ;;
	No) return 4;;
	Show\ Context)
	    echo "Context${contextShortener[*]:+ (abbreviated)}:"
	    eval "git-inout --color=always --one-more --base $targetBranch $targetTracks" "${contextShortener:+|}" '"${contextShortener[@]}"'
	    typeset -a contextShortener=()
	    confirmUseTarget "$@"
	    ;;
	Show\ Difference\ between\ *)
	    echo 'Difference:'
	    git-inout --color=always --one-more --base "$targetTracks"
	    confirmUseTarget "$@"
	    ;;
	Shell)
	    echo "Pending: Integration of $targetTracks, unless you do a non-successful exit."
	    "${SHELL:-bash}" -i || return $?
	    ;;
	*)  printf >&2 'ASSERT: Unhandled choice: %s\n' "$choice"; exit 3;;
    esac
}
canRebase()
{
    [ "$(git log --pretty=tformat:%H --max-count 2 --no-merges "${targetIntegrationSourceBranch}.." | wc -l)" -le 1 ]
}
printRestartCommand()
{
    local gitCommand='git'; [ -n "$HUB" ] && gitCommand='hub'
    local -r scriptName="$(basename -- "${BASH_SOURCE[0]}")"
    [ "$isCheckFromStdin" ] && printf >&2 'echo CHECK-COMMANDLINES | '
    printf >&2 '$ %s %q' "$gitCommand" "${scriptName#git-}"
    printf >&2 ' %q' "${allArgs[@]}"
    printf >&2 '\n'
}
printContinueCommand()
{
    local gitCommand='git'; [ -n "$HUB" ] && gitCommand='hub'
    local -r scriptName="$(basename -- "${BASH_SOURCE[0]}")"
    [ "$isCheckFromStdin" ] && printf >&2 'echo CHECK-COMMANDLINES | '
    printf >&2 '$ %s %q' "$gitCommand" "${scriptName#git-}"
    printf >&2 ' %q' '--continue' ${isBare:+--bare} "${runWithPromptArgs[@]}" "${continueArgs[@]}" "${gitRemoteMutateArgs[@]}" "${checkCommandArgs[@]}"
    printf >&2 -- ' --branch %q'  "$targetBranch"
    [ "$isCheckFromStdin" ] && printf >&2 ' -'
    printf >&2 '\n'
}
pushBranch()
{
    local sourceTracks="$(git-tracks 2>/dev/null)"
    if [ -z "$sourceTracks" ]; then
	printf >&2 "ERROR: Cannot push; no upstream configured for the current branch '%s'\\n" "$sourceBranch"
	return 1    # Still continue with the branch deletion here, but following push errors will abort.
    fi

    [ "$isRebase" ] && pushBranchForceArg=(--force) # Need to force-push when rebasing the current branch on top of <branch>.
    local sourceTrackedRemote="${sourceTracks%%/*}"
    local quotedSourceBranch; printf -v quotedSourceBranch %q "$sourceBranch"
    # Push to the tracked remote (usually origin).
    git-remote-mutate "$sourceTrackedRemote" --message 'Push' --argument "$sourceBranch" --context-command "git rev-range-outgoing $sourceTrackedRemote --color=always --one-more-command greyonelinelog --one-more-only-to-terminal lg --branch $quotedSourceBranch" "${gitRemoteMutateArgs[@]}" \
	push "${pushBranchForceArg[@]}" "$sourceTrackedRemote" || exit $?
}

targetTracks="$(git-tracks "$targetBranch" 2>/dev/null)"
targetTrackedRemote="${targetTracks%%/*}"

if [ "$isContinue" ]; then
    echo "Finalizing integration of $targetBranch"
else
    echo "Integrating $targetBranch"

    # Ensure that the current branch is good for merging.
    git-mergecheck --merge-to "$targetBranch" || exit $?

    if [ -n "$HUB" ] && [ ! "$isRebase" ]; then
	# Try to obtain corresponding pull request based on current branch's
	# HEAD commits and seed the merge message with it / them (as the PR
	# title already summarizes the changeset and makes for a great merge
	# title). This saves the user from opening the PR and copy-and-pasting
	# it.
	typeset -a prefixCommands=()
	type -t timeout >/dev/null && prefixCommands=(timeout 10 "${prefixCommands[@]}")
	type -t invocationMessage >/dev/null && prefixCommands=(invocationMessage --message 'Searching for PR...' --success FOUND --fail NONE -- "${prefixCommands[@]}")
	pullRequestTitles="$("${prefixCommands[@]}" hub-prtitle --as-merge-message)"
	[ -n "$pullRequestTitles" ] && mergeArgs+=(--message "$pullRequestTitles"$'\n\n'"Merge branch '${targetBranch}'" --edit)
    fi

    targetIntegrationSourceBranch="$targetBranch"
    if [ -n "$targetTracks" ] && ! git-equals "$targetBranch" "$targetTracks"; then
	if confirmUseTarget; then
	    targetIntegrationSourceBranch="$targetTracks"
	else
	    printf "Okay, I'll reintegrate into %s locally and you'll then have to merge with %s after that.\\n" "$targetBranch" "$targetTracks"
	fi
    fi

    if git-equals "$targetIntegrationSourceBranch" HEAD; then
	printf >&2 'Branch %s is already even with %s\n' "$targetIntegrationSourceBranch" "$sourceBranch"

	# Don't run the checks.
	checkCommands=()
	isCheckFromStdin=
    else
	if [ ! "$hasMergeResolutionArg" ]; then
	    if git-ffdryrun "$targetIntegrationSourceBranch"; then
		commitNum=$(git log --pretty=tformat:%H "HEAD..${targetIntegrationSourceBranch}" | wc -l)
		commitNumPlural=s; [ $commitNum -eq 1 ] && commitNumPlural=
		userBinaryChoice --console --question "The $commitNum commit$commitNumPlural on $targetIntegrationSourceBranch can be fast-forwarded instead of merged. Fast-forward?" --yes-no && fastForwardArgs=(--ff-only)
	    elif canRebase; then
		choice="$(userchoiceFromList --question "The current branch only consists of a single commit. Rebase it instead of creating a separate merge commit?" --no-cancel --ignore-case -- '[Y]es' '[N]o' '[Q]uit')" || exit $?
		case "$choice" in
		    Yes)
			isRebase=t;;
		    Quit)
			exit 1
			;;
		esac
	    fi
	elif [ "$isRebaseSingle" ]; then
	    canRebase && isRebase=t
	fi


	if [ "$isRebase" ]; then
	    git rebase "$targetIntegrationSourceBranch" || {
		status=$?
		echo >&2 "After the branch has been successfully rebased (see above), you can ${isCheckFromStdin:+run checks and }${isPushBranch:+push and }${isMerge:+fast-forward to $targetBranch integrate and }${isPush:+push and }${isKeepBranches:+not }delete it via"
		printContinueCommand
		exit $status
	    }
	else
	    # TODO: We want a merge with the two parents swapped here.
	    git-wrapper merge "${fastForwardArgs[@]:---no-ff}" "${mergeArgs[@]}" "$targetBranch" || {
		status=$?
		echo >&2 "After the branch has been merged, you can ${isCheckFromStdin:+run checks and }${isPushBranch:+push and }${isMerge:+fast-forward integrate to $targetBranch and }${isPush:+push and }${isKeepBranches:+not }delete it via"
		printContinueCommand
		exit $status
	    }
	fi
    fi
fi  # End of actual merge; continue finalization from here.


if [ "$isCheckFromStdin" ]; then
    if [ "$isBare" ] && [ ${#runWithPromptArgs[@]} -eq 0 -o "${#runWithPromptArgs[*]}" = --exit-on-failure ]; then
	bash "${bashArgs[@]}" -
    else
	${runWithCommand:?} "${runWithPromptArgs[@]}"
    fi
elif [ ${#checkCommands[@]} -gt 0 ]; then
    (eval "${checkCommands[@]}")
fi || {
    status=$?
    echo >&2 "Checks failed; $targetIntegrationSourceBranch has been integrated into the current branch, but the current branch has not been ${isPushBranch:+pushed and }${isMerge:+fast-forward integrated to $targetBranch and }${isPush:+pushed or }${isKeepBranches:+not }deleted yet."
    echo >&2 'Correct the problem by amending or additional commits, then invoke'
    printRestartCommand	# If the current branch has been modified, the reintegration need to be restarted to be able to fast-forward. We cannot simply continue after the original integration commit has been left behind.
    echo >&2 'to restart the fast-forwarding integration. If the checks just failed due to an external issue and you would like to try again, invoke'
    printContinueCommand
    exit $status
}

status=0
[ ! "$isPushBranch" ] || pushBranch || status=$?
