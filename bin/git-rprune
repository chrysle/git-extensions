#!/bin/bash
# Source: http://stackoverflow.com/questions/13064613/git-how-to-prune-local-tracking-branches-that-do-not-exist-on-remote-anymore

contains()
{
    needle=$1
    shift
    for elem
    do
	[ "$needle" = "$elem" ] && return 0
    done
    return 1
}

printUsage()
{
    cat <<HELPTEXT
Remove old local branches that do not exist in ${remote:-REMOTE} any more.
With --test, only print which local branches would be deleted.
Note: To do this automatically on each fetch / pull:
    git config --global fetch.prune true
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" "${remote:-REMOTE} [-t|--test|-f|--force] [-?|-h|--help]"
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac

remote="${1:?}"; shift

isTest=
branchDeleteOption=-d
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)		shift; printUsage "$0"; exit 0;;
	-f|--force)		shift; branchDeleteOption=-D;;
	-t|--test)		shift; isTest=t;;
	--)			shift; break;;
	-*)			{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)			break;;
    esac
done
if [ $# -ne 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

readarray -t remoteBranches < <(git branch -r | grep "^  ${remote}/" | awk '{print $1}')
readarray -t localBranches < <(git branch | awk '{print $NF}')

status=0
for localBranch in "${localBranches[@]}"
do
    trackedRemote="$(git config "branch.${localBranch}.remote" 2>/dev/null)"
    if [ "$trackedRemote" = "$remote" ]; then
	trackedBranch="$(git config "branch.${localBranch}.merge")"
	if ! contains "${remote}/${trackedBranch##refs/heads/}" "${remoteBranches[@]}"; then
	    if [ "$isTest" ]; then
		echo "Prune $localBranch"
	    else
		git branch $branchDeleteOption "$localBranch" || status=$?
	    fi
	fi
    fi
done
exit $status
