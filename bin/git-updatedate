#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Show when the last update of the local repository (fetch or push) happened. With
-v|--verbose, also which action (and pushed to where). For pushes, considers the
tracked branch, or passed REMOTE[/BRANCH](s).
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-v|--verbose] [-a|--absolute|--epoch] [REMOTE[/BRANCH] ...] [-?|-h|--help]'
}

: ${GIT_UPDATEDATE_ATTENTION_THRESHOLD:=86400} # Add exclamation mark if older than 1 day.
: ${GIT_UPDATEDATE_SIMULTANEOUS_THRESHOLD:=30}	# Include both remotes if pushes happened within that timespan.
dateFormat='relative'
isVerbose=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--absolute|-a)	shift; dateFormat='absolute';;
	--epoch)	shift; dateFormat='epoch';;
	--verbose|-v)	shift; isVerbose=t;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    remoteBranch=$(git-tracks) || exit $?
    set -- "$remoteBranch"
fi

getPushDate()
{
    local latestRefLogLine; latestRefLogLine="$(git reflog show --date=local "$remoteBranch" | head -n 1)" || exit $?

    # XXX: Though I can influence the reflog output via "--format=%cd"; this shows
    # different dates; there doesn't seem to be a symbol for the reflog date.
    # Therefore, stick to the default format and manually parse out the date.
    local latestDate="${latestRefLogLine##*@\{}"
    latestDate="${latestDate%\}*}"
    latestDate="$(date --date "$latestDate" +%s)" || exit $?
    printf %s "$latestDate"
}

fetchEpoch=$(git-fetchdate --epoch) || exit $?
newestEpoch=$fetchEpoch
newestAction=fetched

for remote
do
    case "$remote" in
	*/*)	remoteBranch="$remote"; remote="${remote%%/*}";;
	*)	remoteBranch="${remote}/$(git-brname --real-branch-only)" || exit $?;;
    esac
    if ! git-existsbr "$remoteBranch"; then
	printf >&2 'ERROR: Remote branch %s does not exist!\n' "$remoteBranch"
	exit 1
    fi

    epoch="$(getPushDate "$remoteBranch")" || continue
    ((epoch == fetchEpoch)) && continue	# A pull automatically updates the pushdate, too.
    ((epoch + GIT_UPDATEDATE_SIMULTANEOUS_THRESHOLD > newestEpoch)) || continue	# Also accept slightly older dates.

    if [ "$newestAction" = 'fetched' ] || ((epoch - GIT_UPDATEDATE_SIMULTANEOUS_THRESHOLD > newestEpoch)); then
	newestAction="pushed to $remote"
    else
	newestAction+=" and $remote"
    fi

    ((epoch > newestEpoch)) && newestEpoch=$epoch
done

case "$dateFormat" in
    absolute)	newestDate=$(date --date "@$newestEpoch");;
    epoch)	newestDate=$newestEpoch;;
    relative)	newestDate=$(reldate --epoch "$newestEpoch");;
    *)		printf >&2 'ASSERT: Invalid dateFormat: %s\n' "$dateFomat"; exit 2;;
esac

if [ "$isVerbose" ]; then
    outdatedAttention=.
    now=$(date +%s)
    ((now - newestEpoch > GIT_UPDATEDATE_ATTENTION_THRESHOLD)) && outdatedAttention='!'
    printf 'Last %s %s%s\n' "$newestAction" "$newestDate" "$outdatedAttention"
else
    printf '%s\n' "$newestDate"
fi
