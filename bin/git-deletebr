#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Delete branch; use oldeletebr to remove the branch in origin, too (and odeletebr
to just delete it in origin).
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-f|--force] <branchname> ... [-?|-h|--help]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
esac


typeset -a forceArgs=()
case "$1" in
    --force|-f)	forceArgs+=("$1"); shift;;
esac

deleteRemoteBranches()
{
    [ ${#remoteBranches[@]} -gt 0 ] || return

    git-remote-mutate "${remote:?}" --message 'Delete branch(es)' --arguments "${remoteBranches[@]}" \; \
	push "${forceArgs[@]}" "${remote:?}" --delete "${remoteBranches[@]}" || status=$?
    remoteBranches=()
}

status=0
typeset -a remoteBranches=()
for branch
do
    remoteCandidate="${branch%%/*}"
    if git-existsremote "$remoteCandidate"; then
	if [ "$remoteCandidate" = "$remote" ]; then
	    remoteBranches+=("${branch#*/}")
	else
	    deleteRemoteBranches
	    remote="$remoteCandidate"
	    remoteBranches=("${branch#*/}")
	fi
    else
	git branch "${forceArgs[@]}" --delete "$branch" || status=$?
    fi
done
deleteRemoteBranches
exit $status
