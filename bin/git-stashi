#!/bin/bash
# Source: https://stackoverflow.com/a/39644782/813602
set -e # Terminate the script at first error.

printUsage()
{
    cat <<HELPTEXT
Save only index in a commit; keep the dirty working copy.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-p|--patch] [-q|--quiet] [<message>] [-?|-h|--help]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac

# There's no direct way (a la --keep-working-copy) to ignore unstaged changes,
# so it has to be done the other way around, by first temporarily stashing the
# working copy, then the index, then undoing the working copy stashing.

# Stash only unstaged changes not yet in the index temporarily.
git stash --keep-index

# Stash everything that remains (only the staged changes should remain). This is
# the stash we want to keep, allow to give it a name / influence the stashing
# via additional arguments.
git stash save "$@"

# Apply the original stash to get us back to where we started.
git stash apply stash@{1}

# Create a temporary patch to reverse the originally staged changes and apply
# it.
git stash show -p | git apply -R

# Delete the temporary stash.
git stash drop stash@{1}
