#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Execute GIT-COMMAND with BRANCH argument(s) replaced by / appending the name of
the last still-existing branch found in the reflog.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" 'GIT-COMMAND [...] [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '--keep-position GIT-COMMAND [... BRANCH ...] [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '-N BRANCH GIT-COMMAND [...] [-?|-h|--help]'
}

branch=
typeset -a args=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--)		args+=("$1"); shift; break;;
	*)		args+=("$1"); shift;;
    esac
done
set -- "${args[@]}" "$@"

if [ $# -eq 0 ]; then
    echo >&2 'ERROR: No GIT-COMMAND passed.'
    exit 2
fi

branch="$(
    while IFS= read -r name
    do
	if [[ ! "$name" =~ ~[0-9]+$ ]] && git-existsbr "$name"; then
	    printf '%s\n' "$name"
	    break
	fi
    done < <(git reflog show --pretty='tformat:%H' | git name-rev --stdin --name-only --exclude 'refs/tags/*' --exclude 'refs/remotes/*')
)"
if [ -z "$branch" ]; then
    echo >&2 'ERROR: No previous branch found in reflog.'
    exit 1
fi

case "$1" in
    -[1-9])
	typeset branchArgNum=${1#-}
	typeset -a branchArgs=("${@:2:${branchArgNum}}")
	set -- "${@:$((2 + branchArgNum))}"

	branchArgs=("${branchArgs[@]//BRANCH/${branch}}")

	exec git-wrapper "$@" "${branchArgs[@]}"
	;;
    --keep-position)
	shift
	exec git-wrapper "${@//BRANCH/${branch}}"
	;;
    *)
	exec git-wrapper "$@" "$branch"
	;;
esac
