#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Apply and immediately commit each change (individually), recording the existing
commit id(s) in the commit message, like the merge tracking in Subversion.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[CHERRY-PICK-ARGS ...] <commit> ... [-?|-h|--help]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac


# XXX: The man page for -x says "This is done only for cherry picks without
# conflicts.", but I found this not to be true (git version 2.7.4). Actually, I
# wanted to implement a work-around for that, because I want a reference to the
# original commit also for conflicted merges.
exec git cherry-pick -x "$@"
