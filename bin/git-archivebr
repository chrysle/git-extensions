#!/bin/bash
# Source: http://www.aaronwest.net/blog/index.cfm/2011/6/7/Git-Workflows-Archiving-Old-Branches
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Tag <branch>(es), then delete it from the local repository (as well as origin if
it exists).
Use this to remove old branches that have been fully merged. If not incorporated
(e.g. an abandoned experiment), pass -f to force archiving.
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-f|--force] [-m <msg>|--message=<msg>|-F <file>|--file=<file>] [--] [<remote>/]<branch> [...] [-?|-h|--help]'
}

branchDeleteOption=-d
isForce=
typeset -a gitTagArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	-f|--force)	shift; branchDeleteOption=-D; isForce=t;;
	--@(message|file)|-[mF])
			gitTagArgs+=("$1" "$2"); shift; shift;;
	--@(message|file)=*)
			gitTagArgs+=("$1"); shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    echo >&2 'Need <branch> to archive!'
    exit 2
fi

status=0
typeset -a localBranches=()
typeset -a originBranches=()
for branch
do
    commit="$branch"

    # When archiving a remote branch, don't include the remote itself in the
    # archived branch name.
    [[ "$branch" =~ ^([^/]+)/(.+)$ ]] && \
	git existsremote "${BASH_REMATCH[1]}" && \
	branch="${BASH_REMATCH[2]}"

    if git tag ${isForce:+--force} "${gitTagArgs[@]}" "archive/$branch" "$commit"; then
	[ "$branch" = "$commit" ] && localBranches+=("$branch")
	git existsbr "origin/$branch" && originBranches+=("$branch")
    else
	status=1
    fi
done
[ $status -eq 0 ] || exit $status

! git existsremote origin || git push ${isForce:+--force} --tags origin || exit $?

# Note: Process all passed branches in one fell swoop; this avoid re-querying
# (on push) the remote repository credentials for each branch. When one branch
# is invalid, an error is returned, but following (valid) branches are still
# processed: just as we'd like.
status=0
[ ${#localBranches[@]} -eq 0 ] || git branch $branchDeleteOption "${localBranches[@]}" || status=$?
[ ${#originBranches[@]} -eq 0 ] || ! git existsremote origin || git push origin --delete "${originBranches[@]}" || status=$?
exit $status
