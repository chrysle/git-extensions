#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Print corresponding remote/branch for the current / passed branch(es) (or return error).
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "${remote:-REMOTE} [<branch> [...]] [-?|-h|--help]"
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
esac

remote=${1:?}; shift

case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
esac

if [ $# -eq 0 ]; then
    branch=$(git-brname --real-branch-only) || exit $?
    set -- "$branch"
fi

status=0
for branch
do
    trackedBranch=$(git-tracks "$branch" 2>/dev/null)
    if [ "${trackedBranch%%/*}" = "$remote" ]; then
	remoteCandidate=$trackedBranch
    else
	remoteCandidate="${remote}/$branch"
    fi

    if git-existsbr "$remoteCandidate"; then
	printf '%s\n' "$remoteCandidate"
    else
	if git-existsremote "$remote"; then
	    printf >&2 '%s does not have a branch for %s.\n' "$remote" "$branch"
	else
	    printf >&2 '%s does not exist as a remote.\n' "$remote"
	fi
	status=1
    fi
done
exit $status
