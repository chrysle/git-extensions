#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Create <path> and checkout a new working directory that is linked to the current
repository, using the same HEAD but as a detached checkout. In contrast to a
normal "git worktree add", submodules will not be simply duplicated (and then
require separate pulling and pushing to keep in sync), but are also checked out
as worktrees (currently not yet recursively though).
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-n|--dry-run] <path> [-?|-h|--help]'
}
action=add
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --dry-run|-n)	shift; action=print;;
esac
if [ $# -ne 1 ]; then
    printUsage "$0" >&2
    exit 2
fi

targetDirspec="$(realpath --no-symlinks -- "${PWD}/${1:?}")" || exit 3
if [ -e "$targetDirspec" ]; then
    printf >&2 'ERROR: Worktree target already exists: %s\n' "$targetDirspec"
    exit 1
fi

add()
{
    local module="${1?}"; shift
    local worktreeDirspec="${1:?}"; shift
    git "$@" worktree add --detach "$worktreeDirspec" || return $?


    if [ -n "$module" ]; then
	local literalModulePattern="$(printf %s "$module" | sed -e 's/[][\$*.^/]/\\&/g')"
	local literalModule="$module"
	literalModule="${literalModule//\\/\\\\}"
	literalModule="${literalModule//&/\\&}"
	sed -i "/^gitdir: .*\/modules\/${literalModulePattern}\$/s#\$#/worktrees/${literalModule//#/\\#}#" "${worktreeDirspec}/.git" || return $?
    fi
}
print()
{
    local module="${1:?}"; shift
    local worktreeDirspec="${1:?}"; shift
    moduleSubPath=; [ $# -gt 0 ] && moduleSubPath="${!#}"
    printf "Would create %s in %s\\n" "${moduleSubPath:-worktree}" "$worktreeDirspec"
}

$action '' "$targetDirspec" || exit $?
cd "$(git rev-parse --git-dir)" || exit $?
IFS=$'\n'
status=0
for module in $(git config --blob HEAD:.gitmodules -l --name-only | awk -F . '/\.path$/ { print $2 }')
do
    if [ -d "modules/$module" ]; then
	modulePath="$(git config --blob HEAD:.gitmodules --get "submodule.${module}.path")" && \
	    $action "$module" "${targetDirspec}/${modulePath}" -C "modules/$module" || \
	    status=$?
    fi
done
exit $status
