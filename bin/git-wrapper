#!/bin/bash

fixPath()
{
    # XXX: Git puts itself in front of the PATH; need precedence for our
    # scripts, though. Solve this by putting our dirspec in front again. Take
    # that, Git!
    readonly scriptDir="$([ "${BASH_SOURCE[0]}" ] && absoluteScriptFile="$(readlink -nf -- "${BASH_SOURCE[0]}")" && dirname -- "$absoluteScriptFile" || exit 3)"
    [ -d "$scriptDir" ] || { echo >&2 "ERROR: Cannot determine script directory!"; exit 3; }
    PATH="${scriptDir}:$PATH"
}

wrappedCommand=git
gitSubAlias="git-$1-$2"
gitAlias="git-$1"
if type -t hub >/dev/null; then
    wrappedCommand=hub	# Built-in Git / hub commands are always executed through hub.

    # When there are both git-* and hub-* commands, only invoke the hub-*
    # variant when actually invoked via "hub" (or when the client expressly
    # chooses the hub variant via HUB=t), but not when invoked via "git".
    # This allows us to obtain different functionality depending on what command
    # is used to invoke it.
    hubSubAlias="hub-$1-$2"
    hubAlias="hub-$1"
    if type -t "$hubSubAlias" >/dev/null && { [ "$HUB" ] || ! type -t "$gitSubAlias" >/dev/null; }; then
	shift; shift
	fixPath
	$hubSubAlias "$@"
	exit $?
    elif type -t "$hubAlias" >/dev/null && { [ "$HUB" ] || ! type -t "$gitAlias" >/dev/null; }; then
	shift
	fixPath
	$hubAlias "$@"
	exit $?
    fi
fi

if type -t "$gitSubAlias" >/dev/null; then
    shift; shift
    fixPath
    $gitSubAlias "$@"
elif type -t "$gitAlias" >/dev/null; then
    shift
    fixPath
    $gitAlias "$@"
else
    exec "$wrappedCommand" "$@"
fi
