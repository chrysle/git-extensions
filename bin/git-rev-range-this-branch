#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Print / execute GIT-COMMAND with the revision range that comprises the current
branch / N previous branches; possibly including one previous commit (from which
was branched off).
The revision range (with --no-range, only the starting revision will be used) is
appended at the end of GIT-COMMAND ...; with --keep-last, it is put between the
next-to-last and last arguments.
A different GIT-COMMAND2 can be used for the --one-more revision; with ^[1|2],
the modifier instead is appended to the revision, and there's only one
invocation of GIT-COMMAND.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-n|--branch-number N] [--no-range] [-b|--branch BRANCH|--start-rev REV] [-a|--any|-r|--include-remote-refs|-t|--include-tags [...]] [--keep-last] [+1|--one-more|--one-more-command GIT-COMMAND2|^[1|2]] [--] [GIT-COMMAND ...] [-?|-h|--help]'
}

let branchNumber=1
isAny=
startRev=
typeset -a includedScopes=('heads')
typeset -a revRangeArgs=()
isWithRange=t
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)			shift; printUsage "$0"; exit 0;;
	--branch-number|-n)		shift; branchNumber="$1"; shift;;
	--start-rev|--branch|-b)	shift; startRev="$1"; shift;;
	--any|-a)			shift; isAny=t;;
	--include-remote-refs|-r)	shift; includedScopes+=('remotes');;
	--include-tags|-t)		shift; includedScopes+=('tags');;
	--no-range)			revRangeArgs+=("$1"); shift; isWithRange=;;
	--)				revRangeArgs+=("$1"); shift; break;;
	*)				revRangeArgs+=("$1"); shift;;
    esac
done

contains()
{
    needle=$1
    shift
    for elem
    do
	[ "$needle" = "$elem" ] && return 0
    done
    return 1
}

includedRemote=
if [ ! "$isAny" ] && [ -n "$startRev" ] && ! contains 'remotes' "${includedScopes[@]}" && branchRemote="${startRev%%/*}" && git-existsremote "$branchRemote"; then
    # Only accept other branches from the same remote that the BRANCH is from.
    includedRemote="remotes/$branchRemote"
fi


previousRev="${startRev:-HEAD}"
let branchCnt=0
while [ $branchCnt -lt $branchNumber ]
do
    while :
    do
	# This will exit eventually with
	#	"fatal: Not a valid object name REV^" or
	#	"fatal: No tags can describe REV".
	if ! previousRev="$(git describe --abbrev=0 --all "${previousRev}^" 2>/dev/null)"; then
	    printf >&2 'ERROR: Cannot find base commit for %s\n' "${startRev:-the current branch.}"
	    exit 1
	fi

	[ "$isAny" ] && break
	if [ -n "$includedRemote" ]; then
	    [[ "$previousRev" =~ ^"$includedRemote"/ ]]
	else
	    contains "${previousRev%%/*}" "${includedScopes[@]}"
	fi && break
    done
    let branchCnt+=1
done

[ "$isWithRange" ] || startRev=''   # Prevent "ERROR: --end-revision cannot be combined with --no-range!"; we don't need the end revision, as --no-range drops that, anyway.

exec git-rev-range --revision "${previousRev#heads/}" ${startRev:+--end-revision} $startRev "${revRangeArgs[@]}" "$@"
