#!/bin/bash
shopt -qs extglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--accept-single] [--single-only] [--range-is-last] ... --since <date>|--max-count <number>|-n <number>|<range> [<git-command-args> ...] [--] [FILE ...] [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... GIT-COMMAND [GIT-COMMAND-ARGS ...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... --keep-position GIT-COMMAND [... COMMITS ...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [-2 GIT-COMMAND ARG1|-3 GIT-COMMAND ARG1 ARG2|...] [...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [+1 ARG1|+2 ARG1 ARG2|+3 ARG1 ARG2 ARG3|...] GIT-COMMAND [...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute GIT-COMMAND for the commit interactively chosen from the commits [that
cover FILE ...] in the passed <range>
- appended
- replacing COMMITS argument(s) anywhere
- replacing COMMITS in the following GIT-COMMAND and -(N-1) arguments
- replacing COMMITS in the following +(N) arguments and appending those
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --range-is-last The last argument is the range. Use if the range looks like
		    A..B,  not --since or --max-count, and doesn't immediately
		    follow GIT-COMMAND.
HELPTEXT
}
isRangeLastArg=
typeset -a commandOnSelectedArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--accept-single|--single-only)
			commandOnSelectedArgs+=("$1"); shift;;
	--range-is-last)
			shift; isRangeLastArg=t;;
	*)		break;;
    esac
done

if [ $# -eq 0 ]; then
    echo >&2 'ERROR: No GIT-COMMAND passed.'
    exit 2
fi

isCountedAppend=
typeset -a countedAppendGitCommand=()
case "$1" in
    +[1-9])
	isCountedAppend=t;&
    -[1-9])
	typeset countedArgNum=${1#[+-]}
	typeset countedArgNum=${1#-}
	typeset -a countedArgs=("${@:2:${countedArgNum}}")
	set -- "${@:$((2 + countedArgNum))}"
	if [ "$isCountedAppend" ]; then
	    # Need to shift the GIT-COMMAND off to avoid that it is later parsed off as a rangeArg.
	    countedAppendGitCommand=("$1"); shift
	fi

	executor()
	{
	    typeset -a appendedArgs=()
	    for arg in "${countedArgs[@]}"
	    do
		if [ "$arg" = 'COMMITS' ]; then
		    appendedArgs+=("${commits[@]}")
		else
		    appendedArgs+=("$arg")
		fi
	    done

	    [ "$isCountedAppend" ] \
		&& exec git-wrapper "${countedAppendGitCommand[@]}" "$@" "${appendedArgs[@]}" \
		|| exec git-wrapper "${appendedArgs[@]}" "$@"
	}
	;;
    --keep-position)
	shift

	executor()
	{
	    typeset -a appendedArgs=()
	    for arg
	    do
		if [ "$arg" = 'COMMITS' ]; then
		    appendedArgs+=("${commits[@]}")
		else
		    appendedArgs+=("$arg")
		fi
	    done

	    exec git-wrapper "${appendedArgs[@]}"
	}
	;;
    *)
	executor()
	{
	    exec git-wrapper "$@" "${commits[@]}"
	}
	;;
esac

typeset -a gitCommandArgs=()
typeset -a files=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--)		shift; files=("$@"); break;;
	*)		gitCommandArgs+=("$1"); shift;;
    esac
done
if [ ${#files[@]} -eq 0 ]; then
    # No files after -- captured yet; need to investigate parsed and
    # remaining args from behind for files.
    gitCommandArgs+=("$@")
    while [ ${#gitCommandArgs[@]} -ne 0 ]
    do
	lastArg="${gitCommandArgs[-1]}"
	[ -e "$lastArg" ] || break

	files=("$lastArg" "${files[@]}")
	gitCommandArgs=("${gitCommandArgs[@]:0:${#gitCommandArgs[@]}-1}")
    done
fi
set -- "${gitCommandArgs[@]}"

typeset -a rangeArgs=()
typeset -a rangeModificationArgs=()
if [ "$isRangeLastArg" ] && [ $# -gt 0 ]; then
    rangeArgs=("${!#}")
    set -- "${@:1:$(($#-1))}"
else
    while [ $# -ne 0 ]
    do
	case "$1" in
	    --since)	    rangeArgs+=("$1" "$2"); shift; shift;;
	    --max-count|-n) rangeArgs+=("$1" "$2"); shift; shift;;
	    --max-count=*|-+([0-9]))
			    rangeArgs+=("$1"); shift;;
	    --follow)	    rangeModificationArgs+=("$1"); shift;;
	    *)		    if [ ${#rangeArgs[@]} -eq 0 ]; then
				rangeArgs+=("$1"); shift
			    fi
			    break
			    ;;
	esac
    done
fi
if [ ${#rangeArgs[@]} -eq 0 ] && [ ! "$GIT_SELECTEDCOMMIT_NO_MANDATORY_RANGE" ]; then
    echo >&2 'ERROR: Need <range>.'
    exit 2
fi

readarray -t commits < <(
    eval "git ${GIT_SELECTEDCOMMIT_COMMAND:-log}" '--pretty="tformat:%H ${GIT_SELECTEDCOMMIT_COMMAND_FORMAT:-%s}" "${rangeModificationArgs[@]}" "${rangeArgs[@]}" ${files:+--} "${files[@]}"' | \
    truncate-trailing -w | commandWithHiddenId --stdin -p -c "commandOnSelected --stdin${commandOnSelectedArgs:+ }${commandOnSelectedArgs[*]}"
    printf '\n%d\n' "$?"
)   # Exit status from the process substitution is lost; return the actual exit status via an appended additional line.
status=${commits[-1]}
unset 'commits[-1]'
[ -z "${commits[-1]}" ] && unset 'commits[-1]'

if [ $status -eq 124 ]; then
    echo >&2 'ERROR: No commits available.'
    exit 1
elif [ $status -ne 0 ]; then
    exit $status
fi

executor "$@"
