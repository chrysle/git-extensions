#!/bin/bash
set -o noglob
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Execute GIT-COMMAND for the commit interactively chosen from the commits [that
cover FILE ...] in the passed <range>.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--accept-single] [--single-only] [-c ...] GIT-COMMAND --since <date>|<range> [<git-command-args> ...] [--] [FILE ...] [-?|-h|--help]'
}
typeset -a commandOnSelectedArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--accept-single|--single-only)
			commandOnSelectedArgs+=("$1"); shift;;
	*)		break;;
    esac
done

if [ $# -eq 0 ]; then
    echo >&2 'ERROR: No GIT-COMMAND passed.'
    exit 2
fi
typeset -a gitCommand=()
while [ $# -ne 0 ]
do
    case "$1" in
	-c) gitCommand+=("$1" "$2"); shift; shift;;
	*)  eval "gitCommand+=($1)"	# Note: The Git command itself can consist of command + arguments, so it must not be quoted here!
	    shift; break;;
    esac
done

typeset -a gitCommandArgs=()
typeset -a files=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--)		shift; files=("$@"); break;;
	*)		gitCommandArgs+=("$1"); shift;;
    esac
done
if [ ${#files[@]} -eq 0 ]; then
    # No files after -- captured yet; need to investigate parsed and
    # remaining args from behind for files.
    gitCommandArgs+=("$@")
    while [ ${#gitCommandArgs[@]} -ne 0 ]
    do
	lastArg="${gitCommandArgs[-1]}"
	[ -e "$lastArg" ] || break

	files=("$lastArg" "${files[@]}")
	gitCommandArgs=("${gitCommandArgs[@]:0:${#gitCommandArgs[@]}-1}")
    done
fi
set -- "${gitCommandArgs[@]}"

typeset -a rangeArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--since)	rangeArgs+=("$1" "$2"); shift; shift;;
	--max-count|-n)	rangeArgs+=("$1" "$2"); shift; shift;;
	--max-count=*|-+([0-9]))
			rangeArgs+=("$1"); shift;;
	*)		rangeArgs+=("$1"); shift; break;;
    esac
done
if [ ${#rangeArgs[@]} -eq 0 ]; then
    echo >&2 'ERROR: Need <range>.'
    exit 2
fi

IFS=$'\n'
typeset -a commits; commits=($(
    git log --pretty='tformat:%H %s' "${rangeArgs[@]}" ${files:+--} "${files[@]}" | \
    truncate-trailing -w | commandWithHiddenId --stdin -p -c "commandOnSelected --stdin${commandOnSelectedArgs:+ }${commandOnSelectedArgs[*]}"
))
status=$?
if [ $status -eq 124 ]; then
    echo >&2 'ERROR: No commits available.'
    exit 1
elif [ $status -ne 0 ]; then
    exit $status
fi

exec git-wrapper "${gitCommand[@]}" "$@" "${commits[@]}"
