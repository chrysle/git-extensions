#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--subpath] [--] [DIR|FILE] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Show relative path of the CWD / passed DIR|FILE in relation to its Git working
copy root.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --subpath		Omit the filename from FILE; i.e. just print the path to
			it (or nothing if the FILE is in the repository root).
HELPTEXT
}
isDropBasename=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--subpath)	shift; isDropBasename=t;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

basename=
case $# in
    0)	;;
    1)	if [ -d "$1" ]; then
	    dirspec="$1"
	else
	    dirspec="$(dirname -- "$1")"
	    [ "$isDropBasename" ] || basename="$(basename -- "$1")"
	fi
	[ "$dirspec" = '.' ] || cd "$dirspec" || exit 3
	;;
    *)	printUsage "$0" >&2
	exit 2
	;;
esac
prefix="$(git rev-parse --show-prefix)" || exit 3
printf '%s%s\n' "$prefix" "$basename"
