#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Update the expansion of \$Id\$ to \$Id:...\$ via ident in the .gitattributes
after a commit.
To do this automatically in the future, invoke with --install.
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--install|--uninstall|--status|--set [<path>[ <path> ...]] ...] [-?|-h|--help]'
    printf 'Example: %q %s && git commituntracked -m "Housekeeping: Add ident-update for applications"\n' "$(basename "$1")" '--install --set bin/'
}

printf -v hookInvocation %q "$(basename -- "$0")"
hookShebang='#!/bin/sh'
hookExec="exec $hookInvocation"

getHookFilespec()
{
    printf %s "$(git rev-parse --git-dir)/hooks/post-commit"
}

didAction=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	    shift; printUsage "$0"; exit 0;;
	--install)	    shift
			    hook="$(getHookFilespec)"
			    if [ -e "$hook" ]; then
				printf 'A hook already exists; add the following to "%s":\n%s\n' "$hook" "$hookInvocation"
				exit 1
			    else
				printf '%s\n' "$hookShebang" "$hookExec" >> "$hook" && \
				    chmod +x "$hook" && \
				    printf 'Hook installed to "%s".\n' "$hook" || \
				    exit $?
			    fi
			    ;;
	--uninstall|--deinstall|--remove)
			    shift
			    if [ -z "${SED+t}" ]; then which sedInplaceAndDeleteEmpty >/dev/null 2>&1 && SED='sedInplaceAndDeleteEmpty' || SED='sed'; fi
			    find . -name .gitattributes -exec "$SED" -i -e '/\bident\b/d' {} \;
			    shopt -qs globstar; git status --short -- **/.gitattributes

			    hook="$(getHookFilespec)"
			    echo "Remove the hook from \"${hook}\" yourself!"
			    exit 1
			    ;;
	--status)	    shift
			    hook="$(getHookFilespec)"
			    if [ -x "$hook" ] && grep -q -e "$(basename -- "$0")" "$hook"; then
				coveredFiles="$(find . -name .gitattributes -exec grep -H -e '\bident\b' {} \;)"
				if [ "$coveredFiles" ]; then
				    echo 'The hook is installed; $Id$ and $Id:...$ will be updated in the following directories for files matching the subsequent patterns:'
				    printf '%s\n' "$coveredFiles"
				    didAction=t
				else
				    cat <<'INSTRUCTIONS'
    The hook is installed, but no .gitattributes have been configured yet.
    To apply the $Id$ and $Id:...$ replacement for all files in the repository,
    execute:
    echo '* ident' >> .gitattributes
    git commit .gitattributes
    Alternatively, you can use
INSTRUCTIONS
				    printf '%q --set [<path>]\n' "$(basename -- "$0")"
				    cat <<'INSTRUCTIONS'
    git commit [<path>/].gitattributes
INSTRUCTIONS
				    exit 2
				fi
			    else
				printf >&2 'The hook is not installed in this repository; use %q --install to do so.\n' "$(basename -- "$0")"
				exit 1
			    fi
			    ;;
	--set)		    shift
			    if [ $# -eq 0 ]; then
				echo '* ident' >> .gitattributes
			    else
				while [ $# -ne 0 ]
				do
				    case "$1" in
					--*)	break;;
					*)	echo '* ident' >> "${1%/}/.gitattributes"; shift;;
				    esac
				done
			    fi
			    didAction=t
			    ;;
	-*)		    { echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		    printUsage "$0" >&2; exit 2;;
    esac
done
[ "$didAction" ] && exit 0

case ",${DEBUG}," in *,git-ident-update,*) echo '**** git-ident-update hook called';; esac
readonly orig="$(git-orig-ref)"
if [ -z "$orig" ]; then
    printf >&2 '%q: Failed to get the symbolic ref to the current branch; cannot update the ident attribute!\n' "$(basename -- "$0")"
    exit 3
fi

git checkout --quiet HEAD^ 2>/dev/null && git checkout --quiet "$orig" || exit $?

isIdentUpdate=
set -o noglob
IFS=$'\n'
for file in $(git diff --name-only --diff-filter=ACMR HEAD^)
do
    attrCheck="$(git check-attr ident -- "$file")"
    if [ "${attrCheck%: ident: set}" != "$attrCheck" ]; then
	[ "$isIdentUpdate" ] || echo 'Updated ident string for:'
	isIdentUpdate=t
	printf '%s\n' "$file"
    fi
done
if [ ! "$isIdentUpdate" ]; then
    printf >&2 'No file(s) were affected. You can check with %q --status where ident update is configured.\n' "$(basename -- "$0")"
    exit 1
fi
