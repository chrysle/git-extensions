#!/bin/bash
set -o pipefail

# Sources:
#   http://stackoverflow.com/questions/1552340/git-show-all-changed-files-between-two-commits
#   http://stackoverflow.com/questions/3144647/git-show-all-files-changed-between-two-commits

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--cached|--intermediate] [-s|--status] [<since>..<until>] [[--] <path>...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Show the files modified in passed commit or commit range.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --intermediate  files that are again the same, but were changed and then
		    changed back, are included, too
    -s|--status	    includes the status (added, modified, etc.), as a first
		    column
HELPTEXT
}

typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()
range=
isIncludeIntermediate=
gitNameArg='--name-only'
sorter='sort -u'
typeset -a allargs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--cached)	range="$1"; shift;;
	--intermediate)	shift; isIncludeIntermediate=t;;
	--status|-s)	shift; gitNameArg='--name-status'; sorter='sort -k 2 -u';;

	# XXX: Semantics of r1..r2 and r1...r2 are swapped between rev-range and
	# diff.
	#
	# For diff, r1..r2 is synonymous to r1 r2; i.e. changes between the two
	# commits are shown. r1...r2 views the changes on the branch containing
	# and up to the r2, starting at a common ancestor of both r1 and r2.
	# "git diff r1...r2" is equivalent to "git diff $(git merge-base r1 r2)
	# r2"
	#
	# For log / rev-parse, r1..r2 means reachable from r2 but not r1.
	# r1...r2 is the symmetric difference of r1 and r2 and is defined as r1
	# r2 --not $(git merge-base --all r1 r2). It is the set of commits that
	# are reachable from either one of r1 (left side) or r2 (right side) but
	# not from both.
	#
	# So, the symmetric one is ... for log, but .. for diff, and the one
	# that excludes changes from the first is .. for log but ... for diff.
	# WTF.
	*...*)		range="${1/.../..}"; shift;;
	*..*)		range="${1/../...}"; shift;;

	--)		break;;
	*)		allargs+=("$1"); shift;;
    esac
done

if [ "$isIncludeIntermediate" ]; then
    git log --pretty='format:' "$gitNameArg" "${allargs[@]}" "$@"
elif [ -n "$range" ]; then
    # Source: http://stackoverflow.com/a/1552353/813602
    git diff "$gitNameArg" "${allargs[@]}" "$range" "$@"
else
    git show --pretty='format:' "$gitNameArg" "${allargs[@]}" "$@"
fi | eval "$sorter | sed -e '/^\$/d'" "${pager:+|}" '"${pager[@]}"'
