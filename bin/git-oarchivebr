#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Tag <branch>, then delete it from origin.
Use this to remove old branches that have been incorporated into master, and you
don't have a local copy. Else, use git-archivebr, which will also clean up the
local repository.
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '<branch> [...] [-?|-h|--help]'
}

if [ $# -eq 0 ]; then
    echo >&2 'Need <branch> to archive!'
    exit 2
fi
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
esac

tagForceOption=
case $1 in
    -f|--force)	shift; tagForceOption=-f;;
esac

status=0
typeset -a createdTags=()
for branch
do
    tagName="archive/$branch"
    if git tag $tagForceOption "$tagName" "origin/$branch"; then
	createdTags+=("$tagName")
    else
	status=1
    fi
done
[ $status -eq 0 ] || exit $status

git push origin "${createdTags[@]/#/refs/tags/}" || exit $?

# Note: Process all passed branches in one fell swoop; this avoid re-querying
# (on push) the remote repository credentials for each branch. When one branch
# is invalid, an error is returned, but following (valid) branches are still
# processed: just as we'd like.
status=0
git push origin --delete "$@" || status=$?
exit $status
