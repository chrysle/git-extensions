#!/bin/bash
set -o pipefail
shopt -qs extglob

readonly scriptFilespec="${BASH_SOURCE[0]}"

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-q|--quiet] [--no-pager] [--no-header] [--separate-errors] [--no-git-color] [--abort-on-failure|-X|--abort-on EXIT_STATUS] [--interrupt-on-failure|--interrupt-on EXIT_STATUS] [-y|--yes] [--continue|--abort|--stashed] [--include-current] [--include-master] [--include-base] [--include-all] [--branches "<branch1> ..."] [--detach] [N] [-c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...]] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Check out all / the last committed N local branches (except for the current
branch and master (and base branch if defined)) one by one and execute "git
SIMPLECOMMAND" and/or COMMANDLINE on each branch.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT

If no COMMAND is given, just performs the checkout and returns to the shell; the
next iteration is then triggered by re-executing with --continue, which can also
be used to continue with COMMAND execution in case an unclean exit or a
left-behind dirty working copy made the command to fall out of the iteration.
COMMAND execution puts a header line (unless --no-header) that contains the
current Git branch before the command output.
    --no-pager		Do not page the output (so contents will scroll out of
			view if there's too much output).
    --no-header		Do not output the header line before command output (and
			no separating empty line after it).
    --separate-errors	Do not combine command output and command errors into
			one (paged) stream. Commands that just cause error
			output won't have a header then. Error output will
			remain on its separate file descriptor and will not be
			paged. Useful if you want to suppress errors or handle
			them separately.
    --no-git-color	Do not pass a --color=... to "git SIMPLECOMMAND". (For
			COMMANDLINE you have to insert "\${gitColorArg[@]}"
			yourself.)
    --abort-on-failure	Abort iteration when COMMAND fails.
    --abort-on|-X EXIT_STATUS
    --interrupt-on-failure
			Halt iteration when COMMAND fails. The iteration can
			then be manually restarted with --continue or aborted
			with --abort.
    --interrupt-on EXIT_STATUS
			Halt iteration when COMMAND exits with EXIT_STATUS.
    --command|-c CMD	The command line to be executed. When this is a simple
			command, it can also be passed as such. If omitted, will
			just return to the shell for each branch.
    --stashed		Don't create a temporary stash in case the working copy
			is dirty (as an optimization in case you know you're clean.)
    --detach		Detach HEAD at the tip of each branch; this avoids
			errors like "fatal: 'branch' is already checked out at
			..." with multiple worktrees, but of course also limits
			your abilities to work with the branch.
Note: For paging and headers, this command has to control Git's color output.
Pass --no-git-color if "git SIMPLECOMMAND" does not support the --color=...
arguments. (For COMMANDLINE you have to insert "\${gitColorArg[@]}" yourself.)
You can still pass --color=always if you pipe this command's output yet still
want coloring of headers.
HELPTEXT
}

typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()
abortStatus=
abortComparison=-eq
interruptStatus=
interruptComparison=-eq
isQuiet=
isHeader=; type -t withHeader >/dev/null && isHeader=t
errorRedir='2>&1'
isGitColor=t
typeset -a colorArg=()
typeset -a args=("$@")
isNeedEval=
typeset -a commands=()
isStashed=
isYes=
branchNum=9999
typeset -a inputBranches=()
iterationAction=
typeset -a gitLocalbrArgs=()
typeset -a gitCheckoutArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	    shift; printLongUsage "$0"; exit 0;;
	--abort-on-failure) shift; abortComparison=-ne; abortStatus=0;;
	--abort-on|-X)	    shift; abortStatus="$1"; shift;;
	--interrupt-on)	    shift; interruptStatus="$1"; shift;;
	--interrupt-on-failure)
			    shift; interruptComparison=-ne; interruptStatus=0;;
	--quiet|-q)	    shift; isQuiet=t;;
	--no-pager)	    shift; pager=();;
	--no-header)	    shift; isHeader=;;
	--separate-errors)  shift; errorRedir='';;
	--no-git-color)	    shift; isGitColor=;;
	--no-color|--color=*)	colorArg=("$1"); shift;;
	--color)		colorArg=("$1" "$2"); shift; shift;;
	--stashed)	    shift; isStashed=t;;
	--yes|-y)	    shift; isYes=t;;
	--include-*)	    gitLocalbrArgs+=("$1"); shift;;
	--branches)	    shift; inputBranches=($1); shift;;	# Internal hook to pass in the branches.
	--continue|--abort) iterationAction=${1#--}; shift;;
	--detach)	    gitCheckoutArgs+=("$1"); shift;;
	+([0-9]))	    branchNum=$1; shift;;
	--command|-c)	    shift; commands+=(${commands:+;} "$1"); isNeedEval=t; shift;;
	--)		    shift; break;;
	-*)		    { echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		    break;;
    esac
done
if [ ! "$isStashed" -a ! "$iterationAction" ]; then
    exec git-autostash "$scriptFilespec" --stashed "${args[@]}"
fi

# With piping into withHeader / pager, we need to explicitly enable color for
# Git, unless this command's output itself is redirected. Also don't do this if
# the user explicitly turned off color.
gitColorArg=()
if [ -n "$pager" -o -n "$isHeader" ] && isNeedColorArgumentWhenPiping "${colorArg[@]}"; then
    colorArg=(--color=always)	# Force for withHeader
    [ "$isGitColor" ] && gitColorArg=(--color=always)	# Force for Git
fi

typeset -a gitCommand=(git-wrapper)
if [ $# -gt 0 ]; then
    if [ ${#gitColorArg[@]} -gt 0 ]; then
	# Simply appending gitColorArg doesn't work; many Git commands have a
	# special <path> or <commit> part at the end. Place it just behind the
	# Git subcommand by iterating arguments in the same way as the various
	# git-*-command metaprograms, and moving anything that is in front from
	# $@ to gitCommand.
	case "$1" in
	    [^-]*-command)  gitCommand+=("$1"); shift
			    while [ $# -ne 0 ]
			    do
				case "$1" in
				    --)		break;;
				    -*)		gitCommand+=("$1"); shift;;
				    *)		gitCommand+=("$1"); shift; break;;
				esac
			    done
			    ;;
	    *)		    while [ $# -ne 0 ]
			    do
				case "$1" in
				    -c) gitCommand+=("$1" "$2"); shift; shift;;
				    *)	gitCommand+=("$1"); shift; break;;
				esac
			    done
	esac
	gitCommand+=("${gitColorArg[@]}")
    fi

    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	printf -v quotedSimpleCommand '%q ' "$@"
	commands+=(${commands:+;} "${quotedSimpleCommand% }")
    else
	commands=("${gitCommand[@]}" "$@")
    fi
fi
[ ${#commands[@]} -eq 0 ] && isYes=t	# No need to confirm when no command-line is passed; user can abort via --abort interactively.

gitDir=$(git rev-parse --git-dir 2>/dev/null) || exit $?
origBranchStore="${gitDir}/localbrOrig"
branchStore="${gitDir}/localbr" || exit $?
commandLineStore="${gitDir}/localbrCommandLine"

if [ ${#commands[@]} -gt 0 ]; then
    storeQuoting=%q; [ "$isNeedEval" ] && storeQuoting=%s   # Already quoted for eval, but a SIMPLECOMMAND needs quoting because after recalling it from $commandLineStore, it's in one single argument and needs eval() to execute.
    printf "$storeQuoting " "${commands[@]}" > "$commandLineStore" || exit $?
fi

getNextBranch()
{
    [ -f "$branchStore" ] || return
    head -n 1 "$branchStore"
    sed -i '1d' "$branchStore"
    [ -s "$branchStore" ] || rm "$branchStore"
}

dirtyCheck()
{
    if git-dirty; then
	echo >&2 "ERROR: working copy is still dirty; please clean up and then retry with --continue."
	git status
	exit 1
    fi
}

abortIfDesired()
{
    local status="${1:?}"; shift
    [ -n "$abortStatus" ] || return
    if [ "$status" $abortComparison $abortStatus ];then
	[ "$isQuiet" ] || printf >&2 'Note: Aborting iteration because the command failed (with exit status %d).\n' "$status"
	restoreOriginalBranch
	exit $status
    fi
}

interruptIfDesired()
{
    local status="${1:?}"; shift
    [ -n "$interruptStatus" ] || return
    if [ "$status" $interruptComparison $interruptStatus ];then
	[ "$isQuiet" ] || printf >&2 'Note: Interrupting iteration because the command failed (with exit status %d). Please check and then continue with --continue.\n' "$status"
	exit $status
    fi
}

restoreOriginalBranch()
{
    local status=0
    if [ -f "$origBranchStore" ]; then
	origBranch="$(<"$origBranchStore")"
	rm -- "$origBranchStore"
	if git checkout --quiet "$origBranch"; then
	    [ ${#commands[@]} -eq 0 ] && echo >&2
	    [ "$isQuiet" ] || printf >&2 "Restored branch '%s'\\n" "$origBranch"
	else
	    status=$?
	fi
    fi

    [ -e "$commandLineStore" ] && rm -- "$commandLineStore"
    return $status
}

case "$iterationAction" in
    abort)	restoreOriginalBranch; exit;;
    continue)
	dirtyCheck

	if [ ${#commands[@]} -eq 0 -a -e "$commandLineStore" ]; then
	    # Recall command-line from original / previous call, unless it is
	    # overridden by updated arguments provided to this invocation.
	    commands=$(<"$commandLineStore")
	    # The command-line is read as one (escaped) argument, and therefore
	    # needs eval to execute.
	    isNeedEval=t
	fi
	;;
    '')
	readarray -t localBranches < <(git-localbr "${gitLocalbrArgs[@]}" -- "${inputBranches[@]}" | tail -n "$branchNum")
	if [ ${#localBranches[@]} -eq 0 ]; then
	    echo >&2 'No local branches found!'
	    exit 1
	fi

	IFS=$'\n'
	if [ "$isYes" ]; then
	    [ "$isQuiet" ] || echo >&2 "Iterating over these branch(es):
${localBranches[*]}"
	else
	    echo >/dev/tty "Iterating over these branch(es):
${localBranches[*]}"
	    </dev/tty read -r -N 1 -p "Really iterate over these branches? (y/n) " choice; echo >/dev/tty
	    [ "$choice" = "y" ] || exit 1
	fi

	printf '%s\n' "${localBranches[*]}" > "$branchStore" || exit $?
	git-orig-ref > "$origBranchStore"
	if [ ${#commands[@]} -eq 0 -a -e "$commandLineStore" ]; then
	    rm -- "$commandLineStore" || exit $?
	fi
	;;
    *)	printf >&2 'Assert: Unhandled iterationAction %q\n' "$iterationAction"
	exit 3
	;;
esac

localbrdo()
{
    : ${GIT_LOCALBRDO_HEADER_ID:="localbrdo-$$-$RANDOM"}
    local status=0
    while :
    do
	local status=0
	branch=$(getNextBranch)
	if [ ! "$branch" ]; then
	    [ "$isQuiet" ] || echo >&2 "All local branches have been iterated over."

	    restoreOriginalBranch; exit
	fi

	git checkout --quiet "${gitCheckoutArgs[@]}" "${branch}" || exit $?	# Suppress Git's checkout information with --quiet. We're probably not interested in stuff like "Your branch is up-to-date with ...", and we emulate the switch message itself:
	if [ ${#commands[@]} -eq 0 ]; then
	    [ "$isQuiet" ] || printf >&2 "\\nSwitched to branch '%s'\\n" "$branch"
	    exit 0
	else
	    if [ "$isNeedEval" ]; then
		typeset -a c=("${commands[@]}")
	    else
		typeset -a c=('"${commands[@]}"')
	    fi
	    if (eval "${c[@]}" "${isHeader:+$errorRedir | withHeader "${colorArg[@]}" --id '$GIT_LOCALBRDO_HEADER_ID' -- '$branch'}"); then
		isSuccess=t
		dirtyCheck
	    else
		status=$?
		abortIfDesired $status
		interruptIfDesired $status
	    fi
	fi
    done
    return $status
}
eval "localbrdo ${pager:+$errorRedir |}" '"${pager[@]}"'
