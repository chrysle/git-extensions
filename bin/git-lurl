#!/bin/bash
set -o pipefail

: ${GIT_LURL_VIEW=commit}

printUsage()
{
    cat <<HELPTEXT
Log URLs to ${remote:-REMOTE} of all found commits.
HELPTEXT
    echo
    printf 'Usage: [GIT_LURL_VIEW=commit|commits|tree] %q %s\n' "$(basename "$1")" "${remote:-REMOTE} [<log-options>] [<revision range>] [[--] <path>...] [-?|-h|--help]"
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac
remote="${1:?}"; shift
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac

: ${GIT_LURL_URL_PREFIX=}
: ${GIT_LURL_URL_SUFFIX=}
: ${GIT_LURL_HASH_PREFIX=}
: ${GIT_LURL_HASH_SUFFIX=}
: ${GIT_LURL_PATH_PREFIX=[35m}
: ${GIT_LURL_PATH_SUFFIX=[0m}
: ${GIT_LURL_FILE_PREFIX=[01;35m}
: ${GIT_LURL_FILE_SUFFIX=[0m}

if ! isNeedColorArgumentWhenPiping "$@"; then
    # This is for us, to disable the highlighting {pre,suf}fixes. As git-log
    # understands it (and is inconsequential with our --pretty format), we don't
    # need to drop it from the arguments passed to it.
    GIT_LURL_URL_PREFIX=
    GIT_LURL_URL_SUFFIX=
    GIT_LURL_HASH_PREFIX=
    GIT_LURL_HASH_SUFFIX=
    GIT_LURL_PATH_PREFIX=
    GIT_LURL_PATH_SUFFIX=
    GIT_LURL_FILE_PREFIX=
    GIT_LURL_FILE_SUFFIX=
fi

url=$(git-remote-url "$remote") || exit $?

git log --pretty=tformat:%H "$@" | \
    awk -v url="$url" \
	-v urlPrefix="$GIT_LURL_URL_PREFIX" \
	-v urlSuffix="$GIT_LURL_URL_SUFFIX" \
	-v hashPrefix="$GIT_LURL_HASH_PREFIX" \
	-v hashSuffix="$GIT_LURL_HASH_SUFFIX" \
	-v pathPrefix="$GIT_LURL_PATH_PREFIX" \
	-v pathSuffix="$GIT_LURL_PATH_SUFFIX" \
	-v filePrefix="$GIT_LURL_FILE_PREFIX" \
	-v fileSuffix="$GIT_LURL_FILE_SUFFIX" \
	-v "view=${GIT_LURL_VIEW//\\/\\\\}" \
'
function basename( filespec ) {
    sub(".*/", "", filespec)
    return filespec
}
function dirname( filespec ) {
    if (filespec !~ /\//) return ""
    sub("[^/]+$", "", filespec)
    return filespec
}

/^$/{ next; }
/^[0-9a-f]+$/{ $0 = urlPrefix url "/" view "/" urlSuffix hashPrefix $0 hashSuffix; print; next; }
{
    sub(/^\S*\s+/, "")
    filespecs[$0] = 1
}
END {
    asorti(filespecs)
    if (length(filespecs) > 0) print ""
    for (f in filespecs)
	print pathPrefix dirname(filespecs[f]) pathSuffix filePrefix basename(filespecs[f]) fileSuffix
}
'
