#!/bin/bash
set -o pipefail

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-r|--resolve] [<pattern> ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
List tags by age (ascending, starting with recent tags).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --resolve|-r	Use the date of the tagged commit instead of the tag
			creation date.
HELPTEXT
}

action=ageByCreation
case "$1" in
    --help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
    --resolve|-r)	shift; action=ageByCommit;;
esac

ageByCommit()
{
    git tag --list --format='%(refname)' "$@" | \
	xargs --no-run-if-empty --delimiter '\n' -n 1 git log --max-count 1 --pretty=tformat:'%ci	(%cr)	%D: %s' | \
	sort -r -n | \
	sed -e 's/\(\t\|, \)tag: /\1/g' | \
	column -s $'\t' -t
    }

ageByCreation()
{
    git tag --list --sort=-creatordate --format='%(creatordate:iso)	(%(creatordate:relative))	%(refname:short)' "$@" | \
	column -s $'\t' -t
}

$action "$@"
