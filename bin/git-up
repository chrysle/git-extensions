#!/bin/bash

# Source:
#   https://stackoverflow.com/questions/30208928/can-git-pull-automatically-stash-and-pop-pending-changes
#   https://github.com/aanand/git-up

printUsage()
{
    local action='Pull and rebase'
    [ "$GIT_UP_REBASE" ] && action='Rebase'
    [ "$GIT_UP_FETCH" ] && action='Fetch and rebase'

    cat <<HELPTEXT
$action changes in ${remote:-REMOTE}, and show a log of the changes.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "[--gui|--terminal|--none] ${remote:-REMOTE} [PULL/REBASE-ARGS ...] [-?|-h|--help]"
}

log=terminal; type -t rabbitvcs >/dev/null && log=graphical
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --gui)	shift; log=graphical;;
    --terminal)	shift; log=terminal;;
    --none)	shift; log=;;
esac

logChanges()
{
    case "$log" in
	'') ;;
	terminal)   git-onelinelog "$1";;
	graphical)  git-glog "$1" 2>&1;;
	*)	    printf >&2 'ASSERT: Invalid log: %q\n' "$log"; exit 3;;
    esac
}
remote="${1:?}"; shift
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac

remoteBranch=; [ $# -gt 0 ] && remoteBranch="${remote}/${!#}" || remoteBranch=$(git-remotebr "$remote" 2>/dev/null)
originalRevision="$(git rev-parse HEAD 2>/dev/null)"

GIT_VERSION="$(git --version 2>/dev/null)"
# --rebase-merges and --rebase=merges is Git 2.18 and later.
typeset -a gitRebaseMergesArg=(--rebase-merges)
typeset -a gitPullRebaseMergesArg=(--rebase=merges)
# --autostash is Git 2.9 and later.
# -c rebase.autoStash=true is Git 2.6 and later.
typeset -a gitAutoStashGitArg=()
typeset -a gitAutoStashPullOrRebaseArg=(--autostash)
if versionCompare "$GIT_VERSION" -lt 2.18 2>/dev/null; then
    gitRebaseMergesArg=(--preserve-merges)
    gitPullRebaseMergesArg=(--rebase=preserve)
    if versionCompare "$GIT_VERSION" -lt 2.9 2>/dev/null; then
	gitAutoStashGitArg=(-c rebase.autoStash=true)
	gitAutoStashPullOrRebaseArg=()
    fi
fi

if [ "$GIT_UP_FETCH" ]; then
    git fetch "$remote" || exit $?
fi

# Here, merges typically happen from the master / base branch to pick up
# changes. If we need to rebase a (feature) branch during pulling, that means
# that there was (accidentally?) concurrent development. Here, we still like to
# keep the merges intact; the decision to flatten them or not should only come
# when reintegrating the branch (namely, whether to rebase or merge).
if [ "$GIT_UP_REBASE" ]; then
    git "${gitAutoStashGitArg[@]}" rebase "${gitAutoStashPullOrRebaseArg[@]}" "${gitRebaseMergesArg[@]}" "${@:1:$(($#-1))}" "$remoteBranch" || exit $?
else
    git "${gitAutoStashGitArg[@]}" pull "${gitAutoStashPullOrRebaseArg[@]}" "${gitPullRebaseMergesArg[@]}" "$remote" "$@" || exit $?
fi

if [ -z "$remoteBranch" ]; then
    [ -z "$log" ] || echo >&2 "Warning: Could not determine remote branch, no logging possible."
elif [ "$(git rev-parse HEAD 2>/dev/null)" = "$originalRevision" ]; then
    printf 'No changes in %s.\n' "$remoteBranch"
else
    logChanges "${originalRevision}.."
fi
