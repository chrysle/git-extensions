#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Checkout passed <remote-branch>, tracking it if it doesn't yet exist locally, or
ensuring that an existing tracked branch doesn't contradict the request.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[<checkout-args> ...] <remote-branch> [-?|-h|--help]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac
if [ $# -eq 0 ]; then
    echo 'ERROR: No <remote-branch> passed!'
    echo
    printUsage "$0"
    exit 2
fi >&2
remoteBranch="${!#}"; shift
set -- "${@:1:$(($#-1))}"
remote="${remoteBranch%%/*}"
branch="${remoteBranch#*/}"
if [ -z "$remote" -o -z "$branch" ]; then
    printf 'ERROR: Not a <remote-branch>: %s\n' "$remoteBranch"
    exit 2
fi >&2

if git-existsbr "$branch"; then
    trackedRemoteBranch="$(git-tracks "$branch" 2>/dev/null)"
    if [ -z "$trackedRemoteBranch" ]; then
	: # Fine; we're tracking nothing yet.
    elif [ "$trackedRemoteBranch" = "$remoteBranch" ]; then
	: # Fine; we're already tracking the same remote branch.
    else
	trackedRemote="${trackedRemoteBranch%%/*}"
	trackedBranch="${trackedRemoteBranch#*/}"
	if [ "$trackedBranch" != "$branch" ]; then
	    printf >&2 'ERROR: An existing local branch %s is already tracking a differently named remote branch %s; will not switch to %s.\n' "$trackedRemoteBranch" "$remoteBranch"
	    exit 1
	elif [ "$trackedRemote" != "$remote" ]; then
	    printf >&2 'Note: The local branch is already tracking the corresponding branch in %s.\n' "$trackedRemote"
	fi
    fi
    git checkout "$@" "$branch"
else
    git checkout --track "$@" "$remoteBranch"
fi
