#!/bin/bash
set -o pipefail

: ${GIT_TIMESPANCOMMAND_WHEN:="$GIT_TIMESPANCOMMAND_TIMESPAN"}

printUsage()
{
    cat <<HELPTEXT
Print / execute GIT-COMMAND with a revision range starting from the first
revision committed ${GIT_TIMESPANCOMMAND_WHEN:-\$GIT_TIMESPANCOMMAND_TIMESPAN ago}; possibly including one previous commit.
The revision range (with --no-range, only the starting revision will be used) is
appended at the end of GIT-COMMAND ....
HELPTEXT
    local requiredEnvironmentVariables; [ -n "$GIT_TIMESPANCOMMAND_TIMESPAN" ] || requiredEnvironmentVariables='GIT_TIMESPANCOMMAND_TIMESPAN=SINCE-ARG'
    printf "Usage: ${requiredEnvironmentVariables}${requiredEnvironmentVariables:+ }%q %s\\n" "$(basename "$1")" '[--no-range|--range] [+1|--one-more] [--] [GIT-COMMAND ...] [-?|-h|--help]'
}

unset isRange
isShowOneMore=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-range)	shift; isRange=;;
	--range)	shift; isRange=t;;
	--one-more|+1)	shift; isShowOneMore=t;;
	--)		shift; break;;
	*)		break;;
    esac
done
typeset -a gitCommand=()
if [ $# -eq 0 ]; then
    isRange=
    gitCommand=(name-rev --name-only)
fi

: ${GIT_TIMESPANCOMMAND_TIMESPAN:?}

getTimespanAgoCommit()
{
    local revision;
    revision="$(git lh --since "$GIT_TIMESPANCOMMAND_TIMESPAN" | tail -n 1)" || exit $?
    [ "$revision" ] || exit 1
    printf %s "$revision"
}

typeset -a rangeArgs=()
if [ -z "${isRange+t}" ] && [ ! "$isShowOneMore" ]; then
    # For commands that don't require a range and don't require a single commit
    # (i.e. the log variants), we can directly inject the --since argument.
    rangeArgs=('--since' "$GIT_TIMESPANCOMMAND_TIMESPAN")
else
    rangeArgs=("$(getTimespanAgoCommit)${isShowOneMore:+^}${isRange:+^..}") || exit $?
fi

case "$1" in
    [^-]*-command)  gitCommand+=("$1"); shift
		    while [ $# -ne 0 ]
		    do
			case "$1" in
			    --)		break;;
			    -*)		gitCommand+=("$1"); shift;;
			    *)		gitCommand+=("$1"); shift; break;;
			esac
		    done
		    ;;
    *)		    while [ $# -ne 0 ]
		    do
			case "$1" in
			    -c) gitCommand+=("$1" "$2"); shift; shift;;
			    *)	gitCommand+=("$1"); shift; break;;
			esac
		    done
esac

exec git-wrapper "${gitCommand[@]}" "${rangeArgs[@]}" "$@"
