#!/bin/bash
shopt -qs extglob

: ${GIT_WCDO_COMMAND:=git-wcs-in-dir-do}

if [ "${GIT_WCDO_COMMAND%%* }" = 'git-wcs-in-dir-do' ]; then
    # Add additional arguments of the default git-wcs-in-dir-do.
    : ${GIT_WCDO_COMMAND_LONG_OPTIONS=worktrees|skip-symlinks}
fi

printUsage()
{
    local splitPattern='/^Note:/'
    local additions=
    [ -n "$wrapper" ] || additions="${additions}${additions:+ }WRAPPER-NAME"
    [ -n "$what" ] || additions="${additions}${additions:+ }WRAPPER-DESCRIPTION"
    "$GIT_WCDO_COMMAND" --help 2>&1 | sed \
	-e "1s#^.*\$#Execute \"git SIMPLECOMMAND\" and/or COMMANDLINE inside ${what:=CONFIGURED SUBJECTS} that are under Git source control. Considers a ${wrapper:-WRAPPER}-SIMPLECOMMAND wrapper.\\nLists all filespecs if no command(s) are passed.#" \
	-e '2b removeFirstParagraphLoop' \
	-e "${splitPattern},\$d" \
	-e '/^Usage:$/N' -e '/\(^\|\n\)Usage: */{ s/\(^\|\n\)\(Usage: *\)\?\([^ ]\+ \)*$GIT_WCDO_COMMAND /\1\2'"${wrapper:-$(basename "$1")}${additions:+ }$additions / }" \
	-e b -e :removeFirstParagraphLoop -e '{ /\(^\|\n\)$/{ s/^\(.*\n\)\?//; b; }; N; b removeFirstParagraphLoop }'

    cat <<HELPTEXT
Supports the following special commands:
    repo-missing	    Show those ${what:=CONFIGURED SUBJECTS} that are not yet
			    under Git source control.
    dirty-sh [COMMAND ...]  Open an interactive shell / execute COMMAND in those
			    ${what:=CONFIGURED SUBJECTS} that have uncommitted changes.
    wips-sh [(+|-)CHECK] [COMMAND ...]
			    Open an interactive shell / execute COMMAND in those
			    ${what:=CONFIGURED SUBJECTS} that have work in progress.
HELPTEXT
    [ "$GIT_WCDO_COMMAND_ADDITIONAL_HELP" ] && printf '%s\n' "$GIT_WCDO_COMMAND_ADDITIONAL_HELP"
    git-wcdo --help 2>&1 | sed -e "${splitPattern}p" -e "1,${splitPattern}d"
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac

wrapper="${1:?}"; shift
what="${1:?}"; shift
typeset -a wcs=()
while [ $# -ne 0 ]
do
    if [ "$1" == '--' ]; then
	shift
	break
    fi
    wcs+=("$1"); shift
done
[ ${#wcs[@]} -eq 0 ] && exit 3

typeset -a wcdoArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	-+([s${GIT_WCDO_COMMAND_SHORT_OPTIONS}]))	wcdoArgs+=("$1"); shift;;
	--@(no-pager|no-header|branch-name|separate-errors|no-git-color|single-success|skip-files|skip-foreign${GIT_WCDO_COMMAND_LONG_OPTIONS:+|}${GIT_WCDO_COMMAND_LONG_OPTIONS}))	wcdoArgs+=("$1"); shift;;
	-[${GIT_WCDO_COMMAND_SHORT_PARAMS}])	wcdoArgs+=("$1" "$2"); shift; shift;;
	--@(foreign-command|predicate-command${GIT_WCDO_COMMAND_LONG_PARAMS:+|}${GIT_WCDO_COMMAND_LONG_PARAMS}))	wcdoArgs+=("$1" "$2"); shift; shift;;
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--)		wcdoArgs+=("$1"); shift; break;;
	*)		break;;
    esac
done

if [ $# -eq 0 ]; then
    set -- --no-header --command 'echo $ROOT'
elif [ "${1:0:1}" != '-' ]; then
    commandAlias="${wrapper}-$1"
    if type -t "$commandAlias" >/dev/null; then
	shift	# The first argument is part of the alias.
	eval $commandAlias '"$@"'
	exit $?
    fi

    case "$1" in
	repo-missing)
	    # Synthesized new command.
	    shift
	    wcdoArgs+=(--no-header --skip-files --foreign-command 'pwd' --command :)
	    ;;
	dirty-sh)
	    # Synthesized new command.
	    shift
	    wcdoArgs+=(--no-pager --no-header --no-git-color --command)
	    if [ $# -eq 0 ]; then
		wcdoArgs+=('git dirty && bash -i')
	    else
		printf -v quotedSimpleCommand '%q ' "$@"
		wcdoArgs+=("git dirty && ${quotedSimpleCommand# }")
		set --
	    fi
	    ;;
	wips-sh)
	    # Synthesized new command.
	    shift
	    wcdoArgs+=(--no-pager --no-header --no-git-color --command)
	    typeset -a wipsArgs=()
	    while [ $# -ne 0 ] && [[ "$1" =~ ^[+-][[:alpha:]]+$ ]]
	    do
		wipsArgs+=("$1"); shift
	    done
	    quotedWipsArgs=; [ ${#quotedWipsArgs[@]} -gt 0 ] && printf -v quotedWipsArgs '%q ' "${wipsArgs[@]}"
	    if [ $# -eq 0 ]; then
		wcdoArgs+=("git wips ${quotedWipsArgs}&& bash -i")
	    else
		printf -v quotedSimpleCommand '%q ' "$@"
		wcdoArgs+=("git wips --quiet ${quotedWipsArgs}&& ${quotedSimpleCommand# }")
		set --
	    fi
	    ;;
	wips)
	    # Succeed if a single working copy has WIP.
	    wcdoArgs+=(--single-success)
	    ;;
	shell)
	    # Succeed if a single working copy has WIP.
	    wcdoArgs+=(--single-success)
	    # Because of the interactive shell, we must not interfere with
	    # terminal access, so no header (the shell prompt will indicate the
	    # working directory, anyway), and no paging.
	    wcdoArgs+=(--no-header --no-pager)
	    # This command does not support a --color argument.
	    wcdoArgs+=(--no-git-color)
	    ;;
	browse|ci-status|compare|delete|pull-request|fork|release|sync)
	    wcdoArgs+=(--single-success)
	    # These hub commands need a remote.
	    wcdoArgs+=(--predicate-command git-existsremote)
	    ;;
	cr|crrecent|crstats|issue|pr|prtitle|reviews)
	    wcdoArgs+=(--single-success)
	    # These hub commands need a remote.
	    if [ "$GIT_WCDO_COMMAND_EXCLUDE_FORKS" ]; then
		# This setting indicates that I only care about my own projects,
		# not my forks of other projects.
		wcdoArgs+=(--predicate-command 'git-existsremote origin && ! git-existsremote upstream')
	    else
		wcdoArgs+=(--predicate-command git-existsremote)
	    fi
	    ;;
	labels)
	    # This hub command needs a remote.
	    if [ "$GIT_WCDO_COMMAND_EXCLUDE_FORKS" ]; then
		# This setting indicates that I only care about my own projects,
		# not my forks of other projects.
		wcdoArgs+=(--predicate-command 'git-existsremote origin && ! git-existsremote upstream')
	    else
		wcdoArgs+=(--predicate-command git-existsremote)
	    fi
	    # This command does not support a --color argument.
	    wcdoArgs+=(--no-git-color)
	    ;;
	create)
	    wcdoArgs+=(--single-success)
	    # This hub command (mostly) only applies to repos without a remote.
	    wcdoArgs+=(--predicate-command '! git-existsremote')
	    ;;
    esac

    set -- -- "$@"
fi

exec $GIT_WCDO_COMMAND "${wcdoArgs[@]}" "${wcs[@]}" "$@"
