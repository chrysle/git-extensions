#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Add all modified and deleted files except those matching FILE(s) or the escaped
FILE-GLOB(s). Like addu, but with inverted meaning of the file arguments.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "FILE|'FILE-GLOB' [...] [-?|-h|--help]"
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac

remove()
{
    local e=$1; shift
    [ "${additions["$e"]}" ] || return 1
    unset -v "additions[$e]"
}

noMatch()
{
    printf >&2 'ERROR: %s does not match any existing file!\n' "${1:?}"
    exit 1
}
noMatchFor()
{
    printf >&2 'ERROR: %s does not match any file to be added to the index!\n' "${1:?}"
    exit 1
}

if [ $# -eq 0 ]; then
    echo >&2 'ERROR: Must pass at least one FILE / escaped FILE-GLOB to not add!'
    exit 2
fi

readarray -t reportedAdditions < <(git add --update --dry-run; printf '\n%d\n' "$?")	# Exit status from the process substitution is lost; return the actual exit status via an appended additional line.
[ ${reportedAdditions[-1]} -ne 0 ] && exit ${reportedAdditions[-1]}
unset 'reportedAdditions[-1]'
[ -z "${reportedAdditions[-1]}" ] && unset 'reportedAdditions[-1]'

if [ ${#reportedAdditions[@]} -eq 0 ]; then
    echo >&2 'ERROR: Nothing to add'
    exit 1
fi
typeset -A additions=()
for r in "${reportedAdditions[@]}"
do
    a=${r%\'}
    a=${a#add \'}
    additions["$a"]=1
done

for exclusion
do
    if [ -e "$exclusion" ]; then
	remove "$exclusion" || noMatchFor "$exclusion"
    else
	didExclusion=
	eval "typeset -a expandedExclusions=($exclusion)"
	[ ${#expandedExclusions[@]} -eq 0 ] && noMatch "$exclusion"
	for e in "${expandedExclusions[@]}"
	do
	    remove "$e" && didExclusion=t
	done
	[ "$didExclusion" ] || noMatchFor "$exclusion"
    fi
done

git add -- "${!additions[@]}" && git status -sb
