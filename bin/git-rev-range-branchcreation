#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Print / execute GIT-COMMAND with the revision range that comprises the current /
passed BRANCH until the commit that started the branch.
The revision range (with --no-range, only the starting revision will be used) is
appended at the end of GIT-COMMAND ...; with --keep-last, it is put between the
next-to-last and last arguments.
A different GIT-COMMAND2 can be used for the --one-more revision; with ^[1|2],
the modifier instead is appended to the revision, and there's only one
invocation of GIT-COMMAND.
HELPTEXT
printf 'Usage: %q %s\n' "$(basename "$1")" '[--no-range] [-b|--branch BRANCH|--start-rev REV] [--base BASE-BRANCH] [--keep-last] [+1|--one-more|--one-more-command GIT-COMMAND2|^[1|2]] [--] [GIT-COMMAND ...] [-?|-h|--help]'
}

startRev=
typeset -a gitFirstCommitArgs=()
typeset -a revRangeArgs=()
isWithRange=t
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--start-rev|--branch|-b)
			shift; startRev="$1"; shift;;
	--base)		gitFirstCommitArgs+=("$1" "$2"); shift; shift;;
	--no-range)	revRangeArgs+=("$1"); shift; isWithRange=;;
	--)		revRangeArgs+=("$1"); shift; break;;
	*)		revRangeArgs+=("$1"); shift;;
    esac
done
set -- "${args[@]}" "$@"

if ! firstCommit="$(git-firstcommit "${gitFirstCommitArgs[@]}" "${startRev:-HEAD}")"; then
    exit 2
fi

[ "$isWithRange" ] || startRev=''   # Prevent "ERROR: --end-revision cannot be combined with --no-range!"; we don't need the end revision, as --no-range drops that, anyway.

exec git-rev-range --revision "$firstCommit" ${startRev:+--end-revision} $startRev "${revRangeArgs[@]}" "$@"
