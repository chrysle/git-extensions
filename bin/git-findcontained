#!/bin/bash
shopt -qs extglob

gitFindLogCommand="${1:?}"; shift

typeset -a gitCommand=()
printUsage()
{
    local isFindLogg=; [[ "$gitFindLogCommand" =~ logg$ ]] && isFindLogg=t
    if [ "$isFindLogg" ]; then
	echo 'Show first tag [that matches GLOB(s) / GREP-ARGS] of the commit where text or /regexp/ was first mentioned in the log message or diff.'
    else
	echo 'Show first tag [that matches GLOB(s) / GREP-ARGS] of the commits where text or /regexp/ was first mentioned (added) in the diff.'
    fi

    local gitCommandArg=GIT-COMMAND; [ ${#gitCommand[@]} -gt 0 ] && gitCommandArg="${gitCommand[-1]}"

    if [ "$isFindLogg" ]; then
	    printf 'Usage: %q %s %s %s\n' "$(basename "$1")" "$gitFindLogCommand" "$gitCommandArg" '[--exclude GLOB [--exclude ...]] [GREP-ARGS] [--more] [--source-count=<number>] [<log-options>] [<since>..<until>] [[--] <path>...] text|/regexp/ [-?|-h|--help]'
    else
	printf 'Usage: %q %s %s %s\n' "$(basename "$1")" "$gitFindLogCommand" "$gitCommandArg" '[--exclude GLOB [--exclude ...]] [GREP-ARGS] [--more] [<log-options>] [<since>..<until>] [[--] <path>...] text|/regexp/ [-?|-h|--help]'
    fi
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac
if [ $# -eq 0 ]; then
    echo >&2 'ERROR: No GIT-COMMAND passed.'
    exit 2
fi
while [ $# -ne 0 ]
do
    case "$1" in
	-c) gitCommand+=("$1" "$2"); shift; shift;;
	*)  gitCommand+=("$1"); shift; break;;
    esac
done
typeset -a grepArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;

	--exclude)  gitCommand+=("$1" "$2"); shift; shift;;

	-@([EFGPivwxsaIrRUz]))	grepArgs+=("$1"); shift;;
	--@(extended-regexp|fixed-strings|basic-regexp|perl-regexp|ignore-case|invert-match|word-regexp|line-regexp|no-messages|text|recursive|dereference-recursive|binary|null-data))		grepArgs+=("$1"); shift;;
	-[efmDd])		grepArgs+=("$1" "$2"); shift; shift;;
	--@(regexp|file|color|colour|max-count|binary-files|devices|directories|exclude|exclude-from|include)=*)   grepArgs+=("$1"); shift;;
	--@(regexp|file|color|colour|max-count|binary-files|devices|directories|exclude|exclude-from|include))	    grepArgs+=("$1" "$2"); shift; shift;;

	*)		break;;
    esac
done

readarray -t commits < <(git "$gitFindLogCommand" --pretty=tformat:%H "$@")
[ ${#commits[@]} -eq 0 ] && exit 1

status=0
for commit in "${commits[@]}"
do
    git-contained-command "${gitCommand[@]}" "$commit" || status=$?
done
exit $status
