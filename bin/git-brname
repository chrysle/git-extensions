#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--real-branch-only|--raw] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Print current (local) branch name, tag, or detached commit.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --real-branch-only	Abort with an error if no ordinary branch is checked
			out.
    --raw		Avoid embellishments on tags or detached commits (so
			that the result can be passed to other Git commands as a
			revision).
HELPTEXT
}

isRealBranchOnly=
tagEmbellishment='(tag: %s)'
detachedEmbellishment='(%s...)'
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--real-branch-only)
			shift; isRealBranchOnly=t;;
	--raw)		shift; tagEmbellishment='%s'; detachedEmbellishment='%s';;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

if branch=$(git symbolic-ref HEAD 2>/dev/null); then
    printf '%s\n' "${branch##refs/heads/}"
elif tags=$(git tag --list --points-at HEAD 2>/dev/null) && [ "$tags" ]; then
    if [ "$isRealBranchOnly" ]; then
	printf >&2 'ERROR: Checked out tag %s\n' "${tags//
/, }"
	exit 1
    fi

    if [ "$tagEmbellishment" == '%s' ]; then
	# Only print the first tag.
	printf "${tagEmbellishment}\\n" "${tags%%
*}"
    else
	printf "${tagEmbellishment}\\n" "${tags//
/, tag: }"
    fi
elif detached=$(git rev-parse --short HEAD 2>/dev/null); then
    if [ "$isRealBranchOnly" ]; then
	printf >&2 'ERROR: Detached checkout of %s\n' "$detached"
	exit 1
    fi
    printf "${detachedEmbellishment}\\n" "$detached"
else
    # Re-execute command to obtain the original error message.
    git symbolic-ref HEAD
fi
