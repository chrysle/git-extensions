#!/bin/bash
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Log changes in submodules done in the commits [that cover SUBMODULE(s)] in the
passed <range>.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '--since <date>|--max-count|-n|<range> [<log-args> ...] [--] [SUBMODULE ...] [-?|-h|--help]'
}
typeset -a gitCommandArgs=()
typeset -a submodules=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--)		shift; submodules=("$@"); break;;
	*)		gitCommandArgs+=("$1"); shift;;
    esac
done
if [ ${#submodules[@]} -eq 0 ]; then
    typeset -A submoduleDict=()
    while IFS=$'\n' read -r name
    do
	submoduleDict["$name"]=t
    done < <(git sublist)

    # No submodules after -- captured yet; need to investigate parsed and
    # remaining args from behind for submodules.
    gitCommandArgs+=("$@")
    while [ ${#gitCommandArgs[@]} -ne 0 ]
    do
	lastArg="${gitCommandArgs[-1]}"
	[ "${submoduleDict["$lastArg"]}" ] || break

	submodules=("$lastArg" "${submodules[@]}")
	gitCommandArgs=("${gitCommandArgs[@]:0:${#gitCommandArgs[@]}-1}")
    done

    if [ ${#submodules[@]} -eq 0 ]; then
	# No submodules passed - iterate over all submodules.
	submodules=("${!submoduleDict[@]}")
    fi
fi
set -- "${gitCommandArgs[@]}"

typeset -a colorArg=(--color=always)
typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS)
if [ ! -t 1 ]; then
    colorArg=()
    pager=()
fi
typeset -a rangeArgs=()
typeset -a rangeModificationArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--color=auto)	colorArg=("$1"); colorArg=(--color=always); shift;;
	--no-color|--color=*)
			colorArg=("$1"); shift;;
	--color)	colorArg=("$1" "$2"); if [ "$2" = auto ]; then colorArg=("$1" always); fi; shift; shift;;

	--since)	rangeArgs+=("$1" "$2"); shift; shift;;
	--max-count|-n)	rangeArgs+=("$1" "$2"); shift; shift;;
	--max-count=*|-+([0-9]))
			rangeArgs+=("$1"); shift;;
	--follow)	rangeModificationArgs+=("$1"); shift;;
	*)		rangeArgs+=("$1"); shift; break;;
    esac
done
if [ ${#rangeArgs[@]} -eq 0 ]; then
    echo 'ERROR: Need <range>.'
    exit 2
elif [ ${#submodules[@]} -eq 0 ]; then
    echo >&2 'No submodules.'
    exit 99
fi >&2

eval 'git log --pretty= --patch --submodule=log "${colorArg[@]}" "${rangeModificationArgs[@]}" "${rangeArgs[@]}" "$@" -- "${submodules[@]}"' "${pager:+|}" '"${pager[@]}"'
