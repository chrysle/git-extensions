#!/bin/bash
shopt -qs extglob

printUsage()
{
    local splitPattern='/^Note:/'
    git-wcdo --help 2>&1 | sed \
	-e '1s#^.*$#Execute "git SIMPLECOMMAND" and/or COMMANDLINE on all repositories that are checked out (directly, not in subdirs) in any DIRSPEC.#' \
	-e '2b removeFirstParagraphLoop' \
	-e "${splitPattern},\$d" \
	-e '/^Usage:$/N' -e '/\(^\|\n\)Usage: */{ s/\(^\|\n\)\(Usage: *\)\?\([^ ]\+ \)*git-wcdo /\1\2'"$(basename "$1")"' [--worktrees] [--skip-symlinks] / }' \
	-e b -e :removeFirstParagraphLoop -e '{ /\(^\|\n\)$/{ s/^\(.*\n\)\?//; b; }; N; b removeFirstParagraphLoop }' \

    cat <<HELPTEXT
    --worktrees		    Also include additional working copies checked out
			    from the same repository (via git worktree).
    --skip-symlinks	    Do not consider passed DIRSPEC(s) that are symbolic
			    links to another directory. (This cannot be easily
			    checked from inside the working copy with
			    --predicate-command.)
HELPTEXT
    git-wcdo --help 2>&1 | sed -e "${splitPattern}p" -e "1,${splitPattern}d"
}

isForeign=
isSkipSymlinks=
compareOp=-d
typeset -a dirspecs=()
typeset -a wcdoArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;

	-+([s${GIT_WCDO_COMMAND_SHORT_OPTIONS}]))
			wcdoArgs+=("$1"); shift;;
	--@(no-pager|no-header|branch-name|separate-errors|no-git-color|no-color|color=*|single-success|skip-files|skip-foreign${GIT_WCDO_COMMAND_LONG_OPTIONS:+|}${GIT_WCDO_COMMAND_LONG_OPTIONS}))
			wcdoArgs+=("$1"); shift;;
	-[c${GIT_WCDO_COMMAND_SHORT_PARAMS}])
			wcdoArgs+=("$1" "$2"); shift; shift;;
	--@(color|command|progress|predicate-command${GIT_WCDO_COMMAND_LONG_PARAMS:+|}${GIT_WCDO_COMMAND_LONG_PARAMS}))
			wcdoArgs+=("$1" "$2"); shift; shift;;

	--skip-symlinks)
			shift; isSkipSymlinks=t;;
	--foreign-command)
			wcdoArgs+=("$1" "$2"); isForeign=t; shift; shift;;
	--worktrees)	shift; compareOp=-e;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		dirspecs+=("$1"); shift;;
    esac
done
if [ ${#dirspecs[@]} -eq 0 ]; then
    echo "ERROR: No DIRSPECs."
    echo
    printUsage "$0"
    exit 2
fi >&2

typeset -a wcs=()
for baseDir in "${dirspecs[@]}"
do
    if [ ! -d "$baseDir" ]; then
	printf >&2 'ERROR: Not a directory: %s\n' "$baseDir"
	continue
    fi

    for dir in "${baseDir}"/*
    do
	[ -d "$dir" ] || continue
	[ -n "$isSkipSymlinks" -a -h "$dir" ] && continue
	if [ $compareOp "${dir}/.git" ] || [ -n "$isForeign" -a ! -e "${dir}/.git" ]; then
	    # Pass to git-wcdo if a Git repo (or --worktrees) or if
	    # --foreign-command should be executed on non-Git working copies.
	    wcs+=("$dir")
	fi
    done
done
if [ ${#wcs[@]} -eq 0 ]; then
    echo >&2 "ERROR: No working copies found."
    exit 1
fi

exec git-wcdo "${wcdoArgs[@]}" "${wcs[@]}" -- "$@"
