#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
List files under version control; skip unversioned files.
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-l|--long [--date FORMAT|--relative-date]] [-r|--recursive|-d|--directory] [--no-classify] [FILE, ...] [-?|-h|--help]'
}

isNeedLog=
formatPrefix=
formatSuffix=
maxDepth=1
classifyDirectories=/
typeset -a gitLogArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--long|-l)	shift; isNeedLog=t; formatPrefix='%h %<(12,trunc)%aN %<(22)%ad '; formatSuffix=;;
	--recursive|-r)	shift; maxDepth='';;
	--directory|-d)	shift; maxDepth=0;;
	--date)			isNeedLog=t; gitLogArgs+=("$1" "$2"); shift; shift;;
	--date=*)		isNeedLog=t; gitLogArgs+=("$1"); shift;;
	--relative-date)	isNeedLog=t; gitLogArgs+=("$1"); shift;;
	--no-classify)		shift; classifyDirectories=;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

listFiles()
{
    find "${@#${PWD}/}" ${maxDepth:+-maxdepth} $maxDepth -name .git -prune -o -print | sort
}

IFS=$'\n'
for filespec in $(listFiles "$@")
do
    [ "$filespec" = . ] && continue

    filespec=${filespec#./}
    if [ "$isNeedLog" ]; then
	# Optimization: git ls-files can sort out untracked files much faster
	# than git log.
	git ls-files --error-unmatch -- "$filespec" >/dev/null 2>/dev/null || continue

	filespecSuffix=; [ -d "$filespec" ] && filespecSuffix=$classifyDirectories
	git log --pretty=tformat:"${formatPrefix}${filespec//%/%%}${filespecSuffix}${formatSuffix}" --max-count 1 "${gitLogArgs[@]}" -- "$filespec"
    else
	if [ -d "$filespec" ]; then
	    # Print directory (name) if it contains any tracked files.
	    if git ls-files --error-unmatch -- "$filespec" >/dev/null 2>&1; then
		printf '%s%s\n' "${filespec%/}" "$classifyDirectories"
	    fi
	else
	    git ls-files --error-unmatch -- "$filespec" 2>/dev/null
	fi
    fi
done
