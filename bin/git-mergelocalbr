#!/bin/bash
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Merge all / the last committed N local branches (except for the current
branch and master (and base branch if defined)).
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--branches "<branch1> ..."] [-q|--quiet] [-y|--yes] [--include-current] [--include-master] [--include-base] [--include-all] [-n N|--count N] [--no-commit] [--squash] [-s <strategy> | -s single | -s1 ] [-m <msg>] [-?|-h|--help]'
}

branchNum=9999
typeset -a inputBranches=()
printf -v originalArgs '%q ' "${@//
/ }"
if [ "$1" = '--branches' ]; then
    # Internal hook to pass in the branches.
    shift
    inputBranches=($1)
    shift
fi
isQuiet=
isYes=
isOneByOneMerge=
typeset -a gitLocalbrArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--quiet|-q)	shift; isQuiet=t;;
	--yes|-y)	shift; isYes=t;;
	--count|-n)	shift; branchNum="$1"; shift;;
	-s1)		shift; isOneByOneMerge=t;;
	-s)		if [ "$2" = 'single' ]; then shift; shift; isOneByOneMerge=t; else break; fi;;
	--include-*)	gitLocalbrArgs+=("$1"); shift;;
	--)		shift; break;;
	*)		break;;
    esac
done

getOneByOneMergeCommand()
{
    local gitArgs="$1"; shift
    local commandSeparator=
    local branch
    for branch
    do
	printf '%sgit merge%s%s %s' "$commandSeparator" "${gitArgs:+ }" "$gitArgs" "$branch"
	commandSeparator=' && '
    done
}

readarray -t localBranches < <(git-localbr "${gitLocalbrArgs[@]}" -- "${inputBranches[@]}" | tail -n "$branchNum")
if [ ${#localBranches[@]} -eq 0 ]; then
    echo >&2 'No local branches found!'
    exit 1
fi

if [ "$isOneByOneMerge" ]; then
    readarray -t mergeCommand < <(getOneByOneMergeCommand "$*" "${localBranches[@]}")
else
    typeset -a mergeCommand=(git merge "$@" "${localBranches[@]}")
fi

IFS=$'\n'
if [ "$isYes" ]; then
    [ "$isQuiet" ] || echo >&2 "Merging:
${localBranches[*]}"
else
    echo >/dev/tty "Merging:
${localBranches[*]}"
    </dev/tty read -r -N 1 -p "Really merge these branches? (y/n) " choice; echo >/dev/tty
    [ "$choice" = "y" ] || exit 1
fi

eval "${mergeCommand[@]}"
if [ $? -eq 2 -a ! "$isOneByOneMerge" ]; then
    echo '
Hint: When the merge with strategy octopus fails, try merging sequentially:'
    printf 'git mergelocalbr %s-s1\n    or\n%s\n' "$originalArgs" "$(getOneByOneMergeCommand "$*" "${localBranches[@]}")"

    exit 2
fi
