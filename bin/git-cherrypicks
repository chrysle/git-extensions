#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Find commits (not) merged upstream, based on the actual changeset.
With --in, only show commits already merged.
With --out, only show commits not yet merged.
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-v] [--in|--out] [<upstream> [<head> [<limit>]]] [-?|-h|--help]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
esac
typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()

typeset arg=
typeset allargs=()
typeset filter=
for arg
do
    case "$arg" in
	--in)	shift; [ "$filter" ] && { printUsage "$0"; exit 1; }; filter='^- ';;
	--out)	shift; [ "$filter" ] && { printUsage "$0"; exit 1; }; filter='^+ ';;
	*)	allargs+=("$arg");;
    esac
done

filterCommand=
if [ "$filter" ]; then
    filterCommand=" | GREP_OPTIONS= grep -e '$filter'"
else
    : ${GIT_CHERRYPICKS_PREFIX:='[32m'}
    : ${GIT_CHERRYPICKS_SUFFIX:='[0m'}
    filterCommand=" | sed -e 's/^- .*$/${GIT_CHERRYPICKS_PREFIX}&${GIT_CHERRYPICKS_SUFFIX}/'"
fi

eval 'git cherry "${allargs[@]}"' $filterCommand "${pager:+|}" '"${pager[@]}"'
