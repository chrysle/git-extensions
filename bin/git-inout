#!/bin/bash
set -o pipefail

printUsage()
{
    cat <<HELPTEXT
Show incoming and outgoing commit logs between current / passed <branch> and its
remote tracked branch / passed <other-branch> / corresponding remote branch of
passed <remote>.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[<remote>|(<branch> [<other-branch>])] [-?|-h|--help]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac

ensureValidRef()
{
    if ! git-existsbr "$1"; then
	printf >&2 'ERROR: Branch %s does not exist!\n' "$1"
	exit 1
    fi
}

case $# in
    2)	baseBranch="$1"
	otherBranch="$2"
	;;
    1)	baseBranch="$(git-brname --real-branch-only)" || exit $?
	case "$1" in
	    */*)    otherBranch="$1";;
	    *)	    if git-existsremote "$1"; then
			otherBranch="$(git-remotebr "$1")" || exit $?
		    else
			otherBranch="$1"
		    fi
		    ;;
	esac
	;;
    0)	baseBranch="$(git-brname --real-branch-only)" || exit $?
	otherBranch="$(git tracks)" || exit $?
	;;
    *)	printUsage >&2 "$0"
	exit 2
	;;
esac

typeset -a gitColorArg=()
typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS)
if [ -t 1 ]; then
    isNeedColorArgumentWhenPiping "$@" && gitColorArg=(--color=always)
else
    pager=()
fi
ensureValidRef "$baseBranch"
ensureValidRef "$otherBranch"

inout()
{
    local status=1
    local padding=$'\n'
    GIT_ONELINELOG_DIRECT_ARG=--no-pager git-onelinelog "${gitColorArg[@]}" "$baseBranch..$otherBranch" | \
	outputAndPrintf "incoming ${otherBranch} -> ${baseBranch}:\\n" && status=0 || padding=''

    GIT_ONELINELOG_DIRECT_ARG=--no-pager git-onelinelog "${gitColorArg[@]}" "$otherBranch..$baseBranch" | \
	outputAndPrintf "${padding}outgoing ${baseBranch} -> ${otherBranch}:\\n" && status=0

    return $status
}
eval 'inout "$@"' "${pager:+|}" '"${pager[@]}"'
