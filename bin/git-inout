#!/bin/bash
set -o pipefail

printUsage()
{
    cat <<HELPTEXT
Show incoming and outgoing commit logs between current / passed branch and its
remote tracked branch / passed branch / corresponding remote branch of passed
remote.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[<branch> [<other-branch>]] [-?|-h|--help]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac

ensureValidRef()
{
    if ! git-existsbr "$1"; then
	printf >&2 'ERROR: Branch %s does not exist!\n' "$1"
	exit 1
    fi
}

if [ $# -eq 2 ]; then
    localBranch=$1
    remoteBranch=$2
elif [ $# -eq 1 ]; then
    localBranch=$(git-brname --real-branch-only) || exit $?
    case "$1" in
	*/*)	remoteBranch=$1;;
	*)	remoteBranch=$(git-remotebr "$1") || exit $?;;
    esac
else
    localBranch=$(git-brname --real-branch-only) || exit $?
    remoteBranch=$(git tracks) || exit $?
fi

typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()
ensureValidRef "$localBranch"
ensureValidRef "$remoteBranch"

gitColorArg=()
[ -n "$pager" ] && isNeedColorArgumentWhenPiping "$@" && gitColorArg=(--color=always)

inout()
{
    local status=1
    local padding=$'\n'
    git-onelinelog --no-pager "${gitColorArg[@]}" "$localBranch..$remoteBranch" | \
	outputAndPrintf "incoming ${remoteBranch} -> ${localBranch}:\\n" && status=0 || padding=''

    git-onelinelog --no-pager "${gitColorArg[@]}" "$remoteBranch..$localBranch" | \
	outputAndPrintf "${padding}outgoing ${localBranch} -> ${remoteBranch}:\\n" && status=0

    return $status
}
eval 'inout "$@"' "${pager:+|}" '"${pager[@]}"'
