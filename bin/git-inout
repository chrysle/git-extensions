#!/bin/bash
set -o pipefail

: ${GIT_INOUT_COLOR_IN=[3m}
: ${GIT_INOUT_COLOR_OUT=[1m}
: ${GIT_INOUT_COLOR_RESET=[0m}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--stat|--ahead-behind] [--ignore-nonexisting] [<remote>|(<branch>|<commit> [<other-branch>|<other-commit>])] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Show incoming and outgoing commit logs between current / passed <branch> and its
remote tracked branch / passed <other-branch> / passed <commit> and
<other-commit> / corresponding remote branch of passed <remote>.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --stat		Just print a one-line summary of chronological changes;
			from oldest commit to newest, every commit is
			represented by either ${GIT_INOUT_COLOR_IN}i${GIT_INOUT_COLOR_RESET} or ${GIT_INOUT_COLOR_OUT}o${GIT_INOUT_COLOR_RESET}.
    --ahead-behind	Just print a one-line summary like "git status":
			BASE...BRANCH [ahead 2, behind 1]
    --ignore-nonexisting
			Don't print an error if a passed ref does not exist;
			simply output nothing then.
HELPTEXT
}

typeset -a colorArg=()
typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS)
if [ -t 1 ]; then
    colorArg=(--color=always)
else
    pager=()
fi
isIgnoreNonexisting=
action=inout
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--stat)		shift; action=inoutStat;;
	--ahead-behind)	shift; action=aheadBehind;;
	--ignore-nonexisting)
			shift; isIgnoreNonexisting=t;;
	--color=auto)	shift;;
	--no-color|--color=*)
			colorArg=("$1"); shift;;
	--color)	[ "$2" = auto ] || colorArg=("$1=$2"); shift; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
[ "${colorArg[*]}" = '--color=always' ] || unset "${!GIT_INOUT_COLOR_@}"

ensureValidRef()
{
    local ref="${1:?}"; shift
    if ! git rev-parse --verify --quiet "$ref" >/dev/null 2>&1; then
	[ "$isIgnoreNonexisting" ] || printf >&2 'ERROR: %s does not exist!\n' "$ref"
	exit 1
    fi
}

case $# in
    2)	if ! [[ "$1" =~ / ]] && git-existsremote "$1"; then
	    if otherRev="$(git-remotebr "$1" "$2" 2>/dev/null)"; then
		shift
		baseRev="$(git-desc "$1")" || exit $?; shift
	    else
		baseRev="${2#$1/}"
		shift
		otherRev="$(git-desc "$1")" || exit $?; shift
	    fi
	    shift
	else
	    baseRev="$(git-desc "$1")" || exit $?; shift
	    otherRev="$(git-desc "$1")" || exit $?; shift
	fi
	;;
    1)	baseRev="$(git-brname --raw)" || exit $?
	case "$1" in
	    */*)    otherRev="$1";;
	    *)	    if git-existsremote "$1"; then
			otherRev="$(git-remotebr "$1")" || exit $?
		    else
			otherRev="$(git-desc "$1")" || exit $?
		    fi
		    ;;
	esac
	shift
	;;
    0)	baseRev="$(git-brname --raw)" || exit $?
	otherRev="$(git tracks)" || exit $?
	;;
    *)	printUsage >&2 "$0"
	exit 2
	;;
esac

ensureValidRef "$baseRev"
ensureValidRef "$otherRev"

inout()
{
    local status=1
    local padding=$'\n'
    GIT_ONELINELOG_DIRECT_ARG=--no-pager git-onelinelog "${colorArg[@]}" "$baseRev..$otherRev" | \
	outputAndPrintf "incoming ${otherRev} -> ${baseRev}:\\n" && status=0 || padding=''

    GIT_ONELINELOG_DIRECT_ARG=--no-pager git-onelinelog "${colorArg[@]}" "$otherRev..$baseRev" | \
	outputAndPrintf "${padding}outgoing ${baseRev} -> ${otherRev}:\\n" && status=0

    return $status
}

inoutStat()
{
    typeset -a incoming outgoing symbols
    readarray -t incoming < <(git log --pretty=$'tformat:%ct\t'"${GIT_INOUT_COLOR_IN}i${GIT_INOUT_COLOR_RESET}" "$baseRev..$otherRev")
    readarray -t outgoing < <(git log --pretty=$'tformat:%ct\t'"${GIT_INOUT_COLOR_OUT}o${GIT_INOUT_COLOR_RESET}" "$otherRev..$baseRev")
    readarray -t symbols < <(printf '%s\n' "${incoming[@]}" "${outgoing[@]}" | sort -n | cut -f2-)
    local symbolString; printf -v symbolString %s "${symbols[@]}"

    if [ ${#incoming[@]} -gt 0 -a ${#outgoing[@]} -eq 0 ]; then
	echo "incoming ${otherRev} -> ${baseRev}: $symbolString"
    elif [ ${#incoming[@]} -eq 0 -a ${#outgoing[@]} -gt 0 ]; then
	echo "outgoing ${baseRev} -> ${otherRev}: $symbolString"
    elif [ ${#incoming[@]} -gt 0 -a ${#outgoing[@]} -gt 0 ]; then
	echo "in/out  ${baseRev} <-> ${otherRev}: $symbolString"
    else
	return 1
    fi
}

aheadBehind()
{
    local behind; behind=$(git log --pretty=$'tformat:x' "$baseRev..$otherRev" | wc -l)
    local ahead ;  ahead=$(git log --pretty=$'tformat:x' "$otherRev..$baseRev" | wc -l)
    local indicator
    [ $ahead -gt 0 ]  && printf -v indicator 'ahead %d' $ahead
    [ $behind -gt 0 ] && printf -v indicator '%sbehind %d' "${indicator}${indicator:+, }" $behind

    if [ -n "$indicator" ]; then
	echo "${baseRev}...${otherRev} [${indicator}]"
    else
	return 1
    fi
}

eval '$action "$@"' "${pager:+|}" '"${pager[@]}"'
