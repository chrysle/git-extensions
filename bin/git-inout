#!/bin/bash
set -o pipefail

: ${GIT_INOUT_COLOR_IN=[3m}
: ${GIT_INOUT_COLOR_OUT=[1m}
: ${GIT_INOUT_COLOR_RESET=[0m}

printUsage()
{
    cat <<HELPTEXT
Show incoming and outgoing commit logs (or just a one-line summary with --stat)
between current / passed <branch> and its remote tracked branch / passed
<other-branch> / passed <commit> and <other-commit> / corresponding remote
branch of passed <remote>.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--stat] [<remote>|(<branch>|<commit> [<other-branch>|<other-commit>])] [-?|-h|--help]'
}

typeset -a colorArg=()
typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS)
if [ -t 1 ]; then
    colorArg=(--color=always)
else
    pager=()
fi
action=inout
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--stat)		shift; action=inoutStat;;
	--color=auto)	shift;;
	--no-color|--color=*)
			colorArg=("$1"); shift;;
	--color)	[ "$2" = auto ] || colorArg=("$1=$2"); shift; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
[ "${colorArg[*]}" = '--color=always' ] || unset "${!GIT_INOUT_COLOR_@}"

ensureValidRef()
{
    local ref="${1:?}"; shift
    if ! git rev-parse --verify --quiet "$ref" >/dev/null 2>&1; then
	printf >&2 'ERROR: %s does not exist!\n' "$ref"
	exit 1
    fi
}

case $# in
    2)	baseRev="$(git-desc "$1")" || exit $?; shift
	otherRev="$(git-desc "$1")" || exit $?; shift
	;;
    1)	baseRev="$(git-brname --raw)" || exit $?
	case "$1" in
	    */*)    otherRev="$1";;
	    *)	    if git-existsremote "$1"; then
			otherRev="$(git-remotebr "$1")" || exit $?
		    else
			otherRev="$(git-desc "$1")" || exit $?
		    fi
		    ;;
	esac
	shift
	;;
    0)	baseRev="$(git-brname --raw)" || exit $?
	otherRev="$(git tracks)" || exit $?
	;;
    *)	printUsage >&2 "$0"
	exit 2
	;;
esac

ensureValidRef "$baseRev"
ensureValidRef "$otherRev"

inout()
{
    local status=1
    local padding=$'\n'
    GIT_ONELINELOG_DIRECT_ARG=--no-pager git-onelinelog "${colorArg[@]}" "$baseRev..$otherRev" | \
	outputAndPrintf "incoming ${otherRev} -> ${baseRev}:\\n" && status=0 || padding=''

    GIT_ONELINELOG_DIRECT_ARG=--no-pager git-onelinelog "${colorArg[@]}" "$otherRev..$baseRev" | \
	outputAndPrintf "${padding}outgoing ${baseRev} -> ${otherRev}:\\n" && status=0

    return $status
}

inoutStat()
{
    local incoming outgoing
    incoming="$(git log --pretty=tformat:i "$baseRev..$otherRev")"
    outgoing="$(git log --pretty=tformat:o "$otherRev..$baseRev")"

    if [ -n "$incoming" -a -z "$outgoing" ]; then
	echo "incoming ${otherRev} -> ${baseRev}: ${GIT_INOUT_COLOR_IN}${incoming//$'\n'/}${GIT_INOUT_COLOR_RESET}"
    elif [ -z "$incoming" -a -n "$outgoing" ]; then
	echo "outgoing ${baseRev} -> ${otherRev}: ${GIT_INOUT_COLOR_OUT}${outgoing//$'\n'/}${GIT_INOUT_COLOR_RESET}"
    elif [ -n "$incoming" -a -n "$outgoing" ]; then
	echo "in/out  ${baseRev} <-> ${otherRev}: ${GIT_INOUT_COLOR_IN}${incoming//$'\n'/}${GIT_INOUT_COLOR_RESET}${GIT_INOUT_COLOR_OUT}${outgoing//$'\n'/}${GIT_INOUT_COLOR_RESET}"
    else
	return 1
    fi
}

eval '$action "$@"' "${pager:+|}" '"${pager[@]}"'
