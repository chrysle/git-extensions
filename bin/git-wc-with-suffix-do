#!/bin/bash
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Execute "git SIMPLECOMMAND" and/or COMMANDLINE on each passed WORKING-COPY, with
--worktrees also on clones / worktrees that sit next to WORKING-COPY, but have a
suffix (e.g. WC.alt) in the directory name. With --suffix, a worktree with
WC.SUFFIX is preferred if it exists, but it falls back to using the plain WC.
(If you want to only execute in WC.SUFFIX, you can directly pass the SUFFIX in
the WORKING-COPY arguments to git-wcdo.)
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--suffix SUFFIX|--worktrees] [--ignore-nonexisting] [--no-pager] [--no-header|--branch-name] [--no-git-color] [--single-success] [--skip-files] [-s|--skip-foreign|--foreign-command "COMMANDLINE" [...]] [--predicate-command "COMMANDLINE" [...]] [-c|--command "COMMANDLINE" [-c ...]] WORKING-COPY [...] [-- SIMPLECOMMAND ...] [-?|-h|--help]'
}

typeset -a wcs=()
typeset -a wcdoArgs=()
suffix=
isWorktrees=
isIgnoreNonexisting=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;

	-+([s${GIT_WCDO_COMMAND_SHORT_OPTIONS}]))
			wcdoArgs+=("$1"); shift;;
	--@(no-pager|no-header|branch-name|separate-errors|no-git-color|no-color|color=*|single-success|skip-files|skip-foreign${GIT_WCDO_COMMAND_LONG_OPTIONS:+|}${GIT_WCDO_COMMAND_LONG_OPTIONS}))
			wcdoArgs+=("$1"); shift;;
	-[c${GIT_WCDO_COMMAND_SHORT_PARAMS}])
			wcdoArgs+=("$1" "$2"); shift; shift;;
	--@(color|command|progress|foreign-command|predicate-command${GIT_WCDO_COMMAND_LONG_PARAMS:+|}${GIT_WCDO_COMMAND_LONG_PARAMS}))
			wcdoArgs+=("$1" "$2"); shift; shift;;

	--worktrees)	shift; isWorktrees=t;;
	--suffix)	shift; suffix="$1"; shift;;
	--ignore-nonexisting)
			shift; isIgnoreNonexisting=t;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		wcs+=("$1"); shift;;
    esac
done
if [ "$isWorktrees" ]; then
    if [ "$suffix" ]; then
	echo "ERROR: Cannot combine --suffix and --worktrees."
	echo
	printUsage "$0"
	exit 2
    fi >&2

    typeset -a collectDirnames=()
    for d in "${wcs[@]}"
    do
	collectDirnames+=("$d"*)
    done
    wcs=("${collectDirnames[@]}")
fi
if [ ${#wcs[@]} -eq 0 ]; then
    echo "ERROR: No WORKING-COPYs."
    echo
    printUsage "$0"
    exit 2
fi >&2

typeset -a wcWithSuffixes=()
for dir in "${wcs[@]}"
do
    [ "$suffix" -a -d "${dir}${suffix}" ] && dir+="$suffix"
    if ! [ -d "$dir" ]; then
	[ "$isIgnoreNonexisting" ] || printf >&2 'Warning: No working copy %s found, skipping.\n' "$dir"
	continue
    fi

    wcWithSuffixes+=("$dir")
done

exec git-wcdo "${wcdoArgs[@]}" "${wcWithSuffixes[@]}" -- "$@"
