#!/bin/bash
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Tag all / the first committed N local branches (except for the current branch
and master (and base branch if defined)), then delete them from the local
repository as well as origin.
Use this to remove old branches that have been incorporated into master (or the
base branch), or pass -f to force archiving.
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--branches "<branch1> ..."] [-q|--quiet] [-y|--yes] [-f|--force] [-n N|--count N] [-?|-h|--help]'
}

branchNum=9999
typeset -a inputBranches=()
if [ "$1" = '--branches' ]; then
    # Internal hook to pass in the branches.
    shift
    inputBranches=($1)
    shift

    if [ ${#inputBranches[@]} -eq 0 ]; then
	echo >&2 'ERROR: No branches passed to --branches.'
	exit 2
    fi
fi
isQuiet=
isYes=
typeset -a gitArchiveArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--quiet|-q)	shift; isQuiet=t;;
	--yes|-y)	shift; isYes=t;;
	--count|-n)	shift; branchNum="$1"; shift;;
	--force|-f)	gitArchiveArgs+=("$1"); shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

readarray -t localBranches < <(git-localbr -- "${inputBranches[@]}" | head -n "$branchNum")
if [ ${#localBranches[@]} -eq 0 ]; then
    echo >&2 'No local branches found!'
    exit 1
fi

IFS=$'\n'
if [ "$isYes" ]; then
    [ "$isQuiet" ] || echo >&2 "Archiving:
${localBranches[*]}"
else
    userBinaryChoice --introduction "Archiving:
${localBranches[*]}" --question 'Really archive these branches?' --yes-no || exit 4
fi

exec git-archivebr "${gitArchiveArgs[@]}" "${localBranches[@]}"
