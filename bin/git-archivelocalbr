#!/bin/bash
shopt -qs extglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--branches "<branch1> ..."] [-n N|--count N] [-q|--quiet] [-y|--yes] [-f|--force] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Tag all / the first N committed local branches (except for the current branch
and master (and base branch if defined)), then delete them from the local
repository as well as origin.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --count|-n N	Only archive the first N committed local branches.
    --quiet|-q		Don't print the branches that will be archived.
    --yes|-y		Skip the confirmation.
    --force|-f		Force archiving of those branches that have not been
			fully merged.
HELPTEXT
}

branchNum=9999
typeset -a inputBranches=()
if [ "$1" = '--branches' ]; then
    # Internal hook to pass in the branches.
    shift
    inputBranches=($1)
    shift

    if [ ${#inputBranches[@]} -eq 0 ]; then
	echo >&2 'ERROR: No branches passed to --branches.'
	exit 2
    fi
fi
isQuiet=
isYes=
typeset -a gitArchiveArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--quiet|-q)	shift; isQuiet=t;;
	--yes|-y)	shift; isYes=t;;
	--count|-n)	shift; branchNum="$1"; shift;;
	--force|-f)	gitArchiveArgs+=("$1"); shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

readarray -t localBranches < <(git-localbr -- "${inputBranches[@]}" | head -n "$branchNum")
if [ ${#localBranches[@]} -eq 0 ]; then
    echo >&2 'No local branches found!'
    exit 1
fi

IFS=$'\n'
if [ "$isYes" ]; then
    [ "$isQuiet" ] || echo >&2 "Archiving:
${localBranches[*]}"
else
    if [ ${#localBranches[@]} -eq 1 ]; then
	localBranchesArticle=this
	localBranchesPlural=
    else
	localBranchesPlural=es
	localBranchesArticle=these
    fi
    userBinaryChoice --introduction "Archiving:
${localBranches[*]}" --question "Really archive $localBranchesArticle branch${localBranchesPlural}?" --yes-no || exit 4
fi

exec git-archivebr "${gitArchiveArgs[@]}" "${localBranches[@]}"
