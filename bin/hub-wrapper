#!/bin/bash

fixPath()
{
    # XXX: Git puts itself in front of the PATH; need precedence for our
    # scripts, though. Solve this by putting our dirspec in front again. Take
    # that, Git!
    readonly scriptDir="$([ "${BASH_SOURCE[0]}" ] && absoluteScriptFile="$(readlink -nf -- "${BASH_SOURCE[0]}")" && dirname -- "$absoluteScriptFile" || exit 3)"
    [ -d "$scriptDir" ] || { echo >&2 "ERROR: Cannot determine script directory!"; exit 3; }
    PATH="${scriptDir}:$PATH"
}

typeset -a gitConfigArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	-c) gitConfigArgs+=("$1" "$2"); shift; shift;;
	*)  break;;
    esac
done
# If there's no alias we can simply pass gitConfigArgs directly after the "git"
# command. Aliases however need to do this on their own (if their Git command(s)
# need to react to config overrides). We can just pass the arguments along here.
GIT_CONFIG_ARGS=; [ ${#gitConfigArgs[@]} -gt 0 ] && printf -v GIT_CONFIG_ARGS '%q ' "${gitConfigArgs[@]}"; export GIT_CONFIG_ARGS

hubSubAlias="hub-$1-$2"
hubAlias="hub-$1"
gitSubAlias="git-$1-$2"
gitAlias="git-$1"
if type -t "$hubSubAlias" >/dev/null; then
    shift; shift
    fixPath
    HUB=t $hubSubAlias "$@"
elif type -t "$hubAlias" >/dev/null; then
    shift
    fixPath
    HUB=t $hubAlias "$@"
elif type -t "$gitSubAlias" >/dev/null; then
    shift; shift
    HUB=t $gitSubAlias "$@"
elif type -t "$gitAlias" >/dev/null; then
    shift
    HUB=t $gitAlias "$@"
else
    HUB=t exec hub "${gitConfigArgs[@]}" "$@"
fi
