#!/bin/bash
set -o pipefail
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Merge / rebase <branch> to the current branch, then delete it from the local
repository as well as a tracked remote (if it exists there).
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--push] [--no-delete] [--rebase-single|--rebase|--ff|--ff-only|--no-ff|<merge-args> ...] -b|--branch <branch> [...] | [--] <branch> [...] [-?|-h|--help]'
    echo
    cat <<HELPTEXTCHECK
Merge / rebase <branch> (with --rebase-single rebase only if it's a single
non-merge commit, else merge) to the current branch, run CHECK-COMMANDS, and if
all succeed (for -c|--commands, for stdin: only with --worst-status, else if the
last succeeds) delete the branch from the local repository as well as a tracked
remote (if it exists there) (unless --no-delete is given).
HELPTEXTCHECK
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[...] -c|--command "CHECK-COMMANDLINE" [-c ...]'
    echo
    printf 'Usage: echo CHECK-COMMANDLINES | %q %s\n' "$(basename "$1")" '[...] [--bare|[--initial-status NUM] [--trailing-prompt|--no-trailing-prompt] [--no-output-no-prompt] [--no-output-no-error] [--emulate-prompt]] [--no-success-no-count|--no-count-on N] [--exit-on-success|--exit-on-failure|--exit-on NUM] [--worst-status] [--comment COMMENT] [--summarize-failed ERROR-TEXT [--summarize-failed-separator SEP]] -'
    echo
    printf 'Usage: %q %s - <<EOF\n  CHECK-COMMANDLINE\n...\nEOF\n' "$(basename "$1")" '[...]'
}

isContinue=
isDelete=t
isPush=
if [ "$HUB" ]; then
    # Need to push to remote first so that GitHub recognizes that the branch has
    # been merged. If the branch is first deleted, GitHub marks a corresponding
    # pull request as "closed".
    isPush=t
fi
hasMergeResolutionArg=
isRebase=
isRebaseSingle=
typeset -a branches=()
typeset -a fastForwardArgs=()
typeset -a mergeArgs=()
isBare=
isCheckFromStdin=
typeset -a checkCommandArgs=()
typeset -a checkCommands=()
typeset -a bashArgs=()
runWithCommand=runWithPrompt
typeset -a runWithPromptArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--continue)	shift; isContinue=t;;
	--no-delete)	shift; isDelete=;;
	--push)		shift; isPush=t;;
	--branch|-b)	shift; branches+=("$1"); shift;;
	--rebase)	shift; hasMergeResolutionArg=t; isRebase=t;;
	--rebase-single)
			shift; hasMergeResolutionArg=t; isRebaseSingle=t;;
	--ff|--no-ff|--ff-only)
			hasMergeResolutionArg=t; fastForwardArgs=("$1"); shift;;
	--command|-c)	checkCommandArgs+=("$1" "$2"); shift; checkCommands+=(${checkCommands:+&&} "$1"); shift;;
	--bare)		shift; isBare=t; runWithCommand=runWith;;
	--exit-on-failure)
			bashArgs+=(-e); runWithPromptArgs+=("$1"); shift;;
	--trailing-prompt|--no-trailing-prompt|--no-output-no-prompt|--no-output-no-error|--no-success-no-count|--exit-on-success|--emulate-prompt|--worst-status)
			runWithPromptArgs+=("$1"); shift;;
	--initial-status|--no-count-on|--exit-on|--comment|--summarize-failed|--summarize-failed-separator)
			runWithPromptArgs+=("$1" "$2"); shift; shift;;

	-[sXm])		mergeArgs+=("$1" "$2"); shift; shift;;
	--@(strategy|strategy-option|gpg-sign)=*)	mergeArgs+=("$1"); shift;;
	--@(strategy|strategy-option|gpg-sign))		mergeArgs+=("$1" "$2"); shift; shift;;

	--)		mergeArgs+=("$1"); shift; break;;
	--*)		mergeArgs+=("$1"); shift;;
	-)		shift; isCheckFromStdin=t; break;;
	-*)		mergeArgs+=("$1"); shift;;
	*)		break;;
    esac
done
if [ "${!#}" = '-' ]; then
    isCheckFromStdin=t
    set -- "${@:1:$(($#-1))}"
fi
if [ "$isCheckFromStdin" ] && [ ${#checkCommands[@]} -gt 0 ]; then
    echo 'ERROR: Cannot combine CHECK-COMMANDLINE from stdin (-) with -c|--command.'
    echo
    printUsage "$0"
    exit 2
fi >&2

branches+=("$@")
if [ ${#branches[@]} -eq 0 ]; then
    echo >&2 'Need (at least one) <branch> to merge!'
    exit 2
elif ! git-existsbr --verbose "${branches[@]}"; then
    exit 1
fi

branchesPlural=es
branchesSubject=them
branchesSubjectAuxiliaryVerb='branches have'
verbPlural=
if [ ${#branches[@]} -eq 1 ]; then
    branchesPlural=
    branchesSubject=it
    branchesSubjectAuxiliaryVerb='the branch has'
    verbPlural=s
fi

joinBy --prefix 'Reintegrating ' --last-separator ' and ' ', ' "${branches[@]}" 2>/dev/null

# Ensure that the branch(es) are good for merging.
git-mergecheck "${branches[@]}" || exit $?

if [ -n "$HUB" ] && [ ! "$isRebase" ]; then
    # Try to obtain corresponding pull requests based on the passed branches'
    # HEAD commits and seed the merge message with it / them (as the PR title
    # already summarizes the changeset and makes for a great merge title). This
    # saves the user from opening the PR and copy-and-pasting it.
    typeset -a prefixCommands=()
    type -t timeout >/dev/null && prefixCommands=(timeout 10 "${prefixCommands[@]}")
    type -t invocationMessage >/dev/null && prefixCommands=(invocationMessage --message 'Searching for PR...' --success FOUND --fail NONE -- "${prefixCommands[@]}")
    pullRequestTitles="$("${prefixCommands[@]}" hub-prtitle --as-merge-message "${branches[@]}")"
    branchMergeMessage="$(joinBy --prefix "Merge branch$branchesPlural '" --suffix "'" --last-separator "' and '" "', '" "${branches[@]}" 2>/dev/null)"
    [ -n "$pullRequestTitles" ] && mergeArgs+=(--message "$pullRequestTitles"$'\n\n'"$branchMergeMessage" --edit)
fi


canRebase()
{
    for branch in "${branches[@]}"
    do
	if [ "$(git log --pretty=tformat:%H --max-count 2 --no-merges "..$branch" | wc -l)" -gt 1 ]; then
	    # At least one branch has more than one non-merge commit.
	    return 1
	fi
    done
    return 0
}
printContinueCommand()
{
    [ "$isCheckFromStdin" ] && printf >&2 'echo CHECK-COMMANDLINES | '
    printf >&2 '%q ' "$(basename "$0")" '--continue' ${isBare:+--bare} "${runWithPromptArgs[@]}" "${checkCommandArgs[@]}"
    printf >&2 -- '--branch %q '  "${branches[@]}"
    [ "$isCheckFromStdin" ] && printf >&2 '-'
    printf >&2 '\n'
}
pushit()
{
    if [ -z "$targetTracks" ]; then
	printf >&2 "ERROR: Cannot push; no upstream configured for branch '%s'\\n" "$path"
	return 1    # Still continue with the branch deletion here, but following push errors will abort.
    elif [ "$targetTrackedRemote" = 'origin' ]; then
	# First push to upstream; we usually want to catch up origin to
	# upstream, but keep it at the current state if pushing to upstream
	# failed.
	if git-existsbr "upstream/$path" && ! git-remote-isreadonly upstream; then
	    git push upstream "$path" || exit $?
	fi
    fi
    if [ -n "$targetTrackedRemote" ]; then
	# Push to the tracked remote (usually origin).
	git push "$targetTrackedRemote" || exit $?
    fi
    if [ "$targetTrackedRemote" != 'origin' ]; then
	# Push to origin (if it's different from the tracked remote) last.
	if git-existsbr "origin/$path" && ! git-remote-isreadonly origin; then
	    git push origin "$path" || exit $?
	fi
    fi
}

path="$(git-brname --real-branch-only)" || exit $?
targetTracks="$(git-tracks 2>/dev/null)"
targetTrackedRemote="${targetTracks%%/*}"

if [ ! "$isContinue" ]; then
    if [ -n "$targetTracks" ] && ! git-equals HEAD "$targetTracks"; then
	if git-ffdryrun "$targetTracks"; then
	    if userBinaryChoice --console --question "Your $path branch is not up-to-date with ${targetTrackedRemote}, but can be fast-forwarded. Fast-forward now?" --yes-no; then
		git-wrapper merge --ff-only "$targetTracks" || {
		    status=$?
		    echo >&2 'Fast-forwarding unexpectedly failed.'
		    exit $status
		}
	    fi
	elif userBinaryChoice --console --question "Your $path branch has diverged from ${targetTracks}; do you want to stop here and merge that first?" --yes-no; then
	    exit 0
	else
	    printf "Okay, I'll reintegrate into %s locally and you'll then have to merge with %s after that.\\n" "$path" "$targetTracks"
	fi
    fi

    if [ ! "$hasMergeResolutionArg" ]; then
	if git-ffdryrun "${branches[@]}"; then
	    commitNum=$(git log --pretty=tformat:%H "HEAD..${branches[-1]}" | wc -l)
	    commitNumPlural=s; [ $commitNum -eq 1 ] && commitNumPlural=
	    branchNum=${#branches[@]}; [ $branchNum -eq 1 ] && branchNum=
	    userBinaryChoice --console --question "The $commitNum commit$commitNumPlural on the ${branchNum}${branchNum:+ }branch$branchesPlural can be fast-forwarded instead of merged. Fast-forward?" --yes-no && fastForwardArgs=(--ff-only)
	elif canRebase; then
	    hubNote=; [ "$HUB" ] && [ -n "$pullRequestTitles" ] && hubNote='Note: GitHub cannot detect the rebase and will say that the PR has been closed. If you need proper indication, please quit now and directly rebase in GitHub itself instead.'
	    choice="$(userchoiceFromList --question "The branch$branchesPlural only consist$verbPlural of a single commit. Rebase $branchesSubject instead of creating a separate merge commit?${hubNote:+$'\n'}${hubNote}" --no-cancel --ignore-case -- '[Y]es' '[N]o' '[Q]uit')" || exit $?
	    case "$choice" in
		Yes)
		    isRebase=t;;
		Quit)
		    if [ -n "$hubNote" ]; then
			echo "After rebasing in GitHub, you can delete the branch$branchesPlural via:"
			printf 'git oldelete -f'
			printf ' %q' "${branches[@]}"
			printf '\n'
		    fi >&2
		    exit 1
		    ;;
	    esac
	fi
    elif [ "$isRebaseSingle" ]; then
	canRebase && isRebase=t
    fi


    if [ "$isRebase" ]; then
	origRef="$(git-orig-ref)" || exit $?

	for branch in "${branches[@]}"
	do
	    git rebase HEAD "$branch" && git checkout "$origRef" || {
		status=$?
		if [ "$branch" = "${branches[-1]}" ]; then
		    echo >&2 "After this branch has been successfully rebased (see above), you can merge $branchesSubject and ${isCheckFromStdin:+run checks and }${isPush:+push and }delete $branchesSubject via"
		    printf >&2 'git checkout %q && git-merge --ff-only %q && ' "$origRef" "$branch"
		    printContinueCommand
		else
		    typeset -a missingBranches=("${branches[@]}")
		    while [ "${missingBranches[0]}" != "$branch" ]
		    do
			missingBranches=("${missingBranches[@]:1}")
		    done
		    missingBranches=("${missingBranches[@]:1}")

		    echo >&2 "After this branch has been successfully rebased (see above), you can continue rebasing, merge $branchesSubject and ${isCheckFromStdin:+run checks and }${isPush:+push and }delete $branchesSubject via"
		    printf >&2 'git checkout %q && git-merge --ff-only %q && %q --rebase --no-delete ' "$origRef" "$branch" "$(basename "$0")"
		    printf >&2 -- '--branch %q ' "${missingBranches[@]}"
		    printf >&2 '&& '
		    printContinueCommand
		fi
		exit $status
	    }
	    git-wrapper merge --ff-only "$branch" || exit $?
	done
    else
	git-wrapper merge "${fastForwardArgs[@]:---no-ff}" "${mergeArgs[@]}" "${branches[@]}" || {
	    status=$?
	    echo >&2 "After $branchesSubjectAuxiliaryVerb been merged, you can ${isCheckFromStdin:+run checks and }${isPush:+push and }delete $branchesSubject via"
	    printContinueCommand
	    exit $status
	}
    fi
fi


if [ "$isCheckFromStdin" ]; then
    if [ "$isBare" ] && [ ${#runWithPromptArgs[@]} -eq 0 -o "${#runWithPromptArgs[*]}" = --exit-on-failure ]; then
	bash "${bashArgs[@]}" -
    else
	${runWithCommand:?} "${runWithPromptArgs[@]}"
    fi
elif [ ${#checkCommands[@]} -gt 0 ]; then
    eval "${checkCommands[@]}"
fi || {
    status=$?
    echo >&2 "Checks failed; $branchesSubjectAuxiliaryVerb been merged, but not ${isPush:+pushed or }deleted yet."
    echo >&2 'Correct the problem by amending or additional commits, then invoke'
    printContinueCommand
    exit $status
}

status=0
[ ! "$isPush" ] || pushit || status=$?

[ "$isDelete" ] || exit 0
for branch in "${branches[@]}"
do
    tracks="$(git-tracks "$branch" 2>/dev/null)"
    trackedRemote="${tracks%%/*}"
    if [ -n "$trackedRemote" ]; then
	git-rldeletebr "$trackedRemote" "$branch"
    else
	git-rldeletebr origin --ignore-missing-in-origin "$branch"
    fi || status=$?
done
exit $status
