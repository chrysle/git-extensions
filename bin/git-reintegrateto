#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Merge / rebase the current branch to the passed <branch>, then delete it from
the local repository as well as a tracked remote (if it exists there).
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '<branch> [--rebase|--ff|--ff-only|--no-ff|<merge-args> ...] [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--rebase|--ff|--ff-only|--no-ff|<merge-args> ...] -b|--branch <branch>'
}

case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac

sourceBranch="$(git-brname --real-branch-only)" || exit $?
typeset -a reintegrateArgs=()
targetBranch=
case "$1" in
    -*)	;;
    ?*)	if git-existsbr "$1"; then
	    targetBranch="$1"
	    shift
	fi
	;;
esac
while [ $# -ne 0 ]
do
    case "$1" in
	--branch|-b)    shift
			if [ "$targetBranch" ]; then
			    echo >&2 'ERROR: <branch> can only be passed once.'
			    exit 2
			fi
			targetBranch="${1:?}"
			shift
			;;
	--)		reintegrateArgs+=("$1"); shift; break;;
	*)		reintegrateArgs+=("$1"); shift;;
    esac
done
if [ -z "$targetBranch" ]; then
    echo >&2 'ERROR: Missing <branch>.'
    exit 2
fi

if [ "$targetBranch" = "$sourceBranch" ]; then
    printf >&2 'ERROR: Cannot reintegrate %s onto itself; check out a different branch first!\n' "$targetBranch"
    exit 1
fi

if ! { printf '' >/dev/tty; } 2>/dev/null; then
    echo >&2 'ERROR: Need TTY to obtain interactive answers.'
    exit 5
fi

# Ensure that the branch is good for merging.
git-mergecheck --merge-to "$targetBranch" || exit $?

git checkout "$targetBranch" || exit $?
exec git-reintegrate --branch "$sourceBranch" "${reintegrateArgs[@]}" "$@"
