#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Merge / rebase the current branch to the passed <branch>, then delete it from
the local repository as well as a tracked remote (if it exists there).
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '<branch> [--push] [--no-delete] [--rebase-single|--rebase|--ff|--ff-only|--no-ff|<merge-args> ...] [--no-submodule-update] [-y|--yes] [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--push] [--no-delete] [--rebase-single|--rebase|--ff|--ff-only|--no-ff|<merge-args> ...] [-y|--yes] -b|--branch <branch>'
}

case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
esac

sourceBranch="$(git-brname --real-branch-only)" || exit $?
targetBranch=
case "$1" in
    -*)	;;
    ?*)	if git-existsbr "$1"; then
	    targetBranch="$1"
	    shift
	fi
	;;
esac
typeset -a reintegrateArgs=()
isContinue=
while [ $# -ne 0 ]
do
    case "$1" in
	--branch|-b)    shift
			if [ -n "$targetBranch" ]; then
			    echo >&2 'ERROR: <branch> can only be passed once.'
			    exit 2
			fi
			targetBranch="${1:?}"
			shift
			;;
	--continue)	reintegrateArgs+=("$1"); shift; isContinue=t;;
	--)		reintegrateArgs+=("$1"); shift; break;;
	*)		reintegrateArgs+=("$1"); shift;;
    esac
done
if [ -z "$targetBranch" ]; then
    echo >&2 'ERROR: Missing <branch>.'
    exit 2
fi

isOnTargetBranch=; [ "$targetBranch" = "$sourceBranch" ] && isOnTargetBranch=t
if [ "$isOnTargetBranch" ] && [ ! "$isContinue" ]; then
    printf >&2 'ERROR: Cannot reintegrate %s onto itself; check out a different branch first.\n' "$targetBranch"
    exit 2
elif [ "$isContinue" ] && [ ! "$isOnTargetBranch" ]; then
    printf >&2 'ERROR: Need to be on the target branch %s to be able to continue the finalization of the reintegration.\n' "$targetBranch"
    exit 2
fi

if ! { printf '' >/dev/tty; } 2>/dev/null; then
    echo >&2 'ERROR: Need TTY to obtain interactive answers.'
    exit 5
fi

if [ "$isContinue" ]; then
    # Source branch is not the current branch, but (hopefully) the one that was
    # checked out last, before the first invocation of this command switched
    # branches.
    sourceBranch="$(git rev-parse --symbolic-full-name '@{-1}' 2>/dev/null)"
    if [ -z "$sourceBranch" ]; then
	echo >&2 'ERROR: Cannot resolve original branch name; please directly invoke git-reintegrate with that BRANCH name:'

	gitCommand='git'; [ -n "$HUB" ] && gitCommand='hub'
	printf >&2 '$ %s reintegrate --branch BRANCH' "$gitCommand"
	printf >&2 ' %q' "${reintegrateArgs[@]}" "$@"

	exit 1
    fi

    sourceBranch="${sourceBranch#refs/heads/}"
else
    # Ensure that the branch is good for merging.
    git-mergecheck --merge-to "$targetBranch" || exit $?

    git-wrapper checkout "$targetBranch" || exit $?
fi
exec git-reintegrate --branch "$sourceBranch" "${reintegrateArgs[@]}" "$@"
