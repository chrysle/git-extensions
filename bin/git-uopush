#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
push upstream + origin; Directly push current / passed <branch> to upstream and
(if successful) push it to the tracking GitHub clone, too.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[<branch>] [-?|-h|--help]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
esac

lastArg=; [ $# -gt 0 ] && lastArg=${!#}
path="$lastArg"
if git-existsbr "origin/$path"; then
    if ! git-existsbr "upstream/$path"; then
	printf >&2 'ERROR: origin/%s exists, but upstream/%s does not.\n' "$path" "$path"
	exit 1
    fi

    set -- "${@:1:$(($#-1))}"
else
    path=$(git-brname --real-branch-only) || exit $?
    if ! git-existsbr "origin/$path"; then
	printf >&2 'ERROR: Cannot find corresponding origin branch; origin/%s does not exist.\n' "$path"
	exit 1
    elif ! git-existsbr "upstream/$path"; then
	printf >&2 'ERROR: origin/%s exists, but upstream/%s does not.\n' "$path" "$path"
	exit 1
    fi
fi

# First push to upstream; we usually want to catch up origin to upstream, but
# keep it at the current state if pushing to upstream failed.
git-remote-mutate upstream --message 'Push' \
    push "$@" upstream "$path" || exit $?
git-remote-mutate origin --message 'Push' \
    push "$@" origin "$path"
