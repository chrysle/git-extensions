#!/bin/bash

readonly scriptDir="$([ "${BASH_SOURCE[0]}" ] && dirname -- "${BASH_SOURCE[0]}" || exit 3)"
[ -d "$scriptDir" ] || { echo >&2 "ERROR: Cannot determine script directory!"; exit 3; }
readonly projectDir="${scriptDir}/.."

: ${HUB_LABELS_DEFAULT_LABEL_FILESPEC:=${projectDir}/etc/github-issue-labels.tsv}

printUsage()
{
    cat <<HELPTEXT
List the labels defined for the current GitHub repository.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--color=(always|auto|never)|--no-color] list [-?|-h|--help]'
    echo
    cat <<HELPTEXT
Add / update my default labels to the current GitHub repository.
The labels are stored as tab-separated values (RGB-COLOR NAME DESCRIPTION); by
default in file ${HUB_LABELS_DEFAULT_LABEL_FILESPEC}
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" 'set [DEFAULT-LABEL-FILESPEC]'
    echo
    cat <<HELPTEXT
Delete the passed labels on the current GitHub repository.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" 'delete LABEL-NAME [...]'
}

isColor=; type -t colorizeHex >/dev/null && [ -t 1 ] && isColor=t
action=usageError
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=never)
			isColor=; shift;;
	--color=always)	isColor=t; shift;;
	--color)	case "$2" in
			    always) isColor=t;;
			    never)  isColor=;;
			esac
			shift; shift
			;;
	list)		shift; action=listLabels; break;;
	set)		shift; action=setDefaultLabels; break;;
	delete)		shift; action=deleteLabels; break;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

usageError()
{
    printUsage "$0" >&2
    exit 2
}

listLabels()
{
    [ $# -eq 0 ] || usageError

    hub api 'repos/{owner}/{repo}/labels' | \
	jq -r '.[] | "#" + .color + "\t" + .name + "\t" + (.description // "(no description)")' | \
	eval "column -s \$'\\t' -t" "${isColor:+|colorizeHex}"
}

setDefaultLabels()
{
    [ $# -le 1 ] || usageError

    typeset -A existingLabels=() unprocessedLabels=()
    local line; while IFS=$'\n' read -r line
    do
	existingLabels["$line"]=t
	unprocessedLabels["$line"]=t
    done < <(
	hub api 'repos/{owner}/{repo}/labels' | \
	    jq -r '.[] | .name'
    )

    if [ $# -eq 0 ]; then
	local defaultLabelsFilespec="$HUB_LABELS_DEFAULT_LABEL_FILESPEC"
    else
	local defaultLabelsFilespec="$1"; shift
    fi
    if [ ! -r "$defaultLabelsFilespec" ]; then
	printf >&2 'ERROR: Default labels definition does not exist: %s\n' "$defaultLabelsFilespec"
	exit 1
    fi

    local color label description
    exec 3<&0
    while IFS=$'\t' read -r color label description
    do
	local labelJson="{\"name\":\"${label}\", \"color\":\"${color#\#}\", \"description\":\"${description}\"}"
	if [ "${existingLabels["$label"]}" ]; then
	    if hub api --method PATCH --input <(printf "%s\n" "$labelJson") "repos/{owner}/{repo}/labels/${label}" >/dev/null <&3; then
		unset unprocessedLabels["$label"]
		printf 'Updated label %s\n' "$label"
	    fi
	else
	    if hub api --method POST --input <(printf '%s\n' "$labelJson") 'repos/{owner}/{repo}/labels' >/dev/null <&3; then
		unset unprocessedLabels["$label"]
		printf 'Added label %s\n' "$label"
	    fi
	fi
    done < "$defaultLabelsFilespec"

    if [ ${#unprocessedLabels[@]} -gt 0 ]; then
	printf 'Additional label in GitHub: %s\n' "${!unprocessedLabels[@]}"
    fi
}

deleteLabels()
{
    [ $# -gt 0 ] || usageError

    local status=0
    for label
    do
	hub api --method DELETE "repos/{owner}/{repo}/labels/${label}" || status=$?
    done
    return $status
}

$action "$@"
