#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: git BRANCH-COMMAND | %q %s\n' "$(basename "$1")" '[--color=(always|auto|never)|--no-color] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Add additional information (shortlog of the last commit) about each branch from
the input.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT

HELPTEXT
}
case "$1" in
    --help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
esac


typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS)
typeset -a formatter=(column -s $'\t' -t)
if [ -t 1 ]; then
    isColorOffArgument "$@" || set -- '--color=always' "$@"
else
    pager=()
    formatter=()
fi

branchInfo()
{
    while IFS=$'\n' read -r line || [ -n "$line" ]
    do
	if [[ "$line" =~ ^(${GIT_BRINFO_PREFIX_PATTERN-\*? *})(\[[0-9:;]*[mK])?([^ ]+)(\[[0-9:;]*[mK])?(${GIT_BRINFO_SUFFIX_PATTERN-.*})$ ]] \
	    && prefix="${BASH_REMATCH[1]}" \
	    && colorOn="${BASH_REMATCH[2]}" \
	    && branch="${BASH_REMATCH[3]}" \
	    && colorOff="${BASH_REMATCH[4]}" \
	    && suffix="${BASH_REMATCH[5]}" \
	    && git-existsbr "$branch"
	then
	    info="$(git onelinelog --no-decorate --max-count 1 --pretty='tformat:%C(cyan)%h%Creset %Cgreen(%aN, %ar)%Creset	%s' "$@" "$branch")"
	else
	    [ -n "$branch" ] || branch="$line"
	    info='(Not a branch)'
	fi
	printf '%s%s%s%s\t%s%s\n' "$prefix" "$colorOn" "$branch" "$colorOff" "$info" "$suffix"
    done
}

eval 'branchInfo "$@"' "${formatter:+|}" '"${formatter[@]}"' "${pager:+|}" '"${pager[@]}"'
