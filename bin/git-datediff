#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-v|--verbose|--authored] [-f|--format FORMAT] [-u|--utc|--universal] [-d|--diff [--diff-options DIFF-OPTIONS]] <revision-range>|--since=<date> [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Show the time range of the commits done in the passed <revision-range>, or --since=<date>.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT

Uses commit times, with --authored authored times, with -v|--verbose both.
The date format can be influenced via -f|--format, and/or:
    -d|--diff		    prints the difference between start and end dates
    -u|--utc|--universal    prints Coordinated Universal Time (UTC) instead of
			    local time, and defaults the format to ISO 8601
			    format (with Z as the timezone)
HELPTEXT
}

typeset -a dateSigils=(c)
typeset -a dateArgs=()
typeset -A prefixes=()
isFormat=
format=
isDiff=
diffOptions=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--verbose|-v)	shift; dateSigils=(c a); prefixes=([c]='Committed ' [a]='Authored  ');;
	--authored)	shift; dateSigils=(a);;
	--utc|--universal|-u)
			shift; dateArgs+=(--utc); : ${format:=%FT%TZ};;
	--format|-f)	shift; isFormat=t; format="$1"; shift;;
	--diff|-d)	shift; isDiff=t;;
	--diff-options)	shift; diffOptions="$1"; shift;;
	--)		shift; break;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    echo 'ERROR: No <revision-range> passed.'
    echo
    printUsage "$0"
    exit 2
fi >&2
[ "$isDiff" ] || isFormat=t

dateFormat()
{
    date "${dateArgs[@]}" --date "${1:?}" ${format:++"$format"}
}


for dateSigil in "${dateSigils[@]}"
do
    IFS=' '
    read -r startDate endDate < <(git log --pretty="tformat:%${dateSigil}t" "$@" | sort --numeric --unique | sed -n -e '1h' -e '${H; x; s/\n/ /; p}')
    if [ -z "$startDate" -o -z "$endDate" ]; then
	echo >&2 'No revisions found'
	exit 1
    fi

    printf %s "${prefixes[$dateSigil]}"
    if [ $startDate -eq $endDate ]; then
	if [ "$isFormat" ]; then
	    printf '%s' "$(dateFormat "@$startDate")"
	elif [ "$isDiff" ]; then
	    printf 'at a single point in time'
	fi
    else
	if [ "$isFormat" ]; then
	    printf '%s until %s' "$(dateFormat "@$startDate")" "$(dateFormat "@$endDate")"
	fi
	if [ "$isDiff" ]; then
	    printf '%s%s%s' "${isFormat:+ (}" "$(datediff $diffOptions "@$startDate" "@$endDate")" "${isFormat:+)}"
	fi
    fi
    printf \\n
done | sed -e '1N' -e '2s/^Committed \([^\n]*\)\nAuthored  \1$/Committed and authored \1/'
