#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-q|--quiet] [-y|--yes] [-f|--force] [-r|--remote REMOTE|-a] [-n|--newer|-o|--older|-lt|-le|-eq|-ne|-ge|-gt AGE[SUFFIX]] [--] [<branch-glob> ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
List branches that have not been updated in a while (for ${GIT_STALEBR_AGE}).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --bare		Just print the branch names.
    --compare-to <branch>|<commit>|""
			Show ahead-behind information with regards to <branch>
			(default: the master branch) or <commit> (or omit that).
    -r			List remote-tracking branches.
    --remote REMOTE	List a particular REMOTE.
    -a			List both local and remote-tracking branches.
    -n|--newer|-o|--older|-lt|-le|-eq|-ne|-ge|-gt AGE[SUFFIX]
			Only print those branches that match the age comparison.
SUFFIX may be 's' for seconds (the default), 'm' for minutes, 'h' for hours, 'd'
for days, 'w' for weeks, 'mo' for months, 'y' for years, 'g' for generations.
HELPTEXT
}

isQuiet=
isYes=
typeset -a gitArchiveArgs=()
typeset -a gitStalebrArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--quiet|-q)	shift; isQuiet=t;;
	--yes|-y)	shift; isYes=t;;

	--force|-f)	gitArchiveArgs+=("$1"); shift;;

	-a|-r)		gitStalebrArgs+=("$1"); shift;;
	--remote)	gitStalebrArgs+=("$1" "$2"); shift; shift;;

	-n|--newer|-o|--older|-lt|-le|-eq|-ne|-ge|-gt)
			gitStalebrArgs+=("$1" "$2"); shift; shift;;

	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

readarray -t staleBranches < <(git-stalebr --bare "${gitStalebrArgs[@]}" "$@" | git-filter-out-persistent-branches)
[ ${#staleBranches[@]} -gt 0 ] || exit 99

IFS=$'\n'
if [ "$isYes" ]; then
    [ "$isQuiet" ] || echo >&2 "Archiving:
${staleBranches[*]}"
else
    userBinaryChoice --introduction "Archiving:
${staleBranches[*]}" --question 'Really archive these branches?' --yes-no || exit 4
fi

exec git-archivebr "${gitArchiveArgs[@]}" "${staleBranches[@]}"
