#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Reset HEAD, working copy and index [to <branch>] [<paths>...]. Ensures that the
current branch isn't dirty.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[<branch>] [--] [<paths> ...] [-?|-h|--help]'
}

isForce=
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --force|-f)		shift; isForce=t;;
esac
if [ ! "$isForce" ] && [ "$(git diff --shortstat 2>/dev/null | tail -n 1)" ]; then
    echo "Unstaged changes:"
    git status --porcelain | grep -v '^??'

    while :
    do
	</dev/tty read -r -N 1 -p "Discard these changes? (y/n/diff) " choice; echo >/dev/tty
	case "$choice" in
	    y) break;;
	    n) exit 1;;
	    d) git diff;;
	esac
    done
fi

lastArg=; [ $# -gt 0 ] && lastArg=${!#}
if [ -r "$lastArg" ]; then
    # git reset --hard ... <paths>... is not allowed ("fatal: Cannot do hard reset with paths.")
    # The right command is git checkout HEAD <paths>...
    # DWIM here: Allow both git wipe FILE1 ... and git wipe <commit> FILE1 ...
    # by checking whether the arguments exist as files.
    typeset -a gitArgs=()
    commitArg=HEAD
    for arg
    do
	# Skip command-line arguments.
	case "$arg" in
	    --) break;;
	    -*)	gitArgs+=("$arg"); shift; continue;;
	esac
	if [ ! -r "$arg" ]; then
	    [ "$arg" = '--' ] || commitArg="$arg"
	    shift
	fi
	break
    done

    if [ $# -gt 0 ]; then   # Duplicate check; should always be true.
	exec git checkout "${gitArgs[@]}" "$commitArg" -- "$@"
    fi
fi

exec git reset --hard "$@"
