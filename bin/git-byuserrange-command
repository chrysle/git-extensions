#!/bin/bash
set -o noglob -o pipefail

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-r|--revision REVISION] [--author=<pattern>|--committer=<pattern> ...] [--no-range|--with-range ...|--last-only] [+1|--one-more] [--with-log-args|--with-log-args-except-last] [--] [GIT-COMMAND ...] [-?|-h|--help]'
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" 'GIT-COMMAND [-r|--revision REVISION] [...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Print / execute GIT-COMMAND with a revision range starting from the passed
REVISION / the first found revision from the passed author / committer(s) and
including all commits done by the passed author / committer(s) (or the author (+
committer if different) from the start revision).
    --no-range	    Only use the earliest consecutive commit from the passed
		    author.
    --with-range ...
		    Use ... instead of .. as the range specifier.
    --last-only	    Only use the latest commit from the passed author.
    --one-more|+1   Include the commit preceding the author's commit.
    --with-log-args All GIT-COMMAND arguments should also be used when
		    determining the revision range.
    --with-log-args-except-last
		    All GIT-COMMAND arguments expect the very last should also
		    be used when determining the revision range.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT

HELPTEXT
}
typeset -a gitCommand=()
isFirstArg=t
revision=
range=..
isLastOnly=
isShowOneMore=
typeset userFilterArgs=()
withLogArgs=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)		    shift; printLongUsage "$0"; exit 0;;
	--revision|-r)		    shift; revision="$1"; shift;;
	--author|--committer)	    userFilterArgs+=("$1" "$2"); shift; shift;;
	--author=*|--committer=*)   userFilterArgs+=("$1"); shift;;
	--no-range)		    shift; range=;;
	--with-range)		    shift; range="$1"; shift;;
	--last-only)		    shift; isLastOnly=t; range=;;
	--one-more|+1)		    shift; isShowOneMore=t;;
	--with-log-args)	    shift; withLogArgs=all;;
	--with-log-args-except-last)
				    shift; withLogArgs=except-last;;
	--)			    shift; break;;
	*)  if [ "$isFirstArg" ]; then
		case "$1" in
		    -c) gitCommand+=("$1" "$2"); shift; shift;;
		    *)  eval "gitCommand+=($1)"	# Note: The Git command itself can consist of command + arguments, so it must not be quoted here!
			shift; isFirstArg=;;
		esac
	    else
		isFirstArg=
		break
	    fi
	    ;;
    esac
done

if [ ${#userFilterArgs[@]} -eq 0 ]; then
    author="$(git show --no-patch --pretty=format:'%aN <%aE>' "${revision:-HEAD}")" || exit $?
    committer="$(git show --no-patch --pretty=format:'%cN <%cE>' "${revision:-HEAD}")" || exit $?
    userFilterArgs+=(--author "$author")
    [ "$author" = "$committer" ] || userFilterArgs+=(--committer "$committer")
fi
typeset sharedLogArgs=()
case "$withLogArgs" in
    all)	    sharedLogArgs+=("$@");;
    except-last)    sharedLogArgs+=("${@:1:$(($#-1))}");;
esac
if [ -z "$revision" ]; then
    revision="$(git log --max-count 1 --pretty=tformat:%H "${userFilterArgs[@]}" "${sharedLogArgs[@]}")"
    if [ -z "$revision" ]; then
	echo >&2 'Could not find a commit from those user(s).'
	exit 1
    fi
fi

startRevision=
< <(diff --unchanged-line-format= --old-line-format='%dn %L' --new-line-format= -- <(git log --first-parent --pretty=tformat:%H "$revision" "${sharedLogArgs[@]}") <(git log --first-parent --pretty=tformat:%H "${userFilterArgs[@]}" "$revision" "${sharedLogArgs[@]}")) IFS=' ' read -r firstDifferentCount firstDifferentRevision	# Fortunately, "git log <revision> --follow -- <path>" also works; else, we would have to split sharedLogArgs into options and path arguments.
if [ -n "$firstDifferentRevision" ]; then
    if [ $firstDifferentCount -eq 1 ]; then
	[ "$author" ] || author="$(git show --no-patch --pretty=format:'%aN <%aE>' "$revision" "${sharedLogArgs[@]}" 2>/dev/null)"
	printf >&2 'The %s revision already is from another user (%s).\n' "$revision" "$author"
	exit 1
    else
	startRevision="${firstDifferentRevision}${isShowOneMore:+^}"
    fi
fi

revisionSuffix=; [ "$isShowOneMore" ] && [ -z "$startRevision" -o -z "$range" ] && revisionSuffix='^'
if [ "$isLastOnly" ]; then
    revisionRange="${range:+${startRevision}${startRevision:+$range}}${revision}${revisionSuffix}"
else
    revisionRange="${startRevision}${startRevision:+$range}${range:+${revision}${revisionSuffix}}"
fi


if [ ${#gitCommand[@]} -eq 0 -a $# -eq 0 ]; then
    printf '%s\n' "$revisionRange"
    exit 0
fi

[ ${#gitCommand[@]} -eq 0 ] && case "$1" in
    [^-]*-command)  gitCommand+=("$1"); shift
		    while [ $# -ne 0 ]
		    do
			case "$1" in
			    --)		break;;
			    -*)		gitCommand+=("$1"); shift;;
			    *)		gitCommand+=("$1"); shift; break;;
			esac
		    done
		    ;;
    *)		    while [ $# -ne 0 ]
		    do
			case "$1" in
			    -c) gitCommand+=("$1" "$2"); shift; shift;;
			    *)	gitCommand+=("$1"); shift; break;;
			esac
		    done
esac

exec git-wrapper "${gitCommand[@]}" "$revisionRange" "$@"
