#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Show commit logs in a GUI, with a fallback to the terminal, or suppressing all
output if there's neither GUI nor connected terminal.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--color=(always|auto|never)|--no-color] [<revision range>] [-?|-h|--help]'
}
typeset -a colorArg=()
typeset -a gitLogArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			colorArg=("$1"); shift;;
	--color)	colorArg=("$1" "$2"); shift; shift;;
	--)		gitLogArgs+=("$1"); shift; break;;
	*)		gitLogArgs+=("$1"); shift;;
    esac
done
set -- "${gitLogArgs[@]}" "$@"

# Both gitk and rabbitvcs just show an empty log window with no data if an empty
# range is passed... that's not helpful. Instead, detect reverts of commits
# (A..B empty, B..A has commits) and mention those in a separate message popup.
if [ -z "$(git log --max-count 1 --pretty=tformat:%H "$@")" ]; then
    if [[ "$*" =~ ^(.*[^.])\.\.([^.].*)$ ]]; then
	originalRange="$*"
	set -- "${BASH_REMATCH[2]}..${BASH_REMATCH[1]}"

	typeset -a allElements=()
	while IFS=$'\t\n' read -r -a elements
	do
	    allElements+=("${elements[@]}")
	done < <(git log --pretty=$'tformat:%h\t%aN\t%ar\t%s' "$@")

	if [ ${#allElements[@]} -eq 0 ]; then
	    exit 99
	elif [ -n "$DISPLAY" ] && type -t zenity >/dev/null; then
	    zenity --list --title "$(git wcname): $originalRange" --text 'These commit(s) have been reverted:' --width 1600 --height 800 --column 'Commit' --column 'Author' --column 'Date' --column 'Title' "${allElements[@]}" >/dev/null 2>&1 &
	    exit $?
	else
	    printf '%s: %s; These commit(s) have been reverted:\n' "$(git wcname)" "$originalRange"
	    printf '%s\n' "${allElements[@]}"
	    exit
	fi
    else
	exit 99
    fi
fi

if [ -n "$DISPLAY" ] && type -t gitk >/dev/null; then
    gitk "$@" >/dev/null 2>&1 &	# gitk is a blocking GUI.
elif [ -n "$DISPLAY" ] && type -t rabbitvcs >/dev/null; then
    RABBITVCS_REVISION_RANGE="$1" exec rabbitvcs log >/dev/null 2>&1	# rabbitvcs forks and immediately returns.
elif [ -t 1 ]; then
    git-onelinelog "${colorArg[@]}" "$@"
else
    exit 5
fi
