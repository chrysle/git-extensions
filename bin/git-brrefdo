#!/bin/bash
set -o pipefail
shopt -qs extglob

: ${GIT_BRREFDO_BRANCH_COMMAND:=git-abr}
: ${GIT_BRREFDO_COMMANDNAME:=$(basename -- "$0")}
: ${GIT_BRREFDO_WHAT:=branches}

hasProgressNotification=; type -t progressNotification >/dev/null && hasProgressNotification=t
hasProgressNotificationToAddendum=; type -t progressNotificationToAddendum >/dev/null && hasProgressNotificationToAddendum=t

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$GIT_BRREFDO_COMMANDNAME" "[-q|--quiet] [--no-pager] [--no-header] ${hasProgressNotification:+ [--progress overlay|title|command|notify${hasProgressNotificationToAddendum:+|addendum}]} [--separate-errors] [--no-git-color] [--single-success] [--abort-on-failure|-X|--abort-on EXIT_STATUS] [-y|--yes]${GIT_BRREFDO_ADDITIONAL_ARGS:+ }${GIT_BRREFDO_ADDITIONAL_ARGS} [--branches \"<branch1> ...\"] [-B N|--max-branch N] [--predicate-command \"COMMANDLINE\" [...]] -c|--command \"COMMANDLINE\" [-c ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$GIT_BRREFDO_COMMANDNAME"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Iterate over all / the last N ${GIT_BRREFDO_WHAT}${GIT_BRREFDO_WHAT_DETAILS:+ }${GIT_BRREFDO_WHAT_DETAILS} one by one
and execute "git SIMPLECOMMAND" and/or COMMANDLINE for each branch, replacing {}
with its name.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
COMMAND execution puts a header line (unless --no-header) that contains the
current Git branch before the command output.
    --no-pager		Do not page the output (so contents will scroll out of
			view if there's too much output).
    --no-header		Do not output the header line before command output (and
			no separating empty line after it).${hasProgressNotification:+
    --progress overlay|title|command|notify${hasProgressNotificationToAddendum:+|addendum}
			Report the current WORKING-COPY name (and count +
			percentage) in one of the following ways:
			overlay:    in the form of overlaid text, written via
				    ANSI escape sequences in the first line of
				    the terminal
			title:	    in the terminal's window title via ANSI
				    escape sequences
			command:    by invoking
					PROGRESSNOTIFICATION_COMMANDLINE${PROGRESSNOTIFICATION_REPORT_MARKER:+
				    while replacing $PROGRESSNOTIFICATION_REPORT_MARKER with the report}
			notify:	    via notify-send to the system's notification
				    system}${hasProgressNotificationToAddendum:+
			addendum:   via the addendum of the terminal"'"s window
				    title}
    --separate-errors	Do not combine command output and command errors into
			one (paged) stream. Commands that just cause error
			output won't have a header then. Error output will
			remain on its separate file descriptor and will not be
			paged. Useful if you want to suppress errors or handle
			them separately.
    --no-git-color	Do not pass a --color=... to "git SIMPLECOMMAND". (For
			COMMANDLINE you have to insert "\${gitColorArg[@]}"
			yourself.)
    --abort-on-failure	Abort iteration when COMMAND fails.
    --abort-on|-X EXIT_STATUS
			Abort iteration when COMMAND exits with EXIT_STATUS.
    --single-success	Exit status is 0 if at least command in one of the
			${GIT_BRREFDO_WHAT} succeeded.
    --max-branch|-B N	Only consider the last N ${GIT_BRREFDO_WHAT}${GIT_BRREFDO_WHAT_DETAILS:+ }${GIT_BRREFDO_WHAT_DETAILS}.
    --predicate-command CMD
			Skip ${GIT_BRREFDO_WHAT} where CMD fails. The string {}
			is replaced with the current branch name.
    --command|-c CMD	Execute the passed command line. When this is a simple
			Git command, it can also be passed as such:
			    $(basename "$1") [...] [--] SIMPLECOMMAND
			The string {} is replaced with the current branch name.
Note: For paging and headers, this command has to control Git's color output.
Pass --no-git-color if "git SIMPLECOMMAND" does not support the --color=...
arguments. (For COMMANDLINE you have to insert "\${gitColorArg[@]}" yourself.)
You can still pass --color=always if you pipe this command's output yet still
want coloring of headers.

EXIT STATUS
Returns the last non-successful exit status. With --single-success,
non-successful executions are ignored unless all of them fail. In other words,
exit status is 0 if at least one command succeeded.
HELPTEXT
}

typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()
abortStatus=
abortComparison=-eq
isSingleSuccess=
isQuiet=
isHeader=; type -t withHeader >/dev/null && isHeader=t
progressSink=
errorRedir='2>&1'
isGitColor=t
typeset -a colorArg=()
isNeedEval=
typeset -a predicateCommands=()
typeset -a commands=()
isYes=
branchNum=
typeset -a inputBranches=()
typeset -a gitBrArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	    shift; printLongUsage "$0"; exit 0;;
	--abort-on-failure) shift; abortComparison=-ne; abortStatus=0;;
	--abort-on|-X)	    shift; abortStatus="$1"; shift;;
	--single-success)   shift; isSingleSuccess=t;;
	--quiet|-q)	    shift; isQuiet=t;;
	--no-pager)	    shift; pager=();;
	--no-header)	    shift; isHeader=;;
	--progress)	    shift; progressSink="$1"; shift;;
	--separate-errors)  shift; errorRedir='';;
	--no-git-color)	    shift; isGitColor=;;
	--no-color|--color=*)	colorArg=("$1"); shift;;
	--color)		colorArg=("$1" "$2"); shift; shift;;
	--yes|-y)	    shift; isYes=t;;
	-+([${GIT_BRREFDO_SHORT_OPTIONS:-[]}]))
			    gitBrArgs+=("$1"); shift;;
	--@(${GIT_BRREFDO_LONG_OPTIONS:-[]}))
			    gitBrArgs+=("$1"); shift;;
	-[${GIT_BRREFDO_SHORT_PARAMS:-[]}])
			    gitBrArgs+=("$1" "$2"); shift; shift;;
	--@(${GIT_BRREFDO_LONG_PARAMS:-[]}))
			    gitBrArgs+=("$1" "$2"); shift; shift;;
	--branches)	    shift; inputBranches=($1); shift;;	# Internal hook to pass in the branches.
	--max-branch|-B)    shift; branchNum="$1"; shift;;
	--predicate-command)
			    shift; predicateCommands+=(${predicateCommands:+&&} "$1"); shift;;
	--command|-c)	    shift; commands+=(${commands:+;} "$1"); isNeedEval=t; shift;;
	--)		    shift; break;;
	-*)		    { echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		    break;;
    esac
done
# With piping into withHeader / pager, we need to explicitly enable color for
# Git, unless this command's output itself is redirected. Also don't do this if
# the user explicitly turned off color.
gitColorArg=()
if [ -n "$pager" -o -n "$isHeader" ] && isNeedColorArgumentWhenPiping "${colorArg[@]}"; then
    colorArg=(--color=always)	# Force for withHeader
    [ "$isGitColor" ] && gitColorArg=(--color=always)	# Force for Git
fi

typeset -a gitCommand=(git-wrapper)
if [ $# -gt 0 ]; then
    if [ ${#gitColorArg[@]} -gt 0 ]; then
	# Simply appending gitColorArg doesn't work; many Git commands have a
	# special <path> or <commit> part at the end. Place it just behind the
	# Git subcommand by iterating arguments in the same way as the various
	# git-*-command metaprograms, and moving anything that is in front from
	# $@ to gitCommand.
	case "$1" in
	    [^-]*-command)  gitCommand+=("$1"); shift
			    while [ $# -ne 0 ]
			    do
				case "$1" in
				    --)		break;;
				    -*)		gitCommand+=("$1"); shift;;
				    *)		gitCommand+=("$1"); shift; break;;
				esac
			    done
			    ;;
	    *)		    while [ $# -ne 0 ]
			    do
				case "$1" in
				    -c) gitCommand+=("$1" "$2"); shift; shift;;
				    *)	gitCommand+=("$1"); shift; break;;
				esac
			    done
	esac
	gitCommand+=("${gitColorArg[@]}")
    fi

    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	printf -v quotedSimpleCommand '%q ' "$@"
	commands+=(${commands:+;} "${quotedSimpleCommand//\\\{\\\}/\{\}}")	# %q escapes {}, we don't want that to have it interpolated later.
    else
	commands=("${gitCommand[@]}" "$@")
    fi
fi
if [ ${#commands[@]} -eq 0 ]; then
    echo >&2 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
    exit 2
fi

readarray -t branches < <(eval '$GIT_BRREFDO_BRANCH_COMMAND "${gitBrArgs[@]}" ${inputBranches:+--} "${inputBranches[@]}"' ${branchNum:+ | tail -n "$branchNum"})
if [ ${#branches[@]} -eq 0 ]; then
    echo >&2 "No ${GIT_BRREFDO_WHAT} found!"
    exit 1
fi

IFS=$'\n'
if [ "$isYes" ]; then
    [ "$isQuiet" ] || echo >&2 "Iterating over these ${GIT_BRREFDO_WHAT}:
${branches[*]}"
else
    echo >/dev/tty "Iterating over these ${GIT_BRREFDO_WHAT}:
${branches[*]}"
    </dev/tty read -r -N 1 -p "Really iterate over these branches? (y/n) " choice; echo >/dev/tty
    [ "$choice" = "y" ] || exit 1
fi

if [ "$hasProgressNotification" ] && [ -n "$progressSink" ]; then
    if [ "$progressSink" = addendum ]; then
	[ "$hasProgressNotificationToAddendum" ] && \
	    exec 3> >(progressNotificationToAddendum --prepend-count "$GIT_BRREFDO_WHAT" --count-to "${#branches[@]}" 2>/dev/null)  # Silence "Cannot notify via titleupdate; TERMID not defined."
    else
	exec 3> >(progressNotification --to "$progressSink" --prepend-count "$GIT_BRREFDO_WHAT" --count-to "${#branches[@]}" 2>/dev/null)
    fi

    reportProgress()
    {
	trap 'reportProgress() { :; }; trap PIPE' PIPE
	printf '%s\n' "$*" >&3 2>/dev/null  # Silence "printf: write error: Broken pipe"
    }
else
    reportProgress() { :; }
fi

abortIfDesired()
{
    local status="${1:?}"; shift
    [ -n "$abortStatus" ] || return
    [ "$status" $abortComparison $abortStatus ] && exit $status
}

brrefdo()
{
    : ${GIT_BRREFDO_HEADER_ID:="brrefdo-$$-$RANDOM"}
    local status=0
    for branch in "${branches[@]}"
    do
	if [ ${#predicateCommands[@]} -gt 0 ]; then
	    eval "${predicateCommands[@]//\{\}/$branch}" || continue
	fi

	typeset -a interpolatedCommands=("${commands[@]//\{\}/$branch}")
	if [ "$isNeedEval" ]; then
	    typeset -a c=("${interpolatedCommands[@]}")
	else
	    typeset -a c=('"${interpolatedCommands[@]}"')
	fi
	reportProgress "$branch"
	if (eval "${c[@]}" "${isHeader:+$errorRedir | withHeader "${colorArg[@]}" --id '$GIT_BRREFDO_HEADER_ID' -- '$branch'}"); then
	    isSuccess=t
	else
	    status=$?
	    abortIfDesired $status
	fi
    done
    if [ "$isSingleSuccess" ]; then
	[ "$isSuccess" ]
    else
	return $status
    fi
}
eval "brrefdo ${pager:+$errorRedir |}" '"${pager[@]}"'
