#!/bin/bash
set -o pipefail

printUsage()
{
    cat <<HELPTEXT
Show statistics of GitHub issues and pull requests.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[<issue-args> ...] [-?|-h|--help]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac


exec hub-cr --format '%au %as%n' "$@" | awk \
    -F ',? +' \
    -v "me=$(git me-in-github)" \
'
function join(array, start, end, sep,    result, i)
{
    if (sep == "")
	sep = " "
    else if (sep == SUBSEP) # magic value
	sep = ""
    result = array[start]
    for (i = start + 1; i <= end; i++)
	result = result sep array[i]
    return result
}
function nameOrOtherCount(assignees, offset, prefix,      num, result, key, joiner) {
    num = length(assignees) + offset
    if (num <= 0) {
	return ""
    } else if (num <= 2) {
	result = prefix
	for (key in assignees) {
	    if (key == me) continue
	    result = result joiner key
	    joiner = ", "
	}
	return result
    } else {
	return prefix num " other" (num == 1 ? "" : "s")
    }
}
function allOrCount(count, total, suffix) {
    return (count == total ? (total <= 1 ? "" : "all ") : count " ") suffix
}
function stats(what, count, mineCount, assignedCount, assignedToUsCount, assignedToMeCount, otherAssignees, coAssignees,        aCnt, additionals) {
    if (mineCount) additionals[aCnt++] = allOrCount(mineCount, count, "from me")
    if (assignedCount) {
	additionals[aCnt++] = allOrCount(assignedCount, count, "assigned") nameOrOtherCount(otherAssignees, 0, " to ")
	if (assignedToUsCount) additionals[aCnt++] = allOrCount(assignedToUsCount, assignedCount, "to me") nameOrOtherCount(coAssignees, -1, " and ")
	if (assignedToMeCount) additionals[aCnt++] = allOrCount(assignedToMeCount, assignedCount, "to me")
    }

    return sprintf("%s %s%s%s", \
	(count ? count : "no"), what, (count == 1 ? "" : "s"), \
	(aCnt ? " (" join(additionals, 0, --aCnt, ", ") ")" : "") \
    )
}
function isAssignedAlsoToMe(otherAssignees, coAssignees,     i) {
    for (i = 3; i <= NF; i++) {
	if ($i == me && NF > 3) {
	    recordAssignees(coAssignees)
	    return 1
	}
    }
    recordAssignees(otherAssignees)
    return 0
}
function isAssignedOnlyToMe(    i) {
    return (NF == 3 && $3 == me)
}
function recordAssignees(assignees) {
    for (i = 3; i <= NF; i++) {
	assignees[$i] = 1
    }
}

$1 == "pull" {
    pullCnt += 1
    if ($2 == me) pullMineCnt+=1
    if ($3) {
	pullAssignCnt += 1
	pullToUsCnt += isAssignedAlsoToMe(pullOtherAssignees, pullCoAssignees)
	pullToMeCnt += isAssignedOnlyToMe()
    }
}
$1 == "issue" {
    issueCnt += 1
    if ($2 == me) issueMineCnt+=1
    if ($3) {
	issueAssignCnt += 1
	issueToUsCnt += isAssignedAlsoToMe(issueOtherAssignees, issueCoAssignees)
	issueToMeCnt += isAssignedOnlyToMe()
    }
}
END {
    if (issueCnt) stat[typeCnt++] = stats("issue", issueCnt, issueMineCnt, issueAssignCnt, issueToUsCnt, issueToMeCnt, issueOtherAssignees, issueCoAssignees)
    if (pullCnt)  stat[typeCnt++] = stats("pull request", pullCnt, pullMineCnt, pullAssignCnt, pullToUsCnt, pullToMeCnt, pullOtherAssignees, pullCoAssignees)

    if (typeCnt) {
	for (t = 0; t < typeCnt; t++) {
	    print(stat[t])
	}
    }
}
'
