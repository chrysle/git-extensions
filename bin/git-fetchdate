#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Show when REMOTE(s) were last fetched.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-m|--message MESSAGE] [--absolute|-a|--epoch| -n|--newer|-o|--older|-lt|-le|-eq|-ne|-ge|-gt AGE[SUFFIX]] [REMOTE [...]] [-?|-h|--help]'
}

database()
{
    gitDir="$(git rev-parse --git-dir 2>/dev/null)" || exit 3
    executionMarker --basedir "$gitDir" --group fetches "$@"
}

message=
isAbsolute=
isEpoch=
typeset -a fileAgeArgs=()
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --message|-m)	shift; message="$1"; shift;;
    --epoch)		shift; isEpoch=t;;
    --absolute|-a)	shift; isAbsolute=t;;
    --set)		shift
			if [ $# -eq 0 ]; then
			    echo >&2 'ERROR: No REMOTE(s) passed.'
			    exit 2
			fi
			for remote
			do
			    database --update "$remote"
			done
			exit $?
			;;
    -*)			if [ $# -eq 3 ]; then
			    fileAgeArgs=("$1" "$2")
			    shift; shift
			fi
			;;
esac
if [ $# -eq 0 ]; then
    readarray -t remotes < <(git remote)
    if [ ${#remotes[@]} -eq 0 ]; then
	echo >&2 'ERROR: No remotes.'
	exit 1
    fi

    set -- "${remotes[@]}"
fi

printMessage()
{
    [ -z "$message" ] || printf '%s ' "$message"
}

processRemote()
{
    local remote="${1:?}"; shift

    if [ ${#fileAgeArgs[@]} -gt 0 ]; then
	epoch="$(database --time "$remote")" || exit $?
	parseAge "${fileAgeArgs[@]}" "@$epoch" || exit $?
    elif [ ! "$isAbsolute" ]  && [ ! "$isEpoch" ]; then
	printMessage
	database --query "$remote" --get-diff '%R'
    else
	epoch="$(database --time "$remote")" || exit $?
	printMessage
	if [ "$isEpoch" ]; then
	    printf '%s\n' "$epoch"
	else
	    date --date "@$epoch"
	fi
    fi
}

for remote
do
    processRemote "$remote"
done
