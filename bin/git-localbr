#!/bin/bash

shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
List all local / passed branches (except for the current branch and master (and
base branch if defined)).
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--include-current] [--include-master] [--include-base] [--include-all] [--] [<branch1> ...]'
}
getBranches()
{
    if [ $# -gt 0 ]; then
	printf '%s\n' "$@"
    else
	git for-each-ref --sort=committerdate --format='%(refname:short)' refs/heads/
    fi
}

isIncludeCurrent=
isIncludeMaster=
isIncludeBase=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	    shift; printUsage "$0"; exit 0;;
	--include-current)  shift; isIncludeCurrent=t;;
	--include-master)   shift; isIncludeMaster=t;;
	--include-base)	    shift; isIncludeBase=t;;
	--include-all)	    shift; isIncludeCurrent=t; isIncludeMaster=t; isIncludeBase=t;;
	--)		    shift; break;;
	-*)		    { echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		    break;;
    esac
done

currentBranch=$(git symbolic-ref HEAD) || exit $?
currentBranch=${currentBranch##refs/heads/}

masterBranch="$(git-mbr)"
typeset -A excludedBranches=(["$currentBranch"]=1 ["$masterBranch"]=1)
baseBranch="$(git-nbr 2>/dev/null)"
[ "$baseBranch" ] && excludedBranches+=(["$baseBranch"]=1)

[ "$isIncludeCurrent" ] && unset excludedBranches["$currentBranch"]
[ "$isIncludeMaster" ] && unset excludedBranches["$masterBranch"]
[ "$isIncludeBase" ] && [ "$baseBranch" ] && unset excludedBranches["$baseBranch"]
typeset -a grepArgs=()
for excludedBranch in "${!excludedBranches[@]}"
do
    grepArgs+=(-e "$excludedBranch")
done

eval 'getBranches "$@"' "${grepArgs:+ | grep -v -F --line-regexp}" '"${grepArgs[@]}"'
