#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--qualified-with-userrepo] [<commit> [...]] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Obtain corresponding GitHub pull request(s) that have HEAD / <commit>(s) as the
branch's HEAD, and print its title(s); on separate lines, with a summary header
listing the PR numbers followed by an empty line) then.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --qualified-with-userrepo
			Put the USER/REPO in front of the pull request number.
HELPTEXT
}
isQualified=
prIdentifierFormat='%i'
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --qualified-with-userrepo)
			shift; isQualified=t; prIdentifierFormat='%U';;
esac

contains()
{
    local elem needle=$1; shift
    for elem
    do
	[ "$needle" = "$elem" ] && return 0
    done
    return 1
}


[ $# -gt 0 ] || set -- 'HEAD'
typeset -a commitIds=()
for c
do
    commitId="$(git rev-parse "$c" 2>/dev/null)" && commitIds+=("$commitId")
done
[ ${#commitIds[@]} -eq 0 ] && exit 1


typeset -a titles=()
typeset -a identifiers=()
while IFS=$'\t' read -r prCommitId prIdentifier prTitle
do
    if contains "$prCommitId" "${commitIds[@]}"; then
	titles+=("$prTitle")
	if [ "$isQualified" ]; then
	    identifiers+=("$(hub-userrepo "$prIdentifier")")
	else
	    identifiers+=("$prIdentifier")
	fi
    fi
done < <(hub pr list -f "%sH	$prIdentifierFormat	%t%n")


IFS=$'\n'
case "${#titles[@]}" in
    0)	exit 1;;
    1)	printf '%s\n' "${titles[0]}";;
    *)	printf -v summary '%s, ' "${identifiers[@]}"
	printf 'Merge pull requests %s\n\n' "${summary%, }"
	printf '%s\n' "${titles[@]}"
	;;
esac
