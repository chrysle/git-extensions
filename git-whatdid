#!/bin/bash
set -o pipefail

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-m|--match PATTERN|-t|--tags|-s|--scope] [<log-options>] [<revision range>] [[--] <path>...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 'Try %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Summarizes commit title prefixes (like "Refactoring:") that appear at the
beginning, according to frequency in the passed commit range.
    --match|-m PATTERN	Match (extended AWK regexp) PATTERN.
    --tags|-t		Only match official tags ("Foo:" or "FOO:").
    --scope|-s		Only match scope prefixes (that characterize a file or
			module).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT

HELPTEXT
}
pattern='^[^:]+:$'
typeset -a gitLogArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--match|-m)	shift; pattern="$1"; shift;;
	--tags|-t)	shift; pattern='^[[:upper:]][[:alnum:]]+:$';;
	--scope|-s)	shift; pattern='^[^:[:upper:]][^:]+:$';;
	--)		gitLogArgs+=("$1"); shift; break;;
	*)		gitLogArgs+=("$1"); shift;;
    esac
done
set -- "${gitLogArgs[@]}" "$@"

git log --pretty=tformat:%s "$@" | awk -v pattern="$pattern" '
{
    for (i = 1; i <= NF && $i ~ pattern; i++) {
	tag[$i] += 1
	tagCount += 1
    }
}

function tagCompare(i1, v1, i2, v2)
{
    return (v1 == v2 ? (i1 == i2 ? 0 : i1 < i2 ? -1 : 1) : v1 < v2 ? 1 : -1)
}
END {
    for (t in tag) {
	len = length(t)
	tagLength = (len > tagLength ? len : tagLength)
    }

    PROCINFO["sorted_in"] = "tagCompare"
    for (t in tag) {
	percentage = (100 * tag[t] / tagCount)
	percentageReport = (percentage < 1 ? "" : sprintf("%5s", sprintf(" (%.f%%)", percentage)))
	printf "%-" tagLength "s %3d%s\n", t, tag[t], percentageReport
    }
}
'
