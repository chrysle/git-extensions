#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Look up person by name or email address, based on all previous committers to the
repository. With --accept-unknown, will also accept new names in the form
NAME EMAIL@HOST (two arguments) or "NAME <EMAIL@HOST>" (one argument) that are
not yet found in the repository.
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-1|--first|-s|--select] [-n|--name|-e|--email] [--accept-unknown] AUTHOR-PATTERN [...]|NAME EMAIL@HOST|"NAME <EMAIL@HOST>" [-?|-h|--help]'
}
isAcceptUnknown=
isShowFirstCandidate=
isSelect=
typeset -a personFilter=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--accept-unknown)   shift; isAcceptUnknown=t;;
	--first|-1)	shift; isShowFirstCandidate=t;;
	--select|-s)    shift; isSelect=t;;
	--name|-n)	shift; personFilter=(sed -e 's# \+<[^ ]\+@[^ ]\+>$##');;
	--email|-e)	shift; personFilter=(sed -e 's#^.* \+<\([^ ]\+@[^ ]\+\)>$#\1#');;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done


printPersons()
{
    eval 'printf %s\\n "$@"' "${personFilter:+|}" '"${personFilter[@]}"' "${personFilter:+|sort --unique}"
}

selectCandidates()
{
    if [ $# -eq 0 ]; then
	echo >&2 'ERROR: No candidates found.'
	exit 1
    elif [ $# -eq 1 ]; then
	printPersons "$1"
    else
	select person
	do
	    if [ "$person" ]; then
		printPersons "$person"
		exit 0
	    elif [ ! "$REPLY" ]; then
		exit 1
	    elif [ "$REPLY" = '?' ]; then
		cat >&2 <<-'EOF'
		    Enter a number to select the person.
		    Filter the list by entering "grep" arguments. (Double backslashes.)
		    Abort via Ctrl-D.
EOF
	    else
		typeset -a filteredCandidates=($(unset IFS; printf '%s\n' "$@" | grep $REPLY))
		selectCandidates "${filteredCandidates[@]}"
		break
	    fi
	done
    fi
}

IFS=$'\n'
typeset -a candidates=($(git log -i ${isShowFirstCandidate:+-1} --pretty='tformat:%aN <%aE>' "${@/#/--author=}" | sort --unique))

if [ ${#candidates[@]} -eq 0 ]; then
    if [ "$isAcceptUnknown" -a \( $# -eq 1 -o $# -eq 2 \) ]; then
	case $# in
	    1)	person="$1";;
	    2)	person="$1 <$2>";;
	esac
	if [[ "$person" =~ ^[^\ ].*[^\ ]\ \<[^\ ]+@[^\ ]+\>$ ]]; then
	    printPersons "$person"
	    exit
	else
	    printf >&2 "ERROR: Did not pass a valid NAME <EMAIL@HOST>: %s\n" "$person"
	    exit 2
	fi
    fi

    exit 1
fi

if [ "$isShowFirstCandidate" ]; then
    printPersons "${candidates[0]}"
elif [ "$isSelect" ]; then
    selectCandidates "${candidates[@]}"
else
    printPersons "${candidates[@]}"
fi
