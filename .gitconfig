	; Minimal supported Git version is 1.7; some stuff won't work with Git 1.6!

[include]
	path = bin/git-extensions/gitconfig
	path = gitconfig-github
[clean]
	requireForce = false
[color]
	branch = auto
	diff = auto
	grep = auto
	interactive = auto
	status = auto
	ui = auto ; Requires git 1.6.
[color "branch"]
	current = normal reverse
	local = normal
	remote = normal dim
	plain = normal ul
[color "decorate"]
	branch = red reverse
	remoteBranch = red dim
	tag = red bold
	tags = red bold
	stash = red
	HEAD = red reverse
[color "diff"]
	plain = normal
	meta = cyan
	frag = blue bold
	old = red
	new = green
	commit = cyan
	; whitespace =
[color "grep"]
	external = --color=always
[color "interactive"]
	prompt = normal reverse
	header = normal bold
	help = normal
	; error =
[color "status"]
	header = green
	updated = normal
	changed = normal ul
	untracked = normal bold
[core]
	; No need to duplicate the setting here, as Git automatically falls back to
	; $EDITOR. (And I had Git 1.7.5 use an outdated /usr/bin/vim over
	; /usr/local/bin/vim.)
	;editor = vim

	; Defaults: Highlight trailing whitespace, <Space> before <Tab>, blank lines
	; at the end of the file.
	;whitespace=space-before-tab,trailing-space

	; Global user-specific ignored file list.
	excludesfile = ~/.gitignore

	; Convert newlines to the system's standard when checking out files, and
	; to LF newlines when committing.
	;autocrlf = true

	; When you cannot connect to git:// URLs from inside a company, use
	; socat to proxy Git through an HTTP CONNECT firewall.
	;   $ git fetch upstream
	;   github.com[0: 207.97.227.239]: errno=Connection timed out
	;   fatal: unable to connect a socket (Connection timed out)
	; Cp. ~/bin/gitproxy
	; Instead of enabling this here globally, try
	;   env GIT_PROXY_COMMAND=gitproxy git fetch upstream
	; or persist locally via
	;   git config core.gitproxy 'gitproxy'
	;gitproxy = gitproxy
[diff]
	; Use (c)ommit, (i)ndex or (w)orking copy instead of the standard a/ b/
	; paths.
	mnemonicprefix = true
	; Detect both renames and copies.
	renames = copies
[log]
	; Even with "date=local", Git does not obey my locale's date settings.
	; Fortunately, "ISO" matches my preferred format pretty well, so I get dates
	; like "2012-03-16 10:19:21 +0100" instead of "Fri Mar 16 10:19:21 2012
	; +0100".
	date = iso
[merge]
	; Include the merge base = last common ancestor in the middle of a
	; change, after a |||||| marker.
	conflictstyle = diff3	; Requires git 1.6.
	; Note: Cannot use the full path here, as git only recognizes certain
	; executable names, or a custom mergetool.<tool>.cmd would need to be
	; implemented.
	tool = gvimdiff

	; If git merge is called without any commit argument, merge the remote
	; tracking branch. For when git says: "Your branch is behind
	; 'origin/tracked-branch', and can be fast-forwarded."
	; Note: I do not enable this by default, but rather define a new alias
	; "fast-forward".
	;defaultToUpstream = true
[user]
	name = Ingo Karkat
	email = swdev@ingo-karkat.de
[http]
	; Avoid SSL certificate errors when using https:// URLs due to the fact
	; that the up-to-date browser certificates may not be available to Git.
	; Try this first to verify that this is the problem:
	; env GIT_SSL_NO_VERIFY=true git clone https://github...
	;sslVerify = false
[interactive]
	; No need to acknowledge choices with <Enter> when adding hunks and for
	; other interactive commands.
	singlekey = true
[push]
	; git push will by default push all branches that have the same name on
	; the remote. Limit this behavior to just the current branch to prevent
	; accidental pushes to branches which you're not ready to push yet.
	; Source: http://mislav.uniqpath.com/2010/07/git-tips/
	default = tracking
	; "Tracking" is essentially a link between a local and remote branch.
	; When working on a local branch that tracks some other branch, you can
	; git pull and git push without any extra arguments and git will know
	; what to do.
[rebase]
	; When the commit log message begins with "squash! ..." or "fixup! ...",
	; and there is a commit whose title begins with the same ..., automatically
	; modify the todo list of rebase -i so that the commit marked for squashing
	; comes right after the commit to be modified, and change the action of the
	; moved commit from pick to squash (or fixup).
	; You can create those commits via
	; 	git commit --fixup|--squash <commit>
	; or even by referencing the most recent commit whose message contains <text>
	; 	git commit --squash :/<text>
	autosquash = true
[rerere]
	; Enable the recording of resolved conflicts, so that identical hunks can be
	; resolved automatically later on.
	enabled = true
