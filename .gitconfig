[alias]
	; Note: You cannot override a built-in Git command via an alias. Cp.
	; http://stackoverflow.com/questions/3538774/is-it-possible-to-override-git-command-by-git-alias
	;
	;alias = config --global --get-regexp 'alias\\..*' ; List all defined aliases. 
	; Note: If you name the shell command "git-aliasname", there's no need
	; to define an alias here; Git will automatically pick it up. The
	; downside is that you cannot pass alias arguments to it here: 
	; "!git-aliasname arg1" will NOT pass arg1 to the script! 
	; (But "git aliasname arg1" on the command-line with work.) 
	;alias = !git-alias
	; To do something with individual arguments, use something like this: 
	;x = "!sh -c 'echo args: \"$@\"' -"
	listconfig = config --global --list
	addhunk = add --patch	; Interactively add individual hunks changed in the working copy. 
	amend = commit --amend --reedit-message=HEAD	; Amend to last commit. 
	br = branch
	ci = commit -a ; Check in all changes. 
	cm = checkout master
	co = checkout
	bl = !git-shortblame
	file-blame = !git ls-files | xargs -n1 -i{} git log -1 --pretty=format:\"%h %an (%ar) {}\" -- {} ; Show author name and last date for each file. 
	st = status -sb ; Concise status with branch and tracking info. 

	root = !eval cd "$(pwd)/$(git rev-parse --show-cdup)" && pwd ; Show root dir of this Git working copy. 
	sh = !git-sh	; Enter a bunch of git commands interactively. 
	serve = !git daemon --reuseaddr --verbose  --base-path=. --export-all ./.git ; Fire up a git daemon for the repo you are currently in. 
	whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -" ; Look up person by name or email address. 
	whodid = shortlog -n	; Show log sorted by name and their commits. 
	statistics = shortlog -n -s	; Display a list of committers sorted by the frequency of commits. Use HEAD~42.. or v2.6..v2.7 to limit to range. 
	whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short	; Print info about hash or commit name. 

	;; diff: --color-words to use word-based (not line-based) diff granularity
	d = diff    ; ... unstaged changes in working copy. 
	dh = diff HEAD ; ... both staged or unstaged changes since last commit. 
	di = diff --cached ; ... staged changes in the index about to be committed. 
	dp = !git-dp ; ... with predecessor, either current HEAD or passed revision. 
	dt = !git-difftoday ; Show all changes from today (override with --since=...) in a single big diff. 

	g = grep -n
	; --color not yet supported by Git 1.6. 
	;g = grep --color -n
	gf = grep --files-with-matches
	; XXX: Apparently, aliases aren't case-sensitive. 
	;gF = grep --files-without-match
	
	;; log et al: Consider only commit messages including /regexp/ via --grep=regexp. 
	findchange = !git-pickaxe --date=relative -p ; Pickaxe: Show log and commits where text or /regexp/ was changed. 
	findlogs = !git-pickaxe ; Pickaxe: Show log where text or /regexp/ was changed. 
	findlg = !git-pickaxe --abbrev-commit --date=relative --decorate --pretty=oneline ; Pickaxe: Show short log where text or /regexp/ was changed. 
	lc = whatchanged -p ; Logs together with diff between commits. 
	;; show: Log together with diff for a particular commit. 
	lg = log --abbrev-commit --date=relative --decorate --graph --pretty=oneline; Topology graph of branches and tags. 
	;lg = log --abbrev-commit --date=relative --decorate --graph --pretty=format:'%Ccyan%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
	lt = !git-logtoday ; Show log of today's (override with --since=...) changes formatted for including in pull request or email. 
	logfetched = log ORIG_HEAD.. --stat --no-merges	; List all new commits after you fetched. 
	last  = cat-file commit HEAD	; Show last commit info: Hashes and author. Use "git show" for more details. 
	changes = diff --name-status -r ; Subversion-like 'svn status' reporting.
	;; describe: Show the most recent tag that is reachable from a commit. 
	contains = describe --contains	; Show in which tag(s) a commit is contained, i.e. in which versions this was shipped. 

	cleanall = clean -d -x	; Remove all untracked files and directories, restoring a pristine working copy. 
	lsprivate = !git-lsprivate ; Show all non-ignored files not under version control. 
	;lsprivate = clean --dry-run ; Show all non-ignored files not under version control. 
	rmprivate = !git-rmprivate ; Remove all non-ignored files not under version control. 

	unstage = reset HEAD --	; Undo "git add <file>"; removes the file from the index, so that it isn't committed. (Alternatively, you can commit a few files via "git commit <file>" directly, bypassing the index.) 
	cancel = reset --soft HEAD^ ; Cancel the last commit; keep working copy and index. 
	wipe = reset --hard ; Reset HEAD, working copy and index. 
	rb = rebase
	rbc = rebase --continue
	; git rebase HEAD <feature> && git rebase HEAD @{-2} ; rebase <feature> to current branch and merge back to current
	mt = mergetool
	;; merge-base: Identify branch point (common ancestor). 

	udiff = diff upstream/master ; Show differences to upstream. 
	upush = push origin	; Publish <branch> / master to my GitHub clone to get them pulled into upstream. 
	udelete = push origin --delete ; Delete remote <branch> in my GitHub clone. Older git must use "push origin :BRANCHNAME"
	ufetch = fetch upstream	; Get upstream changes. 
	umerge = merge upstream/master	; Merge upstream changes with my local repo. 
	urb = rebase upstream/master	; Rebase my commits on top of the latest upstream. 
	; To make pull default to rebase instead of merge, can use these: 
	; # make "git pull" on master always use rebase
	; $ git config branch.master.rebase true
	; You can also set up a global option to set the last property for every
	; new tracked branch:
	; # setup rebase for every tracking branch
	; $ git config --global branch.autosetuprebase always
	; Source: http://mislav.uniqpath.com/2010/07/git-tips/
[clean]
	requireForce = false
[color]
	branch = auto
	diff = auto
	grep = auto
	interactive = auto
	status = auto
	ui = auto ; Requires git 1.6. 
[color "branch"]
	current = normal reverse
	local = normal
	remote = normal dim
	plain = normal ul
[color "diff"]
	plain = normal
	meta = cyan
	frag = blue bold
	old = red
	new = green
	commit = cyan
	; whitespace =
[color "grep"]
	external = --color=always
[color "interactive"]
	prompt = normal reverse
	header = normal bold
	help = normal
	; error = 
[color "status"]
	header = green
	updated = normal
	changed = normal ul
	untracked = normal bold
[core]
	editor = vim

	; Do not highlight trailing whitespace; I use this in comments. 
	whitespace=space-before-tab

	; Global user-specific ignored file list. (Unfortunately must be full
	; path without environment variables.) 
	excludesfile = /home/inkarkat/.gitignore
[diff]
	renames = true
[merge]
	; Include the merge base = last common ancestor in the middle of a
	; change, after a |||||| marker. 
	conflictstyle = diff3	; Requires git 1.6. 
	; Note: Cannot use the full path here, as git only recognizes certain
	; executable names, or a custom mergetool.<tool>.cmd would need to be
	; implemented. 
	tool = gvimdiff
[user]
	name = Ingo Karkat
	email = swdev@ingo-karkat.de
[github]
	user = inkarkat
[http]
	; Avoid SSL certificate errors when using https:// URLs due to the fact
	; that the up-to-date browser certificates may not be available to Git. 
	; Try this first to verify that this is the problem: 
	; env GIT_SSL_NO_VERIFY=true git clone https://github... 
	;sslVerify = false
[push]
	; git push will by default push all branches that have the same name on
	; the remote. Limit this behavior to just the current branch to prevent
	; accidental pushes to branches which you're not ready to push yet.
	; Source: http://mislav.uniqpath.com/2010/07/git-tips/
	default = tracking
